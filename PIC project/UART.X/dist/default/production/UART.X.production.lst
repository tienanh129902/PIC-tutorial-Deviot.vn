

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sun May 09 22:40:32 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.20
    18                           ; Generated 12/02/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  0107                     	;# 
   116  0108                     	;# 
   117  0109                     	;# 
   118  010C                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  0185                     	;# 
   124  0187                     	;# 
   125  0188                     	;# 
   126  0189                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  0081                     	;# 
   165  0085                     	;# 
   166  0086                     	;# 
   167  0087                     	;# 
   168  0088                     	;# 
   169  0089                     	;# 
   170  008C                     	;# 
   171  008D                     	;# 
   172  008E                     	;# 
   173  008F                     	;# 
   174  0090                     	;# 
   175  0091                     	;# 
   176  0092                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0094                     	;# 
   181  0095                     	;# 
   182  0096                     	;# 
   183  0097                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009A                     	;# 
   187  009B                     	;# 
   188  009C                     	;# 
   189  009D                     	;# 
   190  009E                     	;# 
   191  009F                     	;# 
   192  0105                     	;# 
   193  0107                     	;# 
   194  0108                     	;# 
   195  0109                     	;# 
   196  010C                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  010F                     	;# 
   201  0185                     	;# 
   202  0187                     	;# 
   203  0188                     	;# 
   204  0189                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  001A                     _RCREG	set	26
   208  0019                     _TXREG	set	25
   209  0044                     _RD4	set	68
   210  0065                     _RCIF	set	101
   211  00C1                     _OERR	set	193
   212  0064                     _TXIF	set	100
   213  00C6                     _RX9	set	198
   214  00C4                     _CREN	set	196
   215  00C7                     _SPEN	set	199
   216  0099                     _SPBRG	set	153
   217  0444                     _TRISD4	set	1092
   218  04C6                     _TX9	set	1222
   219  04C5                     _TXEN	set	1221
   220  04C2                     _BRGH	set	1218
   221  04C4                     _SYNC	set	1220
   222  043F                     _TRISC7	set	1087
   223  043E                     _TRISC6	set	1086
   224  0C3B                     _BRG16	set	3131
   225                           
   226                           	psect	strings
   227  0003                     __pstrings:
   228  0003                     stringtab:
   229  0003                     __stringtab:
   230  0003                     stringcode:	
   231                           ;	String table - string pointers are 1 byte each
   232                           
   233  0003                     stringdir:
   234  0003  3000               	movlw	high stringdir
   235  0004  008A               	movwf	10
   236  0005  0804               	movf	4,w
   237  0006  0A84               	incf	4,f
   238  0007  0782               	addwf	2,f
   239  0008                     __stringbase:
   240  0008  3400               	retlw	0
   241  0009                     __end_of__stringtab:
   242  0009                     STR_2:
   243  0009  344C               	retlw	76	;'L'
   244  000A  3445               	retlw	69	;'E'
   245  000B  3444               	retlw	68	;'D'
   246  000C  3420               	retlw	32	;' '
   247  000D  346F               	retlw	111	;'o'
   248  000E  3466               	retlw	102	;'f'
   249  000F  3466               	retlw	102	;'f'
   250  0010  3420               	retlw	32	;' '
   251  0011  3400               	retlw	0
   252  0012                     STR_1:
   253  0012  344C               	retlw	76	;'L'
   254  0013  3445               	retlw	69	;'E'
   255  0014  3444               	retlw	68	;'D'
   256  0015  3420               	retlw	32	;' '
   257  0016  346F               	retlw	111	;'o'
   258  0017  346E               	retlw	110	;'n'
   259  0018  3420               	retlw	32	;' '
   260  0019  3400               	retlw	0
   261                           
   262                           	psect	cinit
   263  07FC                     start_initialization:	
   264                           ; #config settings
   265                           
   266  07FC                     __initialization:
   267  07FC                     end_of_initialization:	
   268                           ;End of C runtime variable initialization code
   269                           
   270  07FC                     __end_of__initialization:
   271  07FC  0183               	clrf	3
   272  07FD  120A  118A  2F15   	ljmp	_main	;jump to C main() function
   273                           
   274                           	psect	cstackCOMMON
   275  0070                     __pcstackCOMMON:
   276  0070                     ?_UART_sendChar:
   277  0070                     ??_UART_sendChar:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_UART_sendString:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?_UART_getChar:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ??_UART_getChar:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?_main:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?___aldiv:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     UART_sendChar@data:	
   296                           ; 4 bytes @ 0x0
   297                           
   298  0070                     ___aldiv@divisor:	
   299                           ; 1 bytes @ 0x0
   300                           
   301                           
   302                           ; 4 bytes @ 0x0
   303  0070                     	ds	1
   304  0071                     ??_UART_sendString:
   305                           
   306                           ; 1 bytes @ 0x1
   307  0071                     	ds	1
   308  0072                     UART_sendString@str:
   309                           
   310                           ; 1 bytes @ 0x2
   311  0072                     	ds	2
   312  0074                     ___aldiv@dividend:
   313                           
   314                           ; 4 bytes @ 0x4
   315  0074                     	ds	4
   316  0078                     ??___aldiv:
   317                           
   318                           ; 1 bytes @ 0x8
   319  0078                     	ds	1
   320  0079                     ??_UART_init:
   321                           
   322                           ; 1 bytes @ 0x9
   323  0079                     	ds	4
   324                           
   325                           	psect	cstackBANK0
   326  0020                     __pcstackBANK0:
   327  0020                     ___aldiv@counter:
   328                           
   329                           ; 1 bytes @ 0x0
   330  0020                     	ds	1
   331  0021                     ___aldiv@sign:
   332                           
   333                           ; 1 bytes @ 0x1
   334  0021                     	ds	1
   335  0022                     ___aldiv@quotient:
   336                           
   337                           ; 4 bytes @ 0x2
   338  0022                     	ds	4
   339  0026                     ?_UART_init:
   340  0026                     UART_init@baud:	
   341                           ; 1 bytes @ 0x6
   342                           
   343                           
   344                           ; 4 bytes @ 0x6
   345  0026                     	ds	4
   346  002A                     ??_main:
   347                           
   348                           ; 1 bytes @ 0xA
   349  002A                     	ds	3
   350                           
   351                           	psect	maintext
   352  0715                     __pmaintext:	
   353 ;;
   354 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   355 ;;
   356 ;; *************** function _main *****************
   357 ;; Defined at:
   358 ;;		line 69 in file "main.c"
   359 ;; Parameters:    Size  Location     Type
   360 ;;		None
   361 ;; Auto vars:     Size  Location     Type
   362 ;;		None
   363 ;; Return value:  Size  Location     Type
   364 ;;                  1    wreg      void 
   365 ;; Registers used:
   366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   367 ;; Tracked objects:
   368 ;;		On entry : B00/0
   369 ;;		On exit  : 0/0
   370 ;;		Unchanged: 0/0
   371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   372 ;;      Params:         0       0       0       0       0
   373 ;;      Locals:         0       0       0       0       0
   374 ;;      Temps:          0       3       0       0       0
   375 ;;      Totals:         0       3       0       0       0
   376 ;;Total ram usage:        3 bytes
   377 ;; Hardware stack levels required when called:    2
   378 ;; This function calls:
   379 ;;		_UART_getChar
   380 ;;		_UART_init
   381 ;;		_UART_sendString
   382 ;; This function is called by:
   383 ;;		Startup code after reset
   384 ;; This function uses a non-reentrant model
   385 ;;
   386                           
   387                           
   388                           ;psect for function _main
   389  0715                     _main:
   390  0715                     l812:	
   391                           ;incstack = 0
   392                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   393                           
   394                           
   395                           ;main.c: 70:     UART_init(9600);
   396  0715  3000               	movlw	0
   397  0716  1283               	bcf	3,5	;RP0=0, select bank0
   398  0717  1303               	bcf	3,6	;RP1=0, select bank0
   399  0718  00A9               	movwf	UART_init@baud+3
   400  0719  3000               	movlw	0
   401  071A  00A8               	movwf	UART_init@baud+2
   402  071B  3025               	movlw	37
   403  071C  00A7               	movwf	UART_init@baud+1
   404  071D  3080               	movlw	128
   405  071E  00A6               	movwf	UART_init@baud
   406  071F  120A  118A  26D1  120A  118A  	fcall	_UART_init
   407  0724                     l814:
   408                           
   409                           ;main.c: 71:     TRISD4 = 0;
   410  0724  1683               	bsf	3,5	;RP0=1, select bank1
   411  0725  1303               	bcf	3,6	;RP1=0, select bank1
   412  0726  1208               	bcf	8,4	;volatile
   413  0727                     l816:
   414                           
   415                           ;main.c: 73:     {;main.c: 74:         if(UART_getChar()=='1')
   416  0727  120A  118A  26A4  120A  118A  	fcall	_UART_getChar
   417  072C  3A31               	xorlw	49
   418  072D  1D03               	skipz
   419  072E  2F30               	goto	u301
   420  072F  2F31               	goto	u300
   421  0730                     u301:
   422  0730  2F3A               	goto	l822
   423  0731                     u300:
   424  0731                     l818:
   425                           
   426                           ;main.c: 75:         {;main.c: 76:             RD4 = 1;
   427  0731  1283               	bcf	3,5	;RP0=0, select bank0
   428  0732  1303               	bcf	3,6	;RP1=0, select bank0
   429  0733  1608               	bsf	8,4	;volatile
   430  0734                     l820:
   431                           
   432                           ;main.c: 77:             UART_sendString("LED on ");
   433  0734  300A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   434  0735  120A  118A  26B2  120A  118A  	fcall	_UART_sendString
   435  073A                     l822:
   436                           
   437                           ;main.c: 80:         if(UART_getChar()=='0')
   438  073A  120A  118A  26A4  120A  118A  	fcall	_UART_getChar
   439  073F  3A30               	xorlw	48
   440  0740  1D03               	skipz
   441  0741  2F43               	goto	u311
   442  0742  2F44               	goto	u310
   443  0743                     u311:
   444  0743  2F4D               	goto	l828
   445  0744                     u310:
   446  0744                     l824:
   447                           
   448                           ;main.c: 81:         {;main.c: 82:             RD4 = 0;
   449  0744  1283               	bcf	3,5	;RP0=0, select bank0
   450  0745  1303               	bcf	3,6	;RP1=0, select bank0
   451  0746  1208               	bcf	8,4	;volatile
   452  0747                     l826:
   453                           
   454                           ;main.c: 83:             UART_sendString("LED off ");
   455  0747  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   456  0748  120A  118A  26B2  120A  118A  	fcall	_UART_sendString
   457  074D                     l828:
   458                           
   459                           ;main.c: 86:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   460  074D  300B               	movlw	11
   461  074E  1283               	bcf	3,5	;RP0=0, select bank0
   462  074F  1303               	bcf	3,6	;RP1=0, select bank0
   463  0750  00AC               	movwf	??_main+2
   464  0751  3026               	movlw	38
   465  0752  00AB               	movwf	??_main+1
   466  0753  305D               	movlw	93
   467  0754  00AA               	movwf	??_main
   468  0755                     u327:
   469  0755  0BAA               	decfsz	??_main,f
   470  0756  2F55               	goto	u327
   471  0757  0BAB               	decfsz	??_main+1,f
   472  0758  2F55               	goto	u327
   473  0759  0BAC               	decfsz	??_main+2,f
   474  075A  2F55               	goto	u327
   475  075B  2F27               	goto	l816
   476  075C  120A  118A  2800   	ljmp	start
   477  075F                     __end_of_main:
   478                           
   479                           	psect	text1
   480  06B2                     __ptext1:	
   481 ;; *************** function _UART_sendString *****************
   482 ;; Defined at:
   483 ;;		line 50 in file "main.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;  str             1    wreg     PTR unsigned char 
   486 ;;		 -> STR_2(9), STR_1(8), 
   487 ;; Auto vars:     Size  Location     Type
   488 ;;  str             1    2[COMMON] PTR unsigned char 
   489 ;;		 -> STR_2(9), STR_1(8), 
   490 ;; Return value:  Size  Location     Type
   491 ;;                  1    wreg      void 
   492 ;; Registers used:
   493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   499 ;;      Params:         0       0       0       0       0
   500 ;;      Locals:         1       0       0       0       0
   501 ;;      Temps:          1       0       0       0       0
   502 ;;      Totals:         2       0       0       0       0
   503 ;;Total ram usage:        2 bytes
   504 ;; Hardware stack levels used:    1
   505 ;; Hardware stack levels required when called:    1
   506 ;; This function calls:
   507 ;;		_UART_sendChar
   508 ;; This function is called by:
   509 ;;		_main
   510 ;; This function uses a non-reentrant model
   511 ;;
   512                           
   513                           
   514                           ;psect for function _UART_sendString
   515  06B2                     _UART_sendString:
   516                           
   517                           ;incstack = 0
   518                           ; Regs used in _UART_sendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   519                           ;UART_sendString@str stored from wreg
   520  06B2  00F2               	movwf	UART_sendString@str
   521  06B3                     l804:
   522                           
   523                           ;main.c: 50: void UART_sendString(char *str);main.c: 51: {;main.c: 52:     while(*str)
   524  06B3  2EC4               	goto	l810
   525  06B4                     l806:
   526                           
   527                           ;main.c: 53:     {;main.c: 54:         UART_sendChar(*str++);
   528  06B4  0872               	movf	UART_sendString@str,w
   529  06B5  0084               	movwf	4
   530  06B6  120A  118A  2003  120A  118A  	fcall	stringdir
   531  06BB  120A  118A  269A  120A  118A  	fcall	_UART_sendChar
   532  06C0                     l808:
   533  06C0  3001               	movlw	1
   534  06C1  00F1               	movwf	??_UART_sendString
   535  06C2  0871               	movf	??_UART_sendString,w
   536  06C3  07F2               	addwf	UART_sendString@str,f
   537  06C4                     l810:
   538                           
   539                           ;main.c: 52:     while(*str)
   540  06C4  0872               	movf	UART_sendString@str,w
   541  06C5  0084               	movwf	4
   542  06C6  120A  118A  2003  120A  118A  	fcall	stringdir
   543  06CB  3A00               	xorlw	0
   544  06CC  1D03               	skipz
   545  06CD  2ECF               	goto	u291
   546  06CE  2ED0               	goto	u290
   547  06CF                     u291:
   548  06CF  2EB4               	goto	l806
   549  06D0                     u290:
   550  06D0                     l53:
   551  06D0  0008               	return
   552  06D1                     __end_of_UART_sendString:
   553                           
   554                           	psect	text2
   555  069A                     __ptext2:	
   556 ;; *************** function _UART_sendChar *****************
   557 ;; Defined at:
   558 ;;		line 44 in file "main.c"
   559 ;; Parameters:    Size  Location     Type
   560 ;;  data            1    wreg     unsigned char 
   561 ;; Auto vars:     Size  Location     Type
   562 ;;  data            1    0[COMMON] unsigned char 
   563 ;; Return value:  Size  Location     Type
   564 ;;                  1    wreg      void 
   565 ;; Registers used:
   566 ;;		wreg
   567 ;; Tracked objects:
   568 ;;		On entry : 0/0
   569 ;;		On exit  : 0/0
   570 ;;		Unchanged: 0/0
   571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   572 ;;      Params:         0       0       0       0       0
   573 ;;      Locals:         1       0       0       0       0
   574 ;;      Temps:          0       0       0       0       0
   575 ;;      Totals:         1       0       0       0       0
   576 ;;Total ram usage:        1 bytes
   577 ;; Hardware stack levels used:    1
   578 ;; This function calls:
   579 ;;		Nothing
   580 ;; This function is called by:
   581 ;;		_UART_sendString
   582 ;; This function uses a non-reentrant model
   583 ;;
   584                           
   585                           
   586                           ;psect for function _UART_sendChar
   587  069A                     _UART_sendChar:
   588                           
   589                           ;incstack = 0
   590                           ; Regs used in _UART_sendChar: [wreg]
   591                           ;UART_sendChar@data stored from wreg
   592  069A  00F0               	movwf	UART_sendChar@data
   593  069B                     l662:
   594  069B                     l44:	
   595                           ;main.c: 44: void UART_sendChar(char data);main.c: 45: {;main.c: 46:     while(!TXIF);
   596                           
   597  069B  1283               	bcf	3,5	;RP0=0, select bank0
   598  069C  1303               	bcf	3,6	;RP1=0, select bank0
   599  069D  1E0C               	btfss	12,4	;volatile
   600  069E  2EA0               	goto	u11
   601  069F  2EA1               	goto	u10
   602  06A0                     u11:
   603  06A0  2E9B               	goto	l44
   604  06A1                     u10:
   605  06A1                     l664:
   606                           
   607                           ;main.c: 47:     TXREG = data;
   608  06A1  0870               	movf	UART_sendChar@data,w
   609  06A2  0099               	movwf	25	;volatile
   610  06A3                     l47:
   611  06A3  0008               	return
   612  06A4                     __end_of_UART_sendChar:
   613                           
   614                           	psect	text3
   615  06D1                     __ptext3:	
   616 ;; *************** function _UART_init *****************
   617 ;; Defined at:
   618 ;;		line 30 in file "main.c"
   619 ;; Parameters:    Size  Location     Type
   620 ;;  baud            4    6[BANK0 ] long 
   621 ;; Auto vars:     Size  Location     Type
   622 ;;		None
   623 ;; Return value:  Size  Location     Type
   624 ;;                  1    wreg      void 
   625 ;; Registers used:
   626 ;;		wreg, status,2, status,0, pclath, cstack
   627 ;; Tracked objects:
   628 ;;		On entry : 0/0
   629 ;;		On exit  : 0/0
   630 ;;		Unchanged: 0/0
   631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   632 ;;      Params:         0       4       0       0       0
   633 ;;      Locals:         0       0       0       0       0
   634 ;;      Temps:          4       0       0       0       0
   635 ;;      Totals:         4       4       0       0       0
   636 ;;Total ram usage:        8 bytes
   637 ;; Hardware stack levels used:    1
   638 ;; Hardware stack levels required when called:    1
   639 ;; This function calls:
   640 ;;		___aldiv
   641 ;; This function is called by:
   642 ;;		_main
   643 ;; This function uses a non-reentrant model
   644 ;;
   645                           
   646                           
   647                           ;psect for function _UART_init
   648  06D1                     _UART_init:
   649  06D1                     l792:	
   650                           ;incstack = 0
   651                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
   652                           
   653                           
   654                           ;main.c: 30: void UART_init(long baud);main.c: 31: {;main.c: 32:     TRISC6 = 0;
   655  06D1  1683               	bsf	3,5	;RP0=1, select bank1
   656  06D2  1303               	bcf	3,6	;RP1=0, select bank1
   657  06D3  1307               	bcf	7,6	;volatile
   658                           
   659                           ;main.c: 33:     TRISC7 = 1;
   660  06D4  1787               	bsf	7,7	;volatile
   661                           
   662                           ;main.c: 34:     SYNC = 0;
   663  06D5  1218               	bcf	24,4	;volatile
   664                           
   665                           ;main.c: 35:     BRGH = 0;
   666  06D6  1118               	bcf	24,2	;volatile
   667                           
   668                           ;main.c: 36:     BRG16 = 0;
   669  06D7  1683               	bsf	3,5	;RP0=1, select bank3
   670  06D8  1703               	bsf	3,6	;RP1=1, select bank3
   671  06D9  1187               	bcf	7,3	;volatile
   672  06DA                     l794:
   673                           
   674                           ;main.c: 37:     SPBRG = (8000000 / (64*baud)) -1;
   675  06DA  1283               	bcf	3,5	;RP0=0, select bank0
   676  06DB  1303               	bcf	3,6	;RP1=0, select bank0
   677  06DC  0826               	movf	UART_init@baud,w
   678  06DD  00F9               	movwf	??_UART_init
   679  06DE  0827               	movf	UART_init@baud+1,w
   680  06DF  00FA               	movwf	??_UART_init+1
   681  06E0  0828               	movf	UART_init@baud+2,w
   682  06E1  00FB               	movwf	??_UART_init+2
   683  06E2  0829               	movf	UART_init@baud+3,w
   684  06E3  00FC               	movwf	??_UART_init+3
   685  06E4  3006               	movlw	6
   686  06E5                     u285:
   687  06E5  1003               	clrc
   688  06E6  0DF9               	rlf	??_UART_init,f
   689  06E7  0DFA               	rlf	??_UART_init+1,f
   690  06E8  0DFB               	rlf	??_UART_init+2,f
   691  06E9  0DFC               	rlf	??_UART_init+3,f
   692  06EA                     u280:
   693  06EA  3EFF               	addlw	-1
   694  06EB  1D03               	skipz
   695  06EC  2EE5               	goto	u285
   696  06ED  087C               	movf	??_UART_init+3,w
   697  06EE  00F3               	movwf	___aldiv@divisor+3
   698  06EF  087B               	movf	??_UART_init+2,w
   699  06F0  00F2               	movwf	___aldiv@divisor+2
   700  06F1  087A               	movf	??_UART_init+1,w
   701  06F2  00F1               	movwf	___aldiv@divisor+1
   702  06F3  0879               	movf	??_UART_init,w
   703  06F4  00F0               	movwf	___aldiv@divisor
   704  06F5  3000               	movlw	0
   705  06F6  00F7               	movwf	___aldiv@dividend+3
   706  06F7  307A               	movlw	122
   707  06F8  00F6               	movwf	___aldiv@dividend+2
   708  06F9  3012               	movlw	18
   709  06FA  00F5               	movwf	___aldiv@dividend+1
   710  06FB  3000               	movlw	0
   711  06FC  00F4               	movwf	___aldiv@dividend
   712  06FD  120A  118A  275F  120A  118A  	fcall	___aldiv
   713  0702  0870               	movf	?___aldiv,w
   714  0703  3EFF               	addlw	255
   715  0704  1683               	bsf	3,5	;RP0=1, select bank1
   716  0705  1303               	bcf	3,6	;RP1=0, select bank1
   717  0706  0099               	movwf	25	;volatile
   718  0707                     l796:
   719                           
   720                           ;main.c: 38:     SPEN = 1;
   721  0707  1283               	bcf	3,5	;RP0=0, select bank0
   722  0708  1303               	bcf	3,6	;RP1=0, select bank0
   723  0709  1798               	bsf	24,7	;volatile
   724  070A                     l798:
   725                           
   726                           ;main.c: 39:     TXEN = 1;
   727  070A  1683               	bsf	3,5	;RP0=1, select bank1
   728  070B  1303               	bcf	3,6	;RP1=0, select bank1
   729  070C  1698               	bsf	24,5	;volatile
   730  070D                     l800:
   731                           
   732                           ;main.c: 40:     CREN = 1;
   733  070D  1283               	bcf	3,5	;RP0=0, select bank0
   734  070E  1303               	bcf	3,6	;RP1=0, select bank0
   735  070F  1618               	bsf	24,4	;volatile
   736  0710                     l802:
   737                           
   738                           ;main.c: 41:     TX9 = RX9 = 0;
   739  0710  1318               	bcf	24,6	;volatile
   740  0711  1683               	bsf	3,5	;RP0=1, select bank1
   741  0712  1303               	bcf	3,6	;RP1=0, select bank1
   742  0713  1318               	bcf	24,6	;volatile
   743  0714                     l41:
   744  0714  0008               	return
   745  0715                     __end_of_UART_init:
   746                           
   747                           	psect	text4
   748  075F                     __ptext4:	
   749 ;; *************** function ___aldiv *****************
   750 ;; Defined at:
   751 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\aldiv.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;  divisor         4    0[COMMON] long 
   754 ;;  dividend        4    4[COMMON] long 
   755 ;; Auto vars:     Size  Location     Type
   756 ;;  quotient        4    2[BANK0 ] long 
   757 ;;  sign            1    1[BANK0 ] unsigned char 
   758 ;;  counter         1    0[BANK0 ] unsigned char 
   759 ;; Return value:  Size  Location     Type
   760 ;;                  4    0[COMMON] long 
   761 ;; Registers used:
   762 ;;		wreg, status,2, status,0
   763 ;; Tracked objects:
   764 ;;		On entry : 0/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   768 ;;      Params:         8       0       0       0       0
   769 ;;      Locals:         0       6       0       0       0
   770 ;;      Temps:          1       0       0       0       0
   771 ;;      Totals:         9       6       0       0       0
   772 ;;Total ram usage:       15 bytes
   773 ;; Hardware stack levels used:    1
   774 ;; This function calls:
   775 ;;		Nothing
   776 ;; This function is called by:
   777 ;;		_UART_init
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           
   782                           ;psect for function ___aldiv
   783  075F                     ___aldiv:
   784  075F                     l752:	
   785                           ;incstack = 0
   786                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
   787                           
   788  075F  1283               	bcf	3,5	;RP0=0, select bank0
   789  0760  1303               	bcf	3,6	;RP1=0, select bank0
   790  0761  01A1               	clrf	___aldiv@sign
   791  0762                     l754:
   792  0762  1FF3               	btfss	___aldiv@divisor+3,7
   793  0763  2F65               	goto	u181
   794  0764  2F66               	goto	u180
   795  0765                     u181:
   796  0765  2F73               	goto	l221
   797  0766                     u180:
   798  0766                     l756:
   799  0766  09F0               	comf	___aldiv@divisor,f
   800  0767  09F1               	comf	___aldiv@divisor+1,f
   801  0768  09F2               	comf	___aldiv@divisor+2,f
   802  0769  09F3               	comf	___aldiv@divisor+3,f
   803  076A  0AF0               	incf	___aldiv@divisor,f
   804  076B  1903               	skipnz
   805  076C  0AF1               	incf	___aldiv@divisor+1,f
   806  076D  1903               	skipnz
   807  076E  0AF2               	incf	___aldiv@divisor+2,f
   808  076F  1903               	skipnz
   809  0770  0AF3               	incf	___aldiv@divisor+3,f
   810  0771  01A1               	clrf	___aldiv@sign
   811  0772  0AA1               	incf	___aldiv@sign,f
   812  0773                     l221:
   813  0773  1FF7               	btfss	___aldiv@dividend+3,7
   814  0774  2F76               	goto	u191
   815  0775  2F77               	goto	u190
   816  0776                     u191:
   817  0776  2F86               	goto	l762
   818  0777                     u190:
   819  0777                     l758:
   820  0777  09F4               	comf	___aldiv@dividend,f
   821  0778  09F5               	comf	___aldiv@dividend+1,f
   822  0779  09F6               	comf	___aldiv@dividend+2,f
   823  077A  09F7               	comf	___aldiv@dividend+3,f
   824  077B  0AF4               	incf	___aldiv@dividend,f
   825  077C  1903               	skipnz
   826  077D  0AF5               	incf	___aldiv@dividend+1,f
   827  077E  1903               	skipnz
   828  077F  0AF6               	incf	___aldiv@dividend+2,f
   829  0780  1903               	skipnz
   830  0781  0AF7               	incf	___aldiv@dividend+3,f
   831  0782                     l760:
   832  0782  3001               	movlw	1
   833  0783  00F8               	movwf	??___aldiv
   834  0784  0878               	movf	??___aldiv,w
   835  0785  06A1               	xorwf	___aldiv@sign,f
   836  0786                     l762:
   837  0786  3000               	movlw	0
   838  0787  00A5               	movwf	___aldiv@quotient+3
   839  0788  3000               	movlw	0
   840  0789  00A4               	movwf	___aldiv@quotient+2
   841  078A  3000               	movlw	0
   842  078B  00A3               	movwf	___aldiv@quotient+1
   843  078C  3000               	movlw	0
   844  078D  00A2               	movwf	___aldiv@quotient
   845  078E                     l764:
   846  078E  0873               	movf	___aldiv@divisor+3,w
   847  078F  0472               	iorwf	___aldiv@divisor+2,w
   848  0790  0471               	iorwf	___aldiv@divisor+1,w
   849  0791  0470               	iorwf	___aldiv@divisor,w
   850  0792  1903               	skipnz
   851  0793  2F95               	goto	u201
   852  0794  2F96               	goto	u200
   853  0795                     u201:
   854  0795  2FE3               	goto	l784
   855  0796                     u200:
   856  0796                     l766:
   857  0796  01A0               	clrf	___aldiv@counter
   858  0797  0AA0               	incf	___aldiv@counter,f
   859  0798  2FA6               	goto	l770
   860  0799                     l768:
   861  0799  3001               	movlw	1
   862  079A  00F8               	movwf	??___aldiv
   863  079B                     u215:
   864  079B  1003               	clrc
   865  079C  0DF0               	rlf	___aldiv@divisor,f
   866  079D  0DF1               	rlf	___aldiv@divisor+1,f
   867  079E  0DF2               	rlf	___aldiv@divisor+2,f
   868  079F  0DF3               	rlf	___aldiv@divisor+3,f
   869  07A0  0BF8               	decfsz	??___aldiv,f
   870  07A1  2F9B               	goto	u215
   871  07A2  3001               	movlw	1
   872  07A3  00F8               	movwf	??___aldiv
   873  07A4  0878               	movf	??___aldiv,w
   874  07A5  07A0               	addwf	___aldiv@counter,f
   875  07A6                     l770:
   876  07A6  1FF3               	btfss	___aldiv@divisor+3,7
   877  07A7  2FA9               	goto	u221
   878  07A8  2FAA               	goto	u220
   879  07A9                     u221:
   880  07A9  2F99               	goto	l768
   881  07AA                     u220:
   882  07AA                     l772:
   883  07AA  3001               	movlw	1
   884  07AB  00F8               	movwf	??___aldiv
   885  07AC                     u235:
   886  07AC  1003               	clrc
   887  07AD  0DA2               	rlf	___aldiv@quotient,f
   888  07AE  0DA3               	rlf	___aldiv@quotient+1,f
   889  07AF  0DA4               	rlf	___aldiv@quotient+2,f
   890  07B0  0DA5               	rlf	___aldiv@quotient+3,f
   891  07B1  0BF8               	decfsz	??___aldiv,f
   892  07B2  2FAC               	goto	u235
   893  07B3                     l774:
   894  07B3  0873               	movf	___aldiv@divisor+3,w
   895  07B4  0277               	subwf	___aldiv@dividend+3,w
   896  07B5  1D03               	skipz
   897  07B6  2FC1               	goto	u245
   898  07B7  0872               	movf	___aldiv@divisor+2,w
   899  07B8  0276               	subwf	___aldiv@dividend+2,w
   900  07B9  1D03               	skipz
   901  07BA  2FC1               	goto	u245
   902  07BB  0871               	movf	___aldiv@divisor+1,w
   903  07BC  0275               	subwf	___aldiv@dividend+1,w
   904  07BD  1D03               	skipz
   905  07BE  2FC1               	goto	u245
   906  07BF  0870               	movf	___aldiv@divisor,w
   907  07C0  0274               	subwf	___aldiv@dividend,w
   908  07C1                     u245:
   909  07C1  1C03               	skipc
   910  07C2  2FC4               	goto	u241
   911  07C3  2FC5               	goto	u240
   912  07C4                     u241:
   913  07C4  2FD4               	goto	l780
   914  07C5                     u240:
   915  07C5                     l776:
   916  07C5  0870               	movf	___aldiv@divisor,w
   917  07C6  02F4               	subwf	___aldiv@dividend,f
   918  07C7  0871               	movf	___aldiv@divisor+1,w
   919  07C8  1C03               	skipc
   920  07C9  0F71               	incfsz	___aldiv@divisor+1,w
   921  07CA  02F5               	subwf	___aldiv@dividend+1,f
   922  07CB  0872               	movf	___aldiv@divisor+2,w
   923  07CC  1C03               	skipc
   924  07CD  0F72               	incfsz	___aldiv@divisor+2,w
   925  07CE  02F6               	subwf	___aldiv@dividend+2,f
   926  07CF  0873               	movf	___aldiv@divisor+3,w
   927  07D0  1C03               	skipc
   928  07D1  0F73               	incfsz	___aldiv@divisor+3,w
   929  07D2  02F7               	subwf	___aldiv@dividend+3,f
   930  07D3                     l778:
   931  07D3  1422               	bsf	___aldiv@quotient,0
   932  07D4                     l780:
   933  07D4  3001               	movlw	1
   934  07D5                     u255:
   935  07D5  1003               	clrc
   936  07D6  0CF3               	rrf	___aldiv@divisor+3,f
   937  07D7  0CF2               	rrf	___aldiv@divisor+2,f
   938  07D8  0CF1               	rrf	___aldiv@divisor+1,f
   939  07D9  0CF0               	rrf	___aldiv@divisor,f
   940  07DA  3EFF               	addlw	-1
   941  07DB  1D03               	skipz
   942  07DC  2FD5               	goto	u255
   943  07DD                     l782:
   944  07DD  3001               	movlw	1
   945  07DE  02A0               	subwf	___aldiv@counter,f
   946  07DF  1D03               	btfss	3,2
   947  07E0  2FE2               	goto	u261
   948  07E1  2FE3               	goto	u260
   949  07E2                     u261:
   950  07E2  2FAA               	goto	l772
   951  07E3                     u260:
   952  07E3                     l784:
   953  07E3  0821               	movf	___aldiv@sign,w
   954  07E4  1903               	btfsc	3,2
   955  07E5  2FE7               	goto	u271
   956  07E6  2FE8               	goto	u270
   957  07E7                     u271:
   958  07E7  2FF3               	goto	l788
   959  07E8                     u270:
   960  07E8                     l786:
   961  07E8  09A2               	comf	___aldiv@quotient,f
   962  07E9  09A3               	comf	___aldiv@quotient+1,f
   963  07EA  09A4               	comf	___aldiv@quotient+2,f
   964  07EB  09A5               	comf	___aldiv@quotient+3,f
   965  07EC  0AA2               	incf	___aldiv@quotient,f
   966  07ED  1903               	skipnz
   967  07EE  0AA3               	incf	___aldiv@quotient+1,f
   968  07EF  1903               	skipnz
   969  07F0  0AA4               	incf	___aldiv@quotient+2,f
   970  07F1  1903               	skipnz
   971  07F2  0AA5               	incf	___aldiv@quotient+3,f
   972  07F3                     l788:
   973  07F3  0825               	movf	___aldiv@quotient+3,w
   974  07F4  00F3               	movwf	?___aldiv+3
   975  07F5  0824               	movf	___aldiv@quotient+2,w
   976  07F6  00F2               	movwf	?___aldiv+2
   977  07F7  0823               	movf	___aldiv@quotient+1,w
   978  07F8  00F1               	movwf	?___aldiv+1
   979  07F9  0822               	movf	___aldiv@quotient,w
   980  07FA  00F0               	movwf	?___aldiv
   981  07FB                     l231:
   982  07FB  0008               	return
   983  07FC                     __end_of___aldiv:
   984                           
   985                           	psect	text5
   986  06A4                     __ptext5:	
   987 ;; *************** function _UART_getChar *****************
   988 ;; Defined at:
   989 ;;		line 58 in file "main.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;		None
   994 ;; Return value:  Size  Location     Type
   995 ;;                  1    wreg      unsigned char 
   996 ;; Registers used:
   997 ;;		wreg
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1003 ;;      Params:         0       0       0       0       0
  1004 ;;      Locals:         0       0       0       0       0
  1005 ;;      Temps:          0       0       0       0       0
  1006 ;;      Totals:         0       0       0       0       0
  1007 ;;Total ram usage:        0 bytes
  1008 ;; Hardware stack levels used:    1
  1009 ;; This function calls:
  1010 ;;		Nothing
  1011 ;; This function is called by:
  1012 ;;		_main
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           
  1017                           ;psect for function _UART_getChar
  1018  06A4                     _UART_getChar:
  1019  06A4                     l726:	
  1020                           ;incstack = 0
  1021                           ; Regs used in _UART_getChar: [wreg]
  1022                           
  1023                           
  1024                           ;main.c: 60:     if(OERR)
  1025  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  1026  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  1027  06A6  1C98               	btfss	24,1	;volatile
  1028  06A7  2EA9               	goto	u141
  1029  06A8  2EAA               	goto	u140
  1030  06A9                     u141:
  1031  06A9  2EAC               	goto	l57
  1032  06AA                     u140:
  1033  06AA                     l728:
  1034                           
  1035                           ;main.c: 61:     {;main.c: 62:         CREN = 0;
  1036  06AA  1218               	bcf	24,4	;volatile
  1037                           
  1038                           ;main.c: 63:         CREN = 1;
  1039  06AB  1618               	bsf	24,4	;volatile
  1040  06AC                     l57:
  1041  06AC  1E8C               	btfss	12,5	;volatile
  1042  06AD  2EAF               	goto	u151
  1043  06AE  2EB0               	goto	u150
  1044  06AF                     u151:
  1045  06AF  2EAC               	goto	l57
  1046  06B0                     u150:
  1047  06B0                     l730:
  1048                           
  1049                           ;main.c: 66:     return RCREG;
  1050  06B0  081A               	movf	26,w	;volatile
  1051  06B1                     l60:
  1052  06B1  0008               	return
  1053  06B2                     __end_of_UART_getChar:
  1054  007E                     btemp	set	126	;btemp
  1055  007E                     wtemp0	set	126
  1056                           
  1057                           	psect	config
  1058                           
  1059                           ;Config register CONFIG1 @ 0x2007
  1060                           ;	Oscillator Selection bits
  1061                           ;	FOSC = EXTRC_CLKOUT, RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/
      +                          OSC1/CLKIN
  1062                           ;	Watchdog Timer Enable bit
  1063                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1064                           ;	Power-up Timer Enable bit
  1065                           ;	PWRTE = OFF, PWRT disabled
  1066                           ;	RE3/MCLR pin function select bit
  1067                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  1068                           ;	Code Protection bit
  1069                           ;	CP = OFF, Program memory code protection is disabled
  1070                           ;	Data Code Protection bit
  1071                           ;	CPD = OFF, Data memory code protection is disabled
  1072                           ;	Brown Out Reset Selection bits
  1073                           ;	BOREN = OFF, BOR disabled
  1074                           ;	Internal External Switchover bit
  1075                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1076                           ;	Fail-Safe Clock Monitor Enabled bit
  1077                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1078                           ;	Low Voltage Programming Enable bit
  1079                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1080                           ;	In-Circuit Debugger Mode bit
  1081                           ;	DEBUG = 0x1, unprogrammed default
  1082  2007                     	org	8199
  1083  2007  20F7               	dw	8439
  1084                           
  1085                           ;Config register CONFIG2 @ 0x2008
  1086                           ;	Brown-out Reset Selection bit
  1087                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1088                           ;	Flash Program Memory Self Write Enable bits
  1089                           ;	WRT = OFF, Write protection off
  1090  2008                     	org	8200
  1091  2008  3FFF               	dw	16383

Data Sizes:
    Strings     17
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     13      13
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    UART_sendString@str	PTR unsigned char  size(1) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_UART_init
    _UART_sendString->_UART_sendChar
    _UART_init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_init
    _UART_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     676
                                             10 BANK0      3     3      0
                       _UART_getChar
                          _UART_init
                    _UART_sendString
 ---------------------------------------------------------------------------------
 (1) _UART_sendString                                      2     2      0     126
                                              1 COMMON     2     2      0
                      _UART_sendChar
 ---------------------------------------------------------------------------------
 (2) _UART_sendChar                                        1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            8     4      4     550
                                              9 COMMON     4     4      0
                                              6 BANK0      4     0      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _UART_getChar                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_getChar
   _UART_init
     ___aldiv
   _UART_sendString
     _UART_sendChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      D       D       5       16.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sun May 09 22:40:32 2021

                       pc 0002                        l41 0714                        l60 06B1  
                      l44 069B                        l53 06D0                        l47 06A3  
                      l57 06AC                        u10 06A1                        u11 06A0  
                      fsr 0004                       l221 0773                       l231 07FB  
                     l800 070D                       l730 06B0                       l802 0710  
                     l810 06C4                       l804 06B3                       l820 0734  
                     l812 0715                       l726 06A4                       l662 069B  
                     l806 06B4                       l822 073A                       l814 0724  
                     l728 06AA                       l760 0782                       l752 075F  
                     l664 06A1                       l808 06C0                       l824 0744  
                     l816 0727                       l770 07A6                       l762 0786  
                     l754 0762                       l826 0747                       l818 0731  
                     l780 07D4                       l772 07AA                       l764 078E  
                     l756 0766                       l828 074D                       l782 07DD  
                     l774 07B3                       l766 0796                       l758 0777  
                     l776 07C5                       l768 0799                       l784 07E3  
                     l792 06D1                       l786 07E8                       l778 07D3  
                     l794 06DA                       l788 07F3                       l796 0707  
                     l798 070A                       _RD4 0044                       u200 0796  
                     u201 0795                       u140 06AA                       u220 07AA  
                     u300 0731                       u141 06A9                       u221 07A9  
                     u301 0730                       u150 06B0                       u310 0744  
                     u151 06AF                       u215 079B                       u311 0743  
                     u240 07C5                       u241 07C4                       u235 07AC  
                     u260 07E3                       u180 0766                       u261 07E2  
                     u245 07C1                       u181 0765                       u270 07E8  
                     u190 0777                       u271 07E7                       u255 07D5  
                     u191 0776                       u327 0755                       u280 06EA  
                     u290 06D0                       u291 06CF                       u285 06E5  
                     _RX9 00C6                       _TX9 04C6                       fsr0 0004  
                    STR_1 0012                      STR_2 0009                      _BRGH 04C2  
                    _CREN 00C4                      _RCIF 0065                      _OERR 00C1  
                    _SPEN 00C7                      _TXEN 04C5                      _TXIF 0064  
                    _SYNC 04C4                      _main 0715                      btemp 007E  
                    start 0000           __end_of___aldiv 07FC                     ?_main 0070  
                   _BRG16 0C3B                     _RCREG 001A                     _SPBRG 0099  
                   _TXREG 0019        __size_of_UART_init 0044                     pclath 000A  
                   status 0003                     wtemp0 007E           _UART_sendString 06B2  
         __initialization 07FC              __end_of_main 075F                    ??_main 002A  
                  _TRISC6 043E                    _TRISD4 0444                    _TRISC7 043F  
               ??___aldiv 0078         __end_of_UART_init 0715   __end_of_UART_sendString 06D1  
       UART_sendChar@data 0070   __end_of__initialization 07FC            __pcstackCOMMON 0070  
   __end_of_UART_sendChar 06A4                __pmaintext 0715                __stringtab 0003  
        ?_UART_sendString 0070                   ___aldiv 075F             ?_UART_getChar 0070  
                 __ptext1 06B2                   __ptext2 069A                   __ptext3 06D1  
                 __ptext4 075F                   __ptext5 06A4          ___aldiv@dividend 0074  
    end_of_initialization 07FC          ___aldiv@quotient 0022            ??_UART_getChar 0070  
               _UART_init 06D1                ?_UART_init 0026       start_initialization 07FC  
               ___latbits 0002             __pcstackBANK0 0020      __end_of_UART_getChar 06B2  
                ?___aldiv 0070    __size_of_UART_sendChar 000A                 __pstrings 0003  
             ??_UART_init 0079           ___aldiv@divisor 0070           ___aldiv@counter 0020  
      UART_sendString@str 0072  __size_of_UART_sendString 001F               __stringbase 0008  
           _UART_sendChar 069A             UART_init@baud 0026          __size_of___aldiv 009D  
      __end_of__stringtab 0009     __size_of_UART_getChar 000E            ?_UART_sendChar 0070  
           __size_of_main 004A              _UART_getChar 06A4         ??_UART_sendString 0071  
               stringcode 0003                  stringdir 0003                  stringtab 0003  
            ___aldiv@sign 0021           ??_UART_sendChar 0070  
