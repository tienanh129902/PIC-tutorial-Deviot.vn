

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Jul 13 22:58:39 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 2.20
    30                           ; Generated 12/02/2020 GMT
    31                           ; 
    32                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F887 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0088                     	;# 
   103  0089                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  008F                     	;# 
   108  0090                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0093                     	;# 
   113  0093                     	;# 
   114  0094                     	;# 
   115  0095                     	;# 
   116  0096                     	;# 
   117  0097                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126  0105                     	;# 
   127  0107                     	;# 
   128  0108                     	;# 
   129  0109                     	;# 
   130  010C                     	;# 
   131  010C                     	;# 
   132  010D                     	;# 
   133  010E                     	;# 
   134  010F                     	;# 
   135  0185                     	;# 
   136  0187                     	;# 
   137  0188                     	;# 
   138  0189                     	;# 
   139  018C                     	;# 
   140  018D                     	;# 
   141  0000                     	;# 
   142  0001                     	;# 
   143  0002                     	;# 
   144  0003                     	;# 
   145  0004                     	;# 
   146  0005                     	;# 
   147  0006                     	;# 
   148  0007                     	;# 
   149  0008                     	;# 
   150  0009                     	;# 
   151  000A                     	;# 
   152  000B                     	;# 
   153  000C                     	;# 
   154  000D                     	;# 
   155  000E                     	;# 
   156  000E                     	;# 
   157  000F                     	;# 
   158  0010                     	;# 
   159  0011                     	;# 
   160  0012                     	;# 
   161  0013                     	;# 
   162  0014                     	;# 
   163  0015                     	;# 
   164  0015                     	;# 
   165  0016                     	;# 
   166  0017                     	;# 
   167  0018                     	;# 
   168  0019                     	;# 
   169  001A                     	;# 
   170  001B                     	;# 
   171  001B                     	;# 
   172  001C                     	;# 
   173  001D                     	;# 
   174  001E                     	;# 
   175  001F                     	;# 
   176  0081                     	;# 
   177  0085                     	;# 
   178  0086                     	;# 
   179  0087                     	;# 
   180  0088                     	;# 
   181  0089                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  008F                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0093                     	;# 
   190  0093                     	;# 
   191  0093                     	;# 
   192  0094                     	;# 
   193  0095                     	;# 
   194  0096                     	;# 
   195  0097                     	;# 
   196  0098                     	;# 
   197  0099                     	;# 
   198  009A                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  0105                     	;# 
   205  0107                     	;# 
   206  0108                     	;# 
   207  0109                     	;# 
   208  010C                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  0185                     	;# 
   214  0187                     	;# 
   215  0188                     	;# 
   216  0189                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  0000                     	;# 
   220  0001                     	;# 
   221  0002                     	;# 
   222  0003                     	;# 
   223  0004                     	;# 
   224  0005                     	;# 
   225  0006                     	;# 
   226  0007                     	;# 
   227  0008                     	;# 
   228  0009                     	;# 
   229  000A                     	;# 
   230  000B                     	;# 
   231  000C                     	;# 
   232  000D                     	;# 
   233  000E                     	;# 
   234  000E                     	;# 
   235  000F                     	;# 
   236  0010                     	;# 
   237  0011                     	;# 
   238  0012                     	;# 
   239  0013                     	;# 
   240  0014                     	;# 
   241  0015                     	;# 
   242  0015                     	;# 
   243  0016                     	;# 
   244  0017                     	;# 
   245  0018                     	;# 
   246  0019                     	;# 
   247  001A                     	;# 
   248  001B                     	;# 
   249  001B                     	;# 
   250  001C                     	;# 
   251  001D                     	;# 
   252  001E                     	;# 
   253  001F                     	;# 
   254  0081                     	;# 
   255  0085                     	;# 
   256  0086                     	;# 
   257  0087                     	;# 
   258  0088                     	;# 
   259  0089                     	;# 
   260  008C                     	;# 
   261  008D                     	;# 
   262  008E                     	;# 
   263  008F                     	;# 
   264  0090                     	;# 
   265  0091                     	;# 
   266  0092                     	;# 
   267  0093                     	;# 
   268  0093                     	;# 
   269  0093                     	;# 
   270  0094                     	;# 
   271  0095                     	;# 
   272  0096                     	;# 
   273  0097                     	;# 
   274  0098                     	;# 
   275  0099                     	;# 
   276  009A                     	;# 
   277  009B                     	;# 
   278  009C                     	;# 
   279  009D                     	;# 
   280  009E                     	;# 
   281  009F                     	;# 
   282  0105                     	;# 
   283  0107                     	;# 
   284  0108                     	;# 
   285  0109                     	;# 
   286  010C                     	;# 
   287  010C                     	;# 
   288  010D                     	;# 
   289  010E                     	;# 
   290  010F                     	;# 
   291  0185                     	;# 
   292  0187                     	;# 
   293  0188                     	;# 
   294  0189                     	;# 
   295  018C                     	;# 
   296  018D                     	;# 
   297                           
   298                           	psect	nvCOMMON
   299  007C                     __pnvCOMMON:
   300  007C                     _I2C_add:
   301  007C                     	ds	1
   302  0013                     _SSPBUF	set	19
   303  0014                     _SSPCON	set	20
   304  005E                     _PEIE	set	94
   305  005F                     _GIE	set	95
   306  0063                     _SSPIF	set	99
   307  0093                     _SSPADD	set	147
   308  0091                     _SSPCON2	set	145
   309  0094                     _SSPSTAT	set	148
   310  0463                     _SSPIE	set	1123
   311  048E                     _ACKSTAT	set	1166
   312  048B                     _RCEN	set	1163
   313  048C                     _ACKEN	set	1164
   314  048D                     _ACKDT	set	1165
   315  048A                     _PEN	set	1162
   316  0488                     _SEN	set	1160
   317  043C                     _TRISC4	set	1084
   318  043B                     _TRISC3	set	1083
   319  0445                     _TRISD5	set	1093
   320                           
   321                           	psect	strings
   322  0003                     __pstrings:
   323  0003                     stringtab:
   324  0003                     __stringtab:
   325  0003                     stringcode:	
   326                           ;	String table - string pointers are 1 byte each
   327                           
   328  0003                     stringdir:
   329  0003  3000               	movlw	high stringdir
   330  0004  008A               	movwf	10
   331  0005  0804               	movf	4,w
   332  0006  0A84               	incf	4,f
   333  0007  0782               	addwf	2,f
   334  0008                     __stringbase:
   335  0008  3400               	retlw	0
   336  0009                     __end_of__stringtab:
   337  0009                     STR_2:
   338  0009  3444               	retlw	68	;'D'
   339  000A  3465               	retlw	101	;'e'
   340  000B  3476               	retlw	118	;'v'
   341  000C  3469               	retlw	105	;'i'
   342  000D  346F               	retlw	111	;'o'
   343  000E  3474               	retlw	116	;'t'
   344  000F  3421               	retlw	33	;'!'
   345  0010  3400               	retlw	0
   346  0011                     STR_1:
   347  0011  3448               	retlw	72	;'H'
   348  0012  3465               	retlw	101	;'e'
   349  0013  346C               	retlw	108	;'l'
   350  0014  346C               	retlw	108	;'l'
   351  0015  346F               	retlw	111	;'o'
   352  0016  3400               	retlw	0
   353                           
   354                           	psect	cinit
   355  07F2                     start_initialization:	
   356                           ; #config settings
   357                           
   358  07F2                     __initialization:
   359                           
   360                           ; Clear objects allocated to COMMON
   361  07F2  01FD               	clrf	__pbssCOMMON& (0+127)
   362                           
   363                           ; Clear objects allocated to BANK0
   364  07F3  1383               	bcf	3,7	;select IRP bank0
   365  07F4  3020               	movlw	low __pbssBANK0
   366  07F5  0084               	movwf	4
   367  07F6  3030               	movlw	low (__pbssBANK0+16)
   368  07F7  120A  118A  2565  120A  118A  	fcall	clear_ram0
   369  07FC                     end_of_initialization:	
   370                           ;End of C runtime variable initialization code
   371                           
   372  07FC                     __end_of__initialization:
   373  07FC  0183               	clrf	3
   374  07FD  120A  118A  2E89   	ljmp	_main	;jump to C main() function
   375                           
   376                           	psect	bssCOMMON
   377  007D                     __pbssCOMMON:
   378  007D                     _RS:
   379  007D                     	ds	1
   380                           
   381                           	psect	bssBANK0
   382  0020                     __pbssBANK0:
   383  0020                     _buffer:
   384  0020                     	ds	16
   385                           
   386                           	psect	clrtext
   387  0565                     clear_ram0:	
   388                           ;	Called with FSR containing the base address, and
   389                           ;	W with the last address+1
   390                           
   391  0565  0064               	clrwdt	;clear the watchdog before getting into this loop
   392  0566                     clrloop0:
   393  0566  0180               	clrf	0	;clear RAM location pointed to by FSR
   394  0567  0A84               	incf	4,f	;increment pointer
   395  0568  0604               	xorwf	4,w	;XOR with final address
   396  0569  1903               	btfsc	3,2	;have we reached the end yet?
   397  056A  3400               	retlw	0	;all done for this memory range, return
   398  056B  0604               	xorwf	4,w	;XOR again to restore value
   399  056C  2D66               	goto	clrloop0	;do the next byte
   400                           
   401                           	psect	cstackCOMMON
   402  0070                     __pcstackCOMMON:
   403  0070                     ?_LCD_Init:
   404  0070                     ?_LCD_puts:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0070                     ?_IO_expanderWrite:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0070                     ?_LCD_com:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     ?_main:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?_I2C_Master_Wait:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ??_I2C_Master_Wait:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_I2C_Master_Start:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ??_I2C_Master_Start:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_I2C_Master_Stop:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ??_I2C_Master_Stop:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_I2C_Master_Write:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ??_I2C_Master_Write:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_LCD_writeNibble:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_LCD_putChar:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?___aldiv:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     I2C_Master_Write@data:	
   450                           ; 4 bytes @ 0x0
   451                           
   452  0070                     ___aldiv@divisor:	
   453                           ; 1 bytes @ 0x0
   454                           
   455                           
   456                           ; 4 bytes @ 0x0
   457  0070                     	ds	1
   458  0071                     ??_IO_expanderWrite:
   459  0071                     IO_expanderWrite@data:	
   460                           ; 1 bytes @ 0x1
   461                           
   462                           
   463                           ; 1 bytes @ 0x1
   464  0071                     	ds	1
   465  0072                     ??_LCD_writeNibble:
   466                           
   467                           ; 1 bytes @ 0x2
   468  0072                     	ds	1
   469  0073                     LCD_writeNibble@nibble:
   470                           
   471                           ; 1 bytes @ 0x3
   472  0073                     	ds	1
   473  0074                     ??_LCD_com:
   474  0074                     ??_LCD_putChar:	
   475                           ; 1 bytes @ 0x4
   476                           
   477  0074                     ___aldiv@dividend:	
   478                           ; 1 bytes @ 0x4
   479                           
   480                           
   481                           ; 4 bytes @ 0x4
   482  0074                     	ds	1
   483  0075                     LCD_com@com:
   484  0075                     LCD_putChar@data:	
   485                           ; 1 bytes @ 0x5
   486                           
   487                           
   488                           ; 1 bytes @ 0x5
   489  0075                     	ds	1
   490  0076                     ??_LCD_Init:
   491  0076                     ?_LCD_setCursor:	
   492                           ; 1 bytes @ 0x6
   493                           
   494  0076                     ??_LCD_puts:	
   495                           ; 1 bytes @ 0x6
   496                           
   497  0076                     LCD_setCursor@col:	
   498                           ; 1 bytes @ 0x6
   499                           
   500                           
   501                           ; 1 bytes @ 0x6
   502  0076                     	ds	1
   503  0077                     ??_LCD_setCursor:
   504  0077                     LCD_puts@str:	
   505                           ; 1 bytes @ 0x7
   506                           
   507                           
   508                           ; 1 bytes @ 0x7
   509  0077                     	ds	1
   510  0078                     ??___aldiv:
   511  0078                     LCD_Init@address:	
   512                           ; 1 bytes @ 0x8
   513                           
   514                           
   515                           ; 1 bytes @ 0x8
   516  0078                     	ds	1
   517  0079                     ??_I2C_Master_Init:
   518  0079                     LCD_setCursor@row:	
   519                           ; 1 bytes @ 0x9
   520                           
   521                           
   522                           ; 1 bytes @ 0x9
   523  0079                     	ds	1
   524  007A                     ??_main:
   525                           
   526                           ; 1 bytes @ 0xA
   527  007A                     	ds	2
   528                           
   529                           	psect	cstackBANK0
   530  0030                     __pcstackBANK0:
   531  0030                     ___aldiv@counter:
   532                           
   533                           ; 1 bytes @ 0x0
   534  0030                     	ds	1
   535  0031                     ___aldiv@sign:
   536                           
   537                           ; 1 bytes @ 0x1
   538  0031                     	ds	1
   539  0032                     ___aldiv@quotient:
   540                           
   541                           ; 4 bytes @ 0x2
   542  0032                     	ds	4
   543  0036                     ?_I2C_Master_Init:
   544  0036                     I2C_Master_Init@baud:	
   545                           ; 1 bytes @ 0x6
   546                           
   547                           
   548                           ; 4 bytes @ 0x6
   549  0036                     	ds	4
   550                           
   551                           	psect	maintext
   552  0689                     __pmaintext:	
   553 ;;
   554 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   555 ;;
   556 ;; *************** function _main *****************
   557 ;; Defined at:
   558 ;;		line 32 in file "main.c"
   559 ;; Parameters:    Size  Location     Type
   560 ;;		None
   561 ;; Auto vars:     Size  Location     Type
   562 ;;		None
   563 ;; Return value:  Size  Location     Type
   564 ;;                  1    wreg      void 
   565 ;; Registers used:
   566 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   567 ;; Tracked objects:
   568 ;;		On entry : B00/0
   569 ;;		On exit  : 0/0
   570 ;;		Unchanged: 0/0
   571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   572 ;;      Params:         0       0       0       0       0
   573 ;;      Locals:         0       0       0       0       0
   574 ;;      Temps:          2       0       0       0       0
   575 ;;      Totals:         2       0       0       0       0
   576 ;;Total ram usage:        2 bytes
   577 ;; Hardware stack levels required when called:    6
   578 ;; This function calls:
   579 ;;		_I2C_Master_Init
   580 ;;		_LCD_Init
   581 ;;		_LCD_puts
   582 ;;		_LCD_setCursor
   583 ;; This function is called by:
   584 ;;		Startup code after reset
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           
   589                           ;psect for function _main
   590  0689                     _main:
   591  0689                     l1000:	
   592                           ;incstack = 0
   593                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   594                           
   595                           
   596                           ;main.c: 33:     TRISD5 = 1;
   597  0689  1683               	bsf	3,5	;RP0=1, select bank1
   598  068A  1303               	bcf	3,6	;RP1=0, select bank1
   599  068B  1688               	bsf	8,5	;volatile
   600  068C                     l1002:
   601                           
   602                           ;main.c: 34:     I2C_Master_Init(100000);
   603  068C  3000               	movlw	0
   604  068D  1283               	bcf	3,5	;RP0=0, select bank0
   605  068E  1303               	bcf	3,6	;RP1=0, select bank0
   606  068F  00B9               	movwf	I2C_Master_Init@baud+3
   607  0690  3001               	movlw	1
   608  0691  00B8               	movwf	I2C_Master_Init@baud+2
   609  0692  3086               	movlw	134
   610  0693  00B7               	movwf	I2C_Master_Init@baud+1
   611  0694  30A0               	movlw	160
   612  0695  00B6               	movwf	I2C_Master_Init@baud
   613  0696  120A  118A  2621  120A  118A  	fcall	_I2C_Master_Init
   614                           
   615                           ;main.c: 35:     LCD_Init(0x4E);
   616  069B  304E               	movlw	78
   617  069C  120A  118A  26C9  120A  118A  	fcall	_LCD_Init
   618  06A1                     l1004:
   619                           
   620                           ;main.c: 36:     _delay((unsigned long)((15)*(8000000/4000.0)));
   621  06A1  3027               	movlw	39
   622  06A2  00FB               	movwf	??_main+1
   623  06A3  30F5               	movlw	245
   624  06A4  00FA               	movwf	??_main
   625  06A5                     u357:
   626  06A5  0BFA               	decfsz	??_main,f
   627  06A6  2EA5               	goto	u357
   628  06A7  0BFB               	decfsz	??_main+1,f
   629  06A8  2EA5               	goto	u357
   630  06A9                     l1006:
   631                           
   632                           ;main.c: 38:         LCD_setCursor(1,1);
   633  06A9  01F6               	clrf	LCD_setCursor@col
   634  06AA  0AF6               	incf	LCD_setCursor@col,f
   635  06AB  3001               	movlw	1
   636  06AC  120A  118A  2653  120A  118A  	fcall	_LCD_setCursor
   637  06B1                     l1008:
   638                           
   639                           ;main.c: 39:         LCD_puts("Hello");
   640  06B1  3009               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   641  06B2  120A  118A  2602  120A  118A  	fcall	_LCD_puts
   642  06B7                     l1010:
   643                           
   644                           ;main.c: 40:         LCD_setCursor(2,1);
   645  06B7  01F6               	clrf	LCD_setCursor@col
   646  06B8  0AF6               	incf	LCD_setCursor@col,f
   647  06B9  3002               	movlw	2
   648  06BA  120A  118A  2653  120A  118A  	fcall	_LCD_setCursor
   649  06BF                     l1012:
   650                           
   651                           ;main.c: 41:         LCD_puts("Deviot!");
   652  06BF  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   653  06C0  120A  118A  2602  120A  118A  	fcall	_LCD_puts
   654  06C5  2EA9               	goto	l1006
   655  06C6  120A  118A  2800   	ljmp	start
   656  06C9                     __end_of_main:
   657                           
   658                           	psect	text1
   659  0653                     __ptext1:	
   660 ;; *************** function _LCD_setCursor *****************
   661 ;; Defined at:
   662 ;;		line 110 in file "I2C_LCD.c"
   663 ;; Parameters:    Size  Location     Type
   664 ;;  row             1    wreg     unsigned char 
   665 ;;  col             1    6[COMMON] unsigned char 
   666 ;; Auto vars:     Size  Location     Type
   667 ;;  row             1    9[COMMON] unsigned char 
   668 ;; Return value:  Size  Location     Type
   669 ;;                  1    wreg      void 
   670 ;; Registers used:
   671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   672 ;; Tracked objects:
   673 ;;		On entry : 0/0
   674 ;;		On exit  : 0/0
   675 ;;		Unchanged: 0/0
   676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   677 ;;      Params:         1       0       0       0       0
   678 ;;      Locals:         1       0       0       0       0
   679 ;;      Temps:          2       0       0       0       0
   680 ;;      Totals:         4       0       0       0       0
   681 ;;Total ram usage:        4 bytes
   682 ;; Hardware stack levels used:    1
   683 ;; Hardware stack levels required when called:    5
   684 ;; This function calls:
   685 ;;		_LCD_com
   686 ;; This function is called by:
   687 ;;		_main
   688 ;; This function uses a non-reentrant model
   689 ;;
   690                           
   691                           
   692                           ;psect for function _LCD_setCursor
   693  0653                     _LCD_setCursor:
   694                           
   695                           ;incstack = 0
   696                           ; Regs used in _LCD_setCursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   697                           ;LCD_setCursor@row stored from wreg
   698  0653  00F9               	movwf	LCD_setCursor@row
   699  0654                     l976:
   700                           
   701                           ;I2C_LCD.c: 111:     switch (row) {
   702  0654  2E75               	goto	l986
   703  0655                     l978:
   704                           
   705                           ;I2C_LCD.c: 113:             LCD_com(0xC0 + col - 1);
   706  0655  0876               	movf	LCD_setCursor@col,w
   707  0656  3EBF               	addlw	191
   708  0657  120A  118A  25CD  120A  118A  	fcall	_LCD_com
   709                           
   710                           ;I2C_LCD.c: 114:             break;
   711  065C  2E88               	goto	l120
   712  065D                     l980:
   713                           
   714                           ;I2C_LCD.c: 116:             LCD_com(0x94 + col - 1);
   715  065D  0876               	movf	LCD_setCursor@col,w
   716  065E  3E93               	addlw	147
   717  065F  120A  118A  25CD  120A  118A  	fcall	_LCD_com
   718                           
   719                           ;I2C_LCD.c: 117:             break;
   720  0664  2E88               	goto	l120
   721  0665                     l982:
   722                           
   723                           ;I2C_LCD.c: 119:             LCD_com(0xD4 + col - 1);
   724  0665  0876               	movf	LCD_setCursor@col,w
   725  0666  3ED3               	addlw	211
   726  0667  120A  118A  25CD  120A  118A  	fcall	_LCD_com
   727                           
   728                           ;I2C_LCD.c: 120:             break;
   729  066C  2E88               	goto	l120
   730  066D                     l984:
   731                           
   732                           ;I2C_LCD.c: 122:             LCD_com(0x80 + col - 1);
   733  066D  0876               	movf	LCD_setCursor@col,w
   734  066E  3E7F               	addlw	127
   735  066F  120A  118A  25CD  120A  118A  	fcall	_LCD_com
   736                           
   737                           ;I2C_LCD.c: 123:     }
   738  0674  2E88               	goto	l120
   739  0675                     l986:
   740  0675  0879               	movf	LCD_setCursor@row,w
   741  0676  00F7               	movwf	??_LCD_setCursor
   742  0677  01F8               	clrf	??_LCD_setCursor+1
   743                           
   744                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   745                           ; Switch size 1, requested type "simple"
   746                           ; Number of cases is 1, Range of values is 0 to 0
   747                           ; switch strategies available:
   748                           ; Name         Instructions Cycles
   749                           ; simple_byte            4     3 (average)
   750                           ; direct_byte           11     8 (fixed)
   751                           ; jumptable            260     6 (fixed)
   752                           ;	Chosen strategy is simple_byte
   753  0678  0878               	movf	??_LCD_setCursor+1,w
   754  0679  3A00               	xorlw	0	; case 0
   755  067A  1903               	skipnz
   756  067B  2E7D               	goto	l1034
   757  067C  2E6D               	goto	l984
   758  067D                     l1034:
   759                           
   760                           ; Switch size 1, requested type "simple"
   761                           ; Number of cases is 3, Range of values is 2 to 4
   762                           ; switch strategies available:
   763                           ; Name         Instructions Cycles
   764                           ; simple_byte           10     6 (average)
   765                           ; direct_byte           20    11 (fixed)
   766                           ; jumptable            263     9 (fixed)
   767                           ;	Chosen strategy is simple_byte
   768  067D  0877               	movf	??_LCD_setCursor,w
   769  067E  3A02               	xorlw	2	; case 2
   770  067F  1903               	skipnz
   771  0680  2E55               	goto	l978
   772  0681  3A01               	xorlw	1	; case 3
   773  0682  1903               	skipnz
   774  0683  2E5D               	goto	l980
   775  0684  3A07               	xorlw	7	; case 4
   776  0685  1903               	skipnz
   777  0686  2E65               	goto	l982
   778  0687  2E6D               	goto	l984
   779  0688                     l120:
   780  0688  0008               	return
   781  0689                     __end_of_LCD_setCursor:
   782                           
   783                           	psect	text2
   784  0602                     __ptext2:	
   785 ;; *************** function _LCD_puts *****************
   786 ;; Defined at:
   787 ;;		line 132 in file "I2C_LCD.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  str             1    wreg     PTR unsigned char 
   790 ;;		 -> STR_2(8), STR_1(6), 
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  str             1    7[COMMON] PTR unsigned char 
   793 ;;		 -> STR_2(8), STR_1(6), 
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      void 
   796 ;; Registers used:
   797 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   803 ;;      Params:         0       0       0       0       0
   804 ;;      Locals:         1       0       0       0       0
   805 ;;      Temps:          1       0       0       0       0
   806 ;;      Totals:         2       0       0       0       0
   807 ;;Total ram usage:        2 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; Hardware stack levels required when called:    5
   810 ;; This function calls:
   811 ;;		_LCD_putChar
   812 ;; This function is called by:
   813 ;;		_main
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           
   818                           ;psect for function _LCD_puts
   819  0602                     _LCD_puts:
   820                           
   821                           ;incstack = 0
   822                           ; Regs used in _LCD_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   823                           ;LCD_puts@str stored from wreg
   824  0602  00F7               	movwf	LCD_puts@str
   825  0603                     l992:
   826                           
   827                           ;I2C_LCD.c: 133:     while (*str) {
   828  0603  2E14               	goto	l998
   829  0604                     l994:
   830                           
   831                           ;I2C_LCD.c: 134:         LCD_putChar(*str++);
   832  0604  0877               	movf	LCD_puts@str,w
   833  0605  0084               	movwf	4
   834  0606  120A  118A  2003  120A  118A  	fcall	stringdir
   835  060B  120A  118A  25E7  120A  118A  	fcall	_LCD_putChar
   836  0610                     l996:
   837  0610  3001               	movlw	1
   838  0611  00F6               	movwf	??_LCD_puts
   839  0612  0876               	movf	??_LCD_puts,w
   840  0613  07F7               	addwf	LCD_puts@str,f
   841  0614                     l998:
   842                           
   843                           ;I2C_LCD.c: 133:     while (*str) {
   844  0614  0877               	movf	LCD_puts@str,w
   845  0615  0084               	movwf	4
   846  0616  120A  118A  2003  120A  118A  	fcall	stringdir
   847  061B  3A00               	xorlw	0
   848  061C  1D03               	skipz
   849  061D  2E1F               	goto	u341
   850  061E  2E20               	goto	u340
   851  061F                     u341:
   852  061F  2E04               	goto	l994
   853  0620                     u340:
   854  0620                     l129:
   855  0620  0008               	return
   856  0621                     __end_of_LCD_puts:
   857                           
   858                           	psect	text3
   859  05E7                     __ptext3:	
   860 ;; *************** function _LCD_putChar *****************
   861 ;; Defined at:
   862 ;;		line 126 in file "I2C_LCD.c"
   863 ;; Parameters:    Size  Location     Type
   864 ;;  data            1    wreg     unsigned char 
   865 ;; Auto vars:     Size  Location     Type
   866 ;;  data            1    5[COMMON] unsigned char 
   867 ;; Return value:  Size  Location     Type
   868 ;;                  1    wreg      void 
   869 ;; Registers used:
   870 ;;		wreg, status,2, status,0, pclath, cstack
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   876 ;;      Params:         0       0       0       0       0
   877 ;;      Locals:         1       0       0       0       0
   878 ;;      Temps:          1       0       0       0       0
   879 ;;      Totals:         2       0       0       0       0
   880 ;;Total ram usage:        2 bytes
   881 ;; Hardware stack levels used:    1
   882 ;; Hardware stack levels required when called:    4
   883 ;; This function calls:
   884 ;;		_LCD_writeNibble
   885 ;; This function is called by:
   886 ;;		_LCD_puts
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           
   891                           ;psect for function _LCD_putChar
   892  05E7                     _LCD_putChar:
   893                           
   894                           ;incstack = 0
   895                           ; Regs used in _LCD_putChar: [wreg+status,2+status,0+pclath+cstack]
   896                           ;LCD_putChar@data stored from wreg
   897  05E7  00F5               	movwf	LCD_putChar@data
   898  05E8                     l754:
   899                           
   900                           ;I2C_LCD.c: 127:     RS = 1;
   901  05E8  01FD               	clrf	_RS
   902  05E9  0AFD               	incf	_RS,f
   903  05EA                     l756:
   904                           
   905                           ;I2C_LCD.c: 128:     LCD_writeNibble(data & 0xF0);
   906  05EA  0875               	movf	LCD_putChar@data,w
   907  05EB  39F0               	andlw	240
   908  05EC  120A  118A  259C  120A  118A  	fcall	_LCD_writeNibble
   909                           
   910                           ;I2C_LCD.c: 129:     LCD_writeNibble((data << 4) & 0xF0);
   911  05F1  0875               	movf	LCD_putChar@data,w
   912  05F2  00F4               	movwf	??_LCD_putChar
   913  05F3  3003               	movlw	3
   914  05F4                     u55:
   915  05F4  1003               	clrc
   916  05F5  0DF4               	rlf	??_LCD_putChar,f
   917  05F6  3EFF               	addlw	-1
   918  05F7  1D03               	skipz
   919  05F8  2DF4               	goto	u55
   920  05F9  1003               	clrc
   921  05FA  0D74               	rlf	??_LCD_putChar,w
   922  05FB  39F0               	andlw	240
   923  05FC  120A  118A  259C  120A  118A  	fcall	_LCD_writeNibble
   924  0601                     l123:
   925  0601  0008               	return
   926  0602                     __end_of_LCD_putChar:
   927                           
   928                           	psect	text4
   929  06C9                     __ptext4:	
   930 ;; *************** function _LCD_Init *****************
   931 ;; Defined at:
   932 ;;		line 75 in file "I2C_LCD.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;  address         1    wreg     unsigned char 
   935 ;; Auto vars:     Size  Location     Type
   936 ;;  address         1    8[COMMON] unsigned char 
   937 ;; Return value:  Size  Location     Type
   938 ;;                  1    wreg      void 
   939 ;; Registers used:
   940 ;;		wreg, status,2, status,0, pclath, cstack
   941 ;; Tracked objects:
   942 ;;		On entry : 0/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   946 ;;      Params:         0       0       0       0       0
   947 ;;      Locals:         1       0       0       0       0
   948 ;;      Temps:          2       0       0       0       0
   949 ;;      Totals:         3       0       0       0       0
   950 ;;Total ram usage:        3 bytes
   951 ;; Hardware stack levels used:    1
   952 ;; Hardware stack levels required when called:    5
   953 ;; This function calls:
   954 ;;		_IO_expanderWrite
   955 ;;		_LCD_com
   956 ;; This function is called by:
   957 ;;		_main
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           
   962                           ;psect for function _LCD_Init
   963  06C9                     _LCD_Init:
   964                           
   965                           ;incstack = 0
   966                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
   967                           ;LCD_Init@address stored from wreg
   968  06C9  00F8               	movwf	LCD_Init@address
   969  06CA                     l808:
   970                           
   971                           ;I2C_LCD.c: 76:     I2C_add = address;
   972  06CA  0878               	movf	LCD_Init@address,w
   973  06CB  00F6               	movwf	??_LCD_Init
   974  06CC  0876               	movf	??_LCD_Init,w
   975  06CD  00FC               	movwf	_I2C_add
   976  06CE                     l810:
   977                           
   978                           ;I2C_LCD.c: 77:     IO_expanderWrite(0);
   979  06CE  3000               	movlw	0
   980  06CF  120A  118A  25B4  120A  118A  	fcall	_IO_expanderWrite
   981  06D4                     l812:
   982                           
   983                           ;I2C_LCD.c: 78:     _delay((unsigned long)((30)*(8000000/4000.0)));
   984  06D4  304E               	movlw	78
   985  06D5  00F7               	movwf	??_LCD_Init+1
   986  06D6  30EB               	movlw	235
   987  06D7  00F6               	movwf	??_LCD_Init
   988  06D8                     u367:
   989  06D8  0BF6               	decfsz	??_LCD_Init,f
   990  06D9  2ED8               	goto	u367
   991  06DA  0BF7               	decfsz	??_LCD_Init+1,f
   992  06DB  2ED8               	goto	u367
   993                           
   994                           ;I2C_LCD.c: 79:     LCD_com(0x30);
   995  06DC  3030               	movlw	48
   996  06DD  120A  118A  25CD  120A  118A  	fcall	_LCD_com
   997  06E2                     l814:
   998                           
   999                           ;I2C_LCD.c: 80:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1000  06E2  300D               	movlw	13
  1001  06E3  00F7               	movwf	??_LCD_Init+1
  1002  06E4  30FB               	movlw	251
  1003  06E5  00F6               	movwf	??_LCD_Init
  1004  06E6                     u377:
  1005  06E6  0BF6               	decfsz	??_LCD_Init,f
  1006  06E7  2EE6               	goto	u377
  1007  06E8  0BF7               	decfsz	??_LCD_Init+1,f
  1008  06E9  2EE6               	goto	u377
  1009  06EA  2EEB               	nop2
  1010  06EB                     l816:
  1011                           
  1012                           ;I2C_LCD.c: 81:     LCD_com(0x30);
  1013  06EB  3030               	movlw	48
  1014  06EC  120A  118A  25CD  120A  118A  	fcall	_LCD_com
  1015                           
  1016                           ;I2C_LCD.c: 82:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1017  06F1  300D               	movlw	13
  1018  06F2  00F7               	movwf	??_LCD_Init+1
  1019  06F3  30FB               	movlw	251
  1020  06F4  00F6               	movwf	??_LCD_Init
  1021  06F5                     u387:
  1022  06F5  0BF6               	decfsz	??_LCD_Init,f
  1023  06F6  2EF5               	goto	u387
  1024  06F7  0BF7               	decfsz	??_LCD_Init+1,f
  1025  06F8  2EF5               	goto	u387
  1026  06F9  2EFA               	nop2
  1027  06FA                     l818:
  1028                           
  1029                           ;I2C_LCD.c: 83:     LCD_com(0x30);
  1030  06FA  3030               	movlw	48
  1031  06FB  120A  118A  25CD  120A  118A  	fcall	_LCD_com
  1032  0700                     l820:
  1033                           
  1034                           ;I2C_LCD.c: 84:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1035  0700  300D               	movlw	13
  1036  0701  00F7               	movwf	??_LCD_Init+1
  1037  0702  30FB               	movlw	251
  1038  0703  00F6               	movwf	??_LCD_Init
  1039  0704                     u397:
  1040  0704  0BF6               	decfsz	??_LCD_Init,f
  1041  0705  2F04               	goto	u397
  1042  0706  0BF7               	decfsz	??_LCD_Init+1,f
  1043  0707  2F04               	goto	u397
  1044  0708  2F09               	nop2
  1045                           
  1046                           ;I2C_LCD.c: 85:     LCD_com(0x02);
  1047  0709  3002               	movlw	2
  1048  070A  120A  118A  25CD  120A  118A  	fcall	_LCD_com
  1049  070F                     l822:
  1050                           
  1051                           ;I2C_LCD.c: 86:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1052  070F  300D               	movlw	13
  1053  0710  00F7               	movwf	??_LCD_Init+1
  1054  0711  30FB               	movlw	251
  1055  0712  00F6               	movwf	??_LCD_Init
  1056  0713                     u407:
  1057  0713  0BF6               	decfsz	??_LCD_Init,f
  1058  0714  2F13               	goto	u407
  1059  0715  0BF7               	decfsz	??_LCD_Init+1,f
  1060  0716  2F13               	goto	u407
  1061  0717  2F18               	nop2
  1062  0718                     l824:
  1063                           
  1064                           ;I2C_LCD.c: 87:     LCD_com(0x20 | 2 << 2);
  1065  0718  3028               	movlw	40
  1066  0719  120A  118A  25CD  120A  118A  	fcall	_LCD_com
  1067                           
  1068                           ;I2C_LCD.c: 88:     _delay((unsigned long)((50)*(8000000/4000.0)));
  1069  071E  3082               	movlw	130
  1070  071F  00F7               	movwf	??_LCD_Init+1
  1071  0720  30DD               	movlw	221
  1072  0721  00F6               	movwf	??_LCD_Init
  1073  0722                     u417:
  1074  0722  0BF6               	decfsz	??_LCD_Init,f
  1075  0723  2F22               	goto	u417
  1076  0724  0BF7               	decfsz	??_LCD_Init+1,f
  1077  0725  2F22               	goto	u417
  1078  0726  2F27               	nop2
  1079  0727                     l826:
  1080                           
  1081                           ;I2C_LCD.c: 89:     LCD_com(0x0C);
  1082  0727  300C               	movlw	12
  1083  0728  120A  118A  25CD  120A  118A  	fcall	_LCD_com
  1084  072D                     l828:
  1085                           
  1086                           ;I2C_LCD.c: 90:     _delay((unsigned long)((50)*(8000000/4000.0)));
  1087  072D  3082               	movlw	130
  1088  072E  00F7               	movwf	??_LCD_Init+1
  1089  072F  30DD               	movlw	221
  1090  0730  00F6               	movwf	??_LCD_Init
  1091  0731                     u427:
  1092  0731  0BF6               	decfsz	??_LCD_Init,f
  1093  0732  2F31               	goto	u427
  1094  0733  0BF7               	decfsz	??_LCD_Init+1,f
  1095  0734  2F31               	goto	u427
  1096  0735  2F36               	nop2
  1097                           
  1098                           ;I2C_LCD.c: 91:     LCD_com(0x01);
  1099  0736  3001               	movlw	1
  1100  0737  120A  118A  25CD  120A  118A  	fcall	_LCD_com
  1101  073C                     l830:
  1102                           
  1103                           ;I2C_LCD.c: 92:     _delay((unsigned long)((50)*(8000000/4000.0)));
  1104  073C  3082               	movlw	130
  1105  073D  00F7               	movwf	??_LCD_Init+1
  1106  073E  30DD               	movlw	221
  1107  073F  00F6               	movwf	??_LCD_Init
  1108  0740                     u437:
  1109  0740  0BF6               	decfsz	??_LCD_Init,f
  1110  0741  2F40               	goto	u437
  1111  0742  0BF7               	decfsz	??_LCD_Init+1,f
  1112  0743  2F40               	goto	u437
  1113  0744  2F45               	nop2
  1114  0745                     l832:
  1115                           
  1116                           ;I2C_LCD.c: 93:     LCD_com(0x04 | 0x02);
  1117  0745  3006               	movlw	6
  1118  0746  120A  118A  25CD  120A  118A  	fcall	_LCD_com
  1119                           
  1120                           ;I2C_LCD.c: 94:     _delay((unsigned long)((50)*(8000000/4000.0)));
  1121  074B  3082               	movlw	130
  1122  074C  00F7               	movwf	??_LCD_Init+1
  1123  074D  30DD               	movlw	221
  1124  074E  00F6               	movwf	??_LCD_Init
  1125  074F                     u447:
  1126  074F  0BF6               	decfsz	??_LCD_Init,f
  1127  0750  2F4F               	goto	u447
  1128  0751  0BF7               	decfsz	??_LCD_Init+1,f
  1129  0752  2F4F               	goto	u447
  1130  0753  2F54               	nop2
  1131  0754                     l105:
  1132  0754  0008               	return
  1133  0755                     __end_of_LCD_Init:
  1134                           
  1135                           	psect	text5
  1136  05CD                     __ptext5:	
  1137 ;; *************** function _LCD_com *****************
  1138 ;; Defined at:
  1139 ;;		line 104 in file "I2C_LCD.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;  com             1    wreg     unsigned char 
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  com             1    5[COMMON] unsigned char 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  1    wreg      void 
  1146 ;; Registers used:
  1147 ;;		wreg, status,2, status,0, pclath, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1153 ;;      Params:         0       0       0       0       0
  1154 ;;      Locals:         1       0       0       0       0
  1155 ;;      Temps:          1       0       0       0       0
  1156 ;;      Totals:         2       0       0       0       0
  1157 ;;Total ram usage:        2 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; Hardware stack levels required when called:    4
  1160 ;; This function calls:
  1161 ;;		_LCD_writeNibble
  1162 ;; This function is called by:
  1163 ;;		_LCD_Init
  1164 ;;		_LCD_setCursor
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           
  1169                           ;psect for function _LCD_com
  1170  05CD                     _LCD_com:
  1171                           
  1172                           ;incstack = 0
  1173                           ; Regs used in _LCD_com: [wreg+status,2+status,0+pclath+cstack]
  1174                           ;LCD_com@com stored from wreg
  1175  05CD  00F5               	movwf	LCD_com@com
  1176  05CE                     l748:
  1177                           
  1178                           ;I2C_LCD.c: 105:     RS = 0;
  1179  05CE  01FD               	clrf	_RS
  1180  05CF                     l750:
  1181                           
  1182                           ;I2C_LCD.c: 106:     LCD_writeNibble(com & 0xf0);
  1183  05CF  0875               	movf	LCD_com@com,w
  1184  05D0  39F0               	andlw	240
  1185  05D1  120A  118A  259C  120A  118A  	fcall	_LCD_writeNibble
  1186  05D6                     l752:
  1187                           
  1188                           ;I2C_LCD.c: 107:     LCD_writeNibble((com << 4) & 0xf0);
  1189  05D6  0875               	movf	LCD_com@com,w
  1190  05D7  00F4               	movwf	??_LCD_com
  1191  05D8  3003               	movlw	3
  1192  05D9                     u45:
  1193  05D9  1003               	clrc
  1194  05DA  0DF4               	rlf	??_LCD_com,f
  1195  05DB  3EFF               	addlw	-1
  1196  05DC  1D03               	skipz
  1197  05DD  2DD9               	goto	u45
  1198  05DE  1003               	clrc
  1199  05DF  0D74               	rlf	??_LCD_com,w
  1200  05E0  39F0               	andlw	240
  1201  05E1  120A  118A  259C  120A  118A  	fcall	_LCD_writeNibble
  1202  05E6                     l111:
  1203  05E6  0008               	return
  1204  05E7                     __end_of_LCD_com:
  1205                           
  1206                           	psect	text6
  1207  059C                     __ptext6:	
  1208 ;; *************** function _LCD_writeNibble *****************
  1209 ;; Defined at:
  1210 ;;		line 97 in file "I2C_LCD.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;  nibble          1    wreg     unsigned char 
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;  nibble          1    3[COMMON] unsigned char 
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  1    wreg      void 
  1217 ;; Registers used:
  1218 ;;		wreg, status,2, status,0, pclath, cstack
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1224 ;;      Params:         0       0       0       0       0
  1225 ;;      Locals:         1       0       0       0       0
  1226 ;;      Temps:          1       0       0       0       0
  1227 ;;      Totals:         2       0       0       0       0
  1228 ;;Total ram usage:        2 bytes
  1229 ;; Hardware stack levels used:    1
  1230 ;; Hardware stack levels required when called:    3
  1231 ;; This function calls:
  1232 ;;		_IO_expanderWrite
  1233 ;; This function is called by:
  1234 ;;		_LCD_com
  1235 ;;		_LCD_putChar
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           
  1240                           ;psect for function _LCD_writeNibble
  1241  059C                     _LCD_writeNibble:
  1242                           
  1243                           ;incstack = 0
  1244                           ; Regs used in _LCD_writeNibble: [wreg+status,2+status,0+pclath+cstack]
  1245                           ;LCD_writeNibble@nibble stored from wreg
  1246  059C  00F3               	movwf	LCD_writeNibble@nibble
  1247  059D                     l742:
  1248                           
  1249                           ;I2C_LCD.c: 98:     nibble |= RS;
  1250  059D  087D               	movf	_RS,w
  1251  059E  00F2               	movwf	??_LCD_writeNibble
  1252  059F  0872               	movf	??_LCD_writeNibble,w
  1253  05A0  04F3               	iorwf	LCD_writeNibble@nibble,f
  1254  05A1                     l744:
  1255                           
  1256                           ;I2C_LCD.c: 99:     IO_expanderWrite(nibble | 0x04);
  1257  05A1  0873               	movf	LCD_writeNibble@nibble,w
  1258  05A2  3804               	iorlw	4
  1259  05A3  120A  118A  25B4  120A  118A  	fcall	_IO_expanderWrite
  1260  05A8                     l746:
  1261                           
  1262                           ;I2C_LCD.c: 100:     IO_expanderWrite(nibble & 0xFB);
  1263  05A8  0873               	movf	LCD_writeNibble@nibble,w
  1264  05A9  39FB               	andlw	251
  1265  05AA  120A  118A  25B4  120A  118A  	fcall	_IO_expanderWrite
  1266                           
  1267                           ;I2C_LCD.c: 101:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  1268  05AF  3021               	movlw	33
  1269  05B0  00F2               	movwf	??_LCD_writeNibble
  1270  05B1                     u457:
  1271  05B1  0BF2               	decfsz	??_LCD_writeNibble,f
  1272  05B2  2DB1               	goto	u457
  1273  05B3                     l108:
  1274  05B3  0008               	return
  1275  05B4                     __end_of_LCD_writeNibble:
  1276                           
  1277                           	psect	text7
  1278  05B4                     __ptext7:	
  1279 ;; *************** function _IO_expanderWrite *****************
  1280 ;; Defined at:
  1281 ;;		line 138 in file "I2C_LCD.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;  data            1    wreg     unsigned char 
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;  data            1    1[COMMON] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  1    wreg      void 
  1288 ;; Registers used:
  1289 ;;		wreg, status,2, status,0, pclath, cstack
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1295 ;;      Params:         0       0       0       0       0
  1296 ;;      Locals:         1       0       0       0       0
  1297 ;;      Temps:          0       0       0       0       0
  1298 ;;      Totals:         1       0       0       0       0
  1299 ;;Total ram usage:        1 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; Hardware stack levels required when called:    2
  1302 ;; This function calls:
  1303 ;;		_I2C_Master_Start
  1304 ;;		_I2C_Master_Stop
  1305 ;;		_I2C_Master_Write
  1306 ;; This function is called by:
  1307 ;;		_LCD_Init
  1308 ;;		_LCD_writeNibble
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           
  1313                           ;psect for function _IO_expanderWrite
  1314  05B4                     _IO_expanderWrite:
  1315                           
  1316                           ;incstack = 0
  1317                           ; Regs used in _IO_expanderWrite: [wreg+status,2+status,0+pclath+cstack]
  1318                           ;IO_expanderWrite@data stored from wreg
  1319  05B4  00F1               	movwf	IO_expanderWrite@data
  1320  05B5                     l740:
  1321                           
  1322                           ;I2C_LCD.c: 139:     I2C_Master_Start();
  1323  05B5  120A  118A  256D  120A  118A  	fcall	_I2C_Master_Start
  1324                           
  1325                           ;I2C_LCD.c: 140:     I2C_Master_Write(I2C_add);
  1326  05BA  087C               	movf	_I2C_add,w
  1327  05BB  120A  118A  258C  120A  118A  	fcall	_I2C_Master_Write
  1328                           
  1329                           ;I2C_LCD.c: 141:     I2C_Master_Write(data | 0x08);
  1330  05C0  0871               	movf	IO_expanderWrite@data,w
  1331  05C1  3808               	iorlw	8
  1332  05C2  120A  118A  258C  120A  118A  	fcall	_I2C_Master_Write
  1333                           
  1334                           ;I2C_LCD.c: 142:     I2C_Master_Stop();
  1335  05C7  120A  118A  2576  120A  118A  	fcall	_I2C_Master_Stop
  1336  05CC                     l132:
  1337  05CC  0008               	return
  1338  05CD                     __end_of_IO_expanderWrite:
  1339                           
  1340                           	psect	text8
  1341  058C                     __ptext8:	
  1342 ;; *************** function _I2C_Master_Write *****************
  1343 ;; Defined at:
  1344 ;;		line 55 in file "I2C_LCD.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  data            1    wreg     unsigned char 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  data            1    0[COMMON] unsigned char 
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  1    wreg      unsigned char 
  1351 ;; Registers used:
  1352 ;;		wreg, status,2, status,0, pclath, cstack
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1358 ;;      Params:         0       0       0       0       0
  1359 ;;      Locals:         1       0       0       0       0
  1360 ;;      Temps:          0       0       0       0       0
  1361 ;;      Totals:         1       0       0       0       0
  1362 ;;Total ram usage:        1 bytes
  1363 ;; Hardware stack levels used:    1
  1364 ;; Hardware stack levels required when called:    1
  1365 ;; This function calls:
  1366 ;;		_I2C_Master_Wait
  1367 ;; This function is called by:
  1368 ;;		_IO_expanderWrite
  1369 ;; This function uses a non-reentrant model
  1370 ;;
  1371                           
  1372                           
  1373                           ;psect for function _I2C_Master_Write
  1374  058C                     _I2C_Master_Write:
  1375                           
  1376                           ;incstack = 0
  1377                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  1378                           ;I2C_Master_Write@data stored from wreg
  1379  058C  00F0               	movwf	I2C_Master_Write@data
  1380  058D                     l736:
  1381                           
  1382                           ;I2C_LCD.c: 56:     I2C_Master_Wait();
  1383  058D  120A  118A  257F  120A  118A  	fcall	_I2C_Master_Wait
  1384  0592                     l738:
  1385                           
  1386                           ;I2C_LCD.c: 57:     SSPBUF = data;
  1387  0592  0870               	movf	I2C_Master_Write@data,w
  1388  0593  1283               	bcf	3,5	;RP0=0, select bank0
  1389  0594  1303               	bcf	3,6	;RP1=0, select bank0
  1390  0595  0093               	movwf	19	;volatile
  1391  0596                     l96:	
  1392                           ;I2C_LCD.c: 58:     while (!SSPIF);
  1393                           
  1394  0596  1D8C               	btfss	12,3	;volatile
  1395  0597  2D99               	goto	u31
  1396  0598  2D9A               	goto	u30
  1397  0599                     u31:
  1398  0599  2D96               	goto	l96
  1399  059A                     u30:
  1400  059A                     l98:
  1401                           
  1402                           ;I2C_LCD.c: 59:     SSPIF = 0;
  1403  059A  118C               	bcf	12,3	;volatile
  1404  059B                     l99:	
  1405                           ;I2C_LCD.c: 60:     return ACKSTAT;;	Return value of _I2C_Master_Write is never used
  1406                           
  1407  059B  0008               	return
  1408  059C                     __end_of_I2C_Master_Write:
  1409                           
  1410                           	psect	text9
  1411  0576                     __ptext9:	
  1412 ;; *************** function _I2C_Master_Stop *****************
  1413 ;; Defined at:
  1414 ;;		line 29 in file "I2C_LCD.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;		None
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;		None
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  1    wreg      void 
  1421 ;; Registers used:
  1422 ;;		wreg, status,2, status,0, pclath, cstack
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1428 ;;      Params:         0       0       0       0       0
  1429 ;;      Locals:         0       0       0       0       0
  1430 ;;      Temps:          0       0       0       0       0
  1431 ;;      Totals:         0       0       0       0       0
  1432 ;;Total ram usage:        0 bytes
  1433 ;; Hardware stack levels used:    1
  1434 ;; Hardware stack levels required when called:    1
  1435 ;; This function calls:
  1436 ;;		_I2C_Master_Wait
  1437 ;; This function is called by:
  1438 ;;		_IO_expanderWrite
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           
  1443                           ;psect for function _I2C_Master_Stop
  1444  0576                     _I2C_Master_Stop:
  1445  0576                     l732:	
  1446                           ;incstack = 0
  1447                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  1448                           
  1449                           
  1450                           ;I2C_LCD.c: 30:     I2C_Master_Wait();
  1451  0576  120A  118A  257F  120A  118A  	fcall	_I2C_Master_Wait
  1452  057B                     l734:
  1453                           
  1454                           ;I2C_LCD.c: 31:     PEN = 1;
  1455  057B  1683               	bsf	3,5	;RP0=1, select bank1
  1456  057C  1303               	bcf	3,6	;RP1=0, select bank1
  1457  057D  1511               	bsf	17,2	;volatile
  1458  057E                     l81:
  1459  057E  0008               	return
  1460  057F                     __end_of_I2C_Master_Stop:
  1461                           
  1462                           	psect	text10
  1463  056D                     __ptext10:	
  1464 ;; *************** function _I2C_Master_Start *****************
  1465 ;; Defined at:
  1466 ;;		line 24 in file "I2C_LCD.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;		None
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;		None
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  1    wreg      void 
  1473 ;; Registers used:
  1474 ;;		wreg, status,2, status,0, pclath, cstack
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1480 ;;      Params:         0       0       0       0       0
  1481 ;;      Locals:         0       0       0       0       0
  1482 ;;      Temps:          0       0       0       0       0
  1483 ;;      Totals:         0       0       0       0       0
  1484 ;;Total ram usage:        0 bytes
  1485 ;; Hardware stack levels used:    1
  1486 ;; Hardware stack levels required when called:    1
  1487 ;; This function calls:
  1488 ;;		_I2C_Master_Wait
  1489 ;; This function is called by:
  1490 ;;		_IO_expanderWrite
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           
  1495                           ;psect for function _I2C_Master_Start
  1496  056D                     _I2C_Master_Start:
  1497  056D                     l728:	
  1498                           ;incstack = 0
  1499                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  1500                           
  1501                           
  1502                           ;I2C_LCD.c: 25:     I2C_Master_Wait();
  1503  056D  120A  118A  257F  120A  118A  	fcall	_I2C_Master_Wait
  1504  0572                     l730:
  1505                           
  1506                           ;I2C_LCD.c: 26:     SEN = 1;
  1507  0572  1683               	bsf	3,5	;RP0=1, select bank1
  1508  0573  1303               	bcf	3,6	;RP1=0, select bank1
  1509  0574  1411               	bsf	17,0	;volatile
  1510  0575                     l78:
  1511  0575  0008               	return
  1512  0576                     __end_of_I2C_Master_Start:
  1513                           
  1514                           	psect	text11
  1515  057F                     __ptext11:	
  1516 ;; *************** function _I2C_Master_Wait *****************
  1517 ;; Defined at:
  1518 ;;		line 20 in file "I2C_LCD.c"
  1519 ;; Parameters:    Size  Location     Type
  1520 ;;		None
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;		None
  1523 ;; Return value:  Size  Location     Type
  1524 ;;                  1    wreg      void 
  1525 ;; Registers used:
  1526 ;;		wreg, status,2
  1527 ;; Tracked objects:
  1528 ;;		On entry : 0/0
  1529 ;;		On exit  : 0/0
  1530 ;;		Unchanged: 0/0
  1531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1532 ;;      Params:         0       0       0       0       0
  1533 ;;      Locals:         0       0       0       0       0
  1534 ;;      Temps:          0       0       0       0       0
  1535 ;;      Totals:         0       0       0       0       0
  1536 ;;Total ram usage:        0 bytes
  1537 ;; Hardware stack levels used:    1
  1538 ;; This function calls:
  1539 ;;		Nothing
  1540 ;; This function is called by:
  1541 ;;		_I2C_Master_Start
  1542 ;;		_I2C_Master_Stop
  1543 ;;		_I2C_Master_Write
  1544 ;;		_I2C_ACK
  1545 ;;		_I2C_NACK
  1546 ;;		_I2C_Read_Byte
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           
  1551                           ;psect for function _I2C_Master_Wait
  1552  057F                     _I2C_Master_Wait:
  1553  057F                     l724:	
  1554                           ;incstack = 0
  1555                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  1556                           
  1557  057F                     l72:	
  1558                           ;I2C_LCD.c: 21:     while ((SSPSTAT & 0b00000100) || (SSPCON2 & 0b00011111));
  1559                           
  1560  057F  1683               	bsf	3,5	;RP0=1, select bank1
  1561  0580  1303               	bcf	3,6	;RP1=0, select bank1
  1562  0581  1914               	btfsc	20,2	;volatile
  1563  0582  2D84               	goto	u11
  1564  0583  2D85               	goto	u10
  1565  0584                     u11:
  1566  0584  2D7F               	goto	l72
  1567  0585                     u10:
  1568  0585                     l726:
  1569  0585  0811               	movf	17,w	;volatile
  1570  0586  391F               	andlw	31
  1571  0587  1D03               	btfss	3,2
  1572  0588  2D8A               	goto	u21
  1573  0589  2D8B               	goto	u20
  1574  058A                     u21:
  1575  058A  2D7F               	goto	l72
  1576  058B                     u20:
  1577  058B                     l75:
  1578  058B  0008               	return
  1579  058C                     __end_of_I2C_Master_Wait:
  1580                           
  1581                           	psect	text12
  1582  0621                     __ptext12:	
  1583 ;; *************** function _I2C_Master_Init *****************
  1584 ;; Defined at:
  1585 ;;		line 12 in file "I2C_LCD.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;  baud            4    6[BANK0 ] long 
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      void 
  1592 ;; Registers used:
  1593 ;;		wreg, status,2, status,0, pclath, cstack
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1599 ;;      Params:         0       4       0       0       0
  1600 ;;      Locals:         0       0       0       0       0
  1601 ;;      Temps:          0       0       0       0       0
  1602 ;;      Totals:         0       4       0       0       0
  1603 ;;Total ram usage:        4 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:    1
  1606 ;; This function calls:
  1607 ;;		___aldiv
  1608 ;; This function is called by:
  1609 ;;		_main
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           
  1614                           ;psect for function _I2C_Master_Init
  1615  0621                     _I2C_Master_Init:
  1616  0621                     l966:	
  1617                           ;incstack = 0
  1618                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  1619                           
  1620                           
  1621                           ;I2C_LCD.c: 13:     SSPSTAT = 0;
  1622  0621  1683               	bsf	3,5	;RP0=1, select bank1
  1623  0622  1303               	bcf	3,6	;RP1=0, select bank1
  1624  0623  0194               	clrf	20	;volatile
  1625  0624                     l968:
  1626                           
  1627                           ;I2C_LCD.c: 14:     SSPCON = 0b00101000;
  1628  0624  3028               	movlw	40
  1629  0625  1283               	bcf	3,5	;RP0=0, select bank0
  1630  0626  1303               	bcf	3,6	;RP1=0, select bank0
  1631  0627  0094               	movwf	20	;volatile
  1632  0628                     l970:
  1633                           
  1634                           ;I2C_LCD.c: 15:     SSPCON2 = 0;
  1635  0628  1683               	bsf	3,5	;RP0=1, select bank1
  1636  0629  1303               	bcf	3,6	;RP1=0, select bank1
  1637  062A  0191               	clrf	17	;volatile
  1638  062B                     l972:
  1639                           
  1640                           ;I2C_LCD.c: 16:     SSPADD = ((8000000 / 4) / baud) - 1;
  1641  062B  1283               	bcf	3,5	;RP0=0, select bank0
  1642  062C  1303               	bcf	3,6	;RP1=0, select bank0
  1643  062D  0839               	movf	I2C_Master_Init@baud+3,w
  1644  062E  00F3               	movwf	___aldiv@divisor+3
  1645  062F  0838               	movf	I2C_Master_Init@baud+2,w
  1646  0630  00F2               	movwf	___aldiv@divisor+2
  1647  0631  0837               	movf	I2C_Master_Init@baud+1,w
  1648  0632  00F1               	movwf	___aldiv@divisor+1
  1649  0633  0836               	movf	I2C_Master_Init@baud,w
  1650  0634  00F0               	movwf	___aldiv@divisor
  1651  0635  3000               	movlw	0
  1652  0636  00F7               	movwf	___aldiv@dividend+3
  1653  0637  301E               	movlw	30
  1654  0638  00F6               	movwf	___aldiv@dividend+2
  1655  0639  3084               	movlw	132
  1656  063A  00F5               	movwf	___aldiv@dividend+1
  1657  063B  3080               	movlw	128
  1658  063C  00F4               	movwf	___aldiv@dividend
  1659  063D  120A  118A  2755  120A  118A  	fcall	___aldiv
  1660  0642  0870               	movf	?___aldiv,w
  1661  0643  3EFF               	addlw	255
  1662  0644  1683               	bsf	3,5	;RP0=1, select bank1
  1663  0645  1303               	bcf	3,6	;RP1=0, select bank1
  1664  0646  0093               	movwf	19	;volatile
  1665  0647                     l974:
  1666                           
  1667                           ;I2C_LCD.c: 17:     TRISC3 = TRISC4 = 1;
  1668  0647  1607               	bsf	7,4	;volatile
  1669  0648  1A07               	btfsc	7,4	;volatile
  1670  0649  2E4B               	goto	u321
  1671  064A  2E4F               	goto	u320
  1672  064B                     u321:
  1673  064B  1683               	bsf	3,5	;RP0=1, select bank1
  1674  064C  1303               	bcf	3,6	;RP1=0, select bank1
  1675  064D  1587               	bsf	7,3	;volatile
  1676  064E  2E52               	goto	u334
  1677  064F                     u320:
  1678  064F  1683               	bsf	3,5	;RP0=1, select bank1
  1679  0650  1303               	bcf	3,6	;RP1=0, select bank1
  1680  0651  1187               	bcf	7,3	;volatile
  1681  0652                     u334:
  1682  0652                     l69:
  1683  0652  0008               	return
  1684  0653                     __end_of_I2C_Master_Init:
  1685                           
  1686                           	psect	text13
  1687  0755                     __ptext13:	
  1688 ;; *************** function ___aldiv *****************
  1689 ;; Defined at:
  1690 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\aldiv.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  divisor         4    0[COMMON] long 
  1693 ;;  dividend        4    4[COMMON] long 
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;  quotient        4    2[BANK0 ] long 
  1696 ;;  sign            1    1[BANK0 ] unsigned char 
  1697 ;;  counter         1    0[BANK0 ] unsigned char 
  1698 ;; Return value:  Size  Location     Type
  1699 ;;                  4    0[COMMON] long 
  1700 ;; Registers used:
  1701 ;;		wreg, status,2, status,0
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1707 ;;      Params:         8       0       0       0       0
  1708 ;;      Locals:         0       6       0       0       0
  1709 ;;      Temps:          1       0       0       0       0
  1710 ;;      Totals:         9       6       0       0       0
  1711 ;;Total ram usage:       15 bytes
  1712 ;; Hardware stack levels used:    1
  1713 ;; This function calls:
  1714 ;;		Nothing
  1715 ;; This function is called by:
  1716 ;;		_I2C_Master_Init
  1717 ;; This function uses a non-reentrant model
  1718 ;;
  1719                           
  1720                           
  1721                           ;psect for function ___aldiv
  1722  0755                     ___aldiv:
  1723  0755                     l926:	
  1724                           ;incstack = 0
  1725                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1726                           
  1727  0755  1283               	bcf	3,5	;RP0=0, select bank0
  1728  0756  1303               	bcf	3,6	;RP1=0, select bank0
  1729  0757  01B1               	clrf	___aldiv@sign
  1730  0758                     l928:
  1731  0758  1FF3               	btfss	___aldiv@divisor+3,7
  1732  0759  2F5B               	goto	u221
  1733  075A  2F5C               	goto	u220
  1734  075B                     u221:
  1735  075B  2F69               	goto	l283
  1736  075C                     u220:
  1737  075C                     l930:
  1738  075C  09F0               	comf	___aldiv@divisor,f
  1739  075D  09F1               	comf	___aldiv@divisor+1,f
  1740  075E  09F2               	comf	___aldiv@divisor+2,f
  1741  075F  09F3               	comf	___aldiv@divisor+3,f
  1742  0760  0AF0               	incf	___aldiv@divisor,f
  1743  0761  1903               	skipnz
  1744  0762  0AF1               	incf	___aldiv@divisor+1,f
  1745  0763  1903               	skipnz
  1746  0764  0AF2               	incf	___aldiv@divisor+2,f
  1747  0765  1903               	skipnz
  1748  0766  0AF3               	incf	___aldiv@divisor+3,f
  1749  0767  01B1               	clrf	___aldiv@sign
  1750  0768  0AB1               	incf	___aldiv@sign,f
  1751  0769                     l283:
  1752  0769  1FF7               	btfss	___aldiv@dividend+3,7
  1753  076A  2F6C               	goto	u231
  1754  076B  2F6D               	goto	u230
  1755  076C                     u231:
  1756  076C  2F7C               	goto	l936
  1757  076D                     u230:
  1758  076D                     l932:
  1759  076D  09F4               	comf	___aldiv@dividend,f
  1760  076E  09F5               	comf	___aldiv@dividend+1,f
  1761  076F  09F6               	comf	___aldiv@dividend+2,f
  1762  0770  09F7               	comf	___aldiv@dividend+3,f
  1763  0771  0AF4               	incf	___aldiv@dividend,f
  1764  0772  1903               	skipnz
  1765  0773  0AF5               	incf	___aldiv@dividend+1,f
  1766  0774  1903               	skipnz
  1767  0775  0AF6               	incf	___aldiv@dividend+2,f
  1768  0776  1903               	skipnz
  1769  0777  0AF7               	incf	___aldiv@dividend+3,f
  1770  0778                     l934:
  1771  0778  3001               	movlw	1
  1772  0779  00F8               	movwf	??___aldiv
  1773  077A  0878               	movf	??___aldiv,w
  1774  077B  06B1               	xorwf	___aldiv@sign,f
  1775  077C                     l936:
  1776  077C  3000               	movlw	0
  1777  077D  00B5               	movwf	___aldiv@quotient+3
  1778  077E  3000               	movlw	0
  1779  077F  00B4               	movwf	___aldiv@quotient+2
  1780  0780  3000               	movlw	0
  1781  0781  00B3               	movwf	___aldiv@quotient+1
  1782  0782  3000               	movlw	0
  1783  0783  00B2               	movwf	___aldiv@quotient
  1784  0784                     l938:
  1785  0784  0873               	movf	___aldiv@divisor+3,w
  1786  0785  0472               	iorwf	___aldiv@divisor+2,w
  1787  0786  0471               	iorwf	___aldiv@divisor+1,w
  1788  0787  0470               	iorwf	___aldiv@divisor,w
  1789  0788  1903               	skipnz
  1790  0789  2F8B               	goto	u241
  1791  078A  2F8C               	goto	u240
  1792  078B                     u241:
  1793  078B  2FD9               	goto	l958
  1794  078C                     u240:
  1795  078C                     l940:
  1796  078C  01B0               	clrf	___aldiv@counter
  1797  078D  0AB0               	incf	___aldiv@counter,f
  1798  078E  2F9C               	goto	l944
  1799  078F                     l942:
  1800  078F  3001               	movlw	1
  1801  0790  00F8               	movwf	??___aldiv
  1802  0791                     u255:
  1803  0791  1003               	clrc
  1804  0792  0DF0               	rlf	___aldiv@divisor,f
  1805  0793  0DF1               	rlf	___aldiv@divisor+1,f
  1806  0794  0DF2               	rlf	___aldiv@divisor+2,f
  1807  0795  0DF3               	rlf	___aldiv@divisor+3,f
  1808  0796  0BF8               	decfsz	??___aldiv,f
  1809  0797  2F91               	goto	u255
  1810  0798  3001               	movlw	1
  1811  0799  00F8               	movwf	??___aldiv
  1812  079A  0878               	movf	??___aldiv,w
  1813  079B  07B0               	addwf	___aldiv@counter,f
  1814  079C                     l944:
  1815  079C  1FF3               	btfss	___aldiv@divisor+3,7
  1816  079D  2F9F               	goto	u261
  1817  079E  2FA0               	goto	u260
  1818  079F                     u261:
  1819  079F  2F8F               	goto	l942
  1820  07A0                     u260:
  1821  07A0                     l946:
  1822  07A0  3001               	movlw	1
  1823  07A1  00F8               	movwf	??___aldiv
  1824  07A2                     u275:
  1825  07A2  1003               	clrc
  1826  07A3  0DB2               	rlf	___aldiv@quotient,f
  1827  07A4  0DB3               	rlf	___aldiv@quotient+1,f
  1828  07A5  0DB4               	rlf	___aldiv@quotient+2,f
  1829  07A6  0DB5               	rlf	___aldiv@quotient+3,f
  1830  07A7  0BF8               	decfsz	??___aldiv,f
  1831  07A8  2FA2               	goto	u275
  1832  07A9                     l948:
  1833  07A9  0873               	movf	___aldiv@divisor+3,w
  1834  07AA  0277               	subwf	___aldiv@dividend+3,w
  1835  07AB  1D03               	skipz
  1836  07AC  2FB7               	goto	u285
  1837  07AD  0872               	movf	___aldiv@divisor+2,w
  1838  07AE  0276               	subwf	___aldiv@dividend+2,w
  1839  07AF  1D03               	skipz
  1840  07B0  2FB7               	goto	u285
  1841  07B1  0871               	movf	___aldiv@divisor+1,w
  1842  07B2  0275               	subwf	___aldiv@dividend+1,w
  1843  07B3  1D03               	skipz
  1844  07B4  2FB7               	goto	u285
  1845  07B5  0870               	movf	___aldiv@divisor,w
  1846  07B6  0274               	subwf	___aldiv@dividend,w
  1847  07B7                     u285:
  1848  07B7  1C03               	skipc
  1849  07B8  2FBA               	goto	u281
  1850  07B9  2FBB               	goto	u280
  1851  07BA                     u281:
  1852  07BA  2FCA               	goto	l954
  1853  07BB                     u280:
  1854  07BB                     l950:
  1855  07BB  0870               	movf	___aldiv@divisor,w
  1856  07BC  02F4               	subwf	___aldiv@dividend,f
  1857  07BD  0871               	movf	___aldiv@divisor+1,w
  1858  07BE  1C03               	skipc
  1859  07BF  0F71               	incfsz	___aldiv@divisor+1,w
  1860  07C0  02F5               	subwf	___aldiv@dividend+1,f
  1861  07C1  0872               	movf	___aldiv@divisor+2,w
  1862  07C2  1C03               	skipc
  1863  07C3  0F72               	incfsz	___aldiv@divisor+2,w
  1864  07C4  02F6               	subwf	___aldiv@dividend+2,f
  1865  07C5  0873               	movf	___aldiv@divisor+3,w
  1866  07C6  1C03               	skipc
  1867  07C7  0F73               	incfsz	___aldiv@divisor+3,w
  1868  07C8  02F7               	subwf	___aldiv@dividend+3,f
  1869  07C9                     l952:
  1870  07C9  1432               	bsf	___aldiv@quotient,0
  1871  07CA                     l954:
  1872  07CA  3001               	movlw	1
  1873  07CB                     u295:
  1874  07CB  1003               	clrc
  1875  07CC  0CF3               	rrf	___aldiv@divisor+3,f
  1876  07CD  0CF2               	rrf	___aldiv@divisor+2,f
  1877  07CE  0CF1               	rrf	___aldiv@divisor+1,f
  1878  07CF  0CF0               	rrf	___aldiv@divisor,f
  1879  07D0  3EFF               	addlw	-1
  1880  07D1  1D03               	skipz
  1881  07D2  2FCB               	goto	u295
  1882  07D3                     l956:
  1883  07D3  3001               	movlw	1
  1884  07D4  02B0               	subwf	___aldiv@counter,f
  1885  07D5  1D03               	btfss	3,2
  1886  07D6  2FD8               	goto	u301
  1887  07D7  2FD9               	goto	u300
  1888  07D8                     u301:
  1889  07D8  2FA0               	goto	l946
  1890  07D9                     u300:
  1891  07D9                     l958:
  1892  07D9  0831               	movf	___aldiv@sign,w
  1893  07DA  1903               	btfsc	3,2
  1894  07DB  2FDD               	goto	u311
  1895  07DC  2FDE               	goto	u310
  1896  07DD                     u311:
  1897  07DD  2FE9               	goto	l962
  1898  07DE                     u310:
  1899  07DE                     l960:
  1900  07DE  09B2               	comf	___aldiv@quotient,f
  1901  07DF  09B3               	comf	___aldiv@quotient+1,f
  1902  07E0  09B4               	comf	___aldiv@quotient+2,f
  1903  07E1  09B5               	comf	___aldiv@quotient+3,f
  1904  07E2  0AB2               	incf	___aldiv@quotient,f
  1905  07E3  1903               	skipnz
  1906  07E4  0AB3               	incf	___aldiv@quotient+1,f
  1907  07E5  1903               	skipnz
  1908  07E6  0AB4               	incf	___aldiv@quotient+2,f
  1909  07E7  1903               	skipnz
  1910  07E8  0AB5               	incf	___aldiv@quotient+3,f
  1911  07E9                     l962:
  1912  07E9  0835               	movf	___aldiv@quotient+3,w
  1913  07EA  00F3               	movwf	?___aldiv+3
  1914  07EB  0834               	movf	___aldiv@quotient+2,w
  1915  07EC  00F2               	movwf	?___aldiv+2
  1916  07ED  0833               	movf	___aldiv@quotient+1,w
  1917  07EE  00F1               	movwf	?___aldiv+1
  1918  07EF  0832               	movf	___aldiv@quotient,w
  1919  07F0  00F0               	movwf	?___aldiv
  1920  07F1                     l293:
  1921  07F1  0008               	return
  1922  07F2                     __end_of___aldiv:
  1923  007E                     btemp	set	126	;btemp
  1924  007E                     wtemp0	set	126
  1925                           
  1926                           	psect	config
  1927                           
  1928                           ;Config register CONFIG1 @ 0x2007
  1929                           ;	Oscillator Selection bits
  1930                           ;	FOSC = EXTRC_CLKOUT, RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/
      +                          OSC1/CLKIN
  1931                           ;	Watchdog Timer Enable bit
  1932                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1933                           ;	Power-up Timer Enable bit
  1934                           ;	PWRTE = OFF, PWRT disabled
  1935                           ;	RE3/MCLR pin function select bit
  1936                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  1937                           ;	Code Protection bit
  1938                           ;	CP = OFF, Program memory code protection is disabled
  1939                           ;	Data Code Protection bit
  1940                           ;	CPD = OFF, Data memory code protection is disabled
  1941                           ;	Brown Out Reset Selection bits
  1942                           ;	BOREN = OFF, BOR disabled
  1943                           ;	Internal External Switchover bit
  1944                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1945                           ;	Fail-Safe Clock Monitor Enabled bit
  1946                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1947                           ;	Low Voltage Programming Enable bit
  1948                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1949                           ;	In-Circuit Debugger Mode bit
  1950                           ;	DEBUG = 0x1, unprogrammed default
  1951  2007                     	org	8199
  1952  2007  20F7               	dw	8439
  1953                           
  1954                           ;Config register CONFIG2 @ 0x2008
  1955                           ;	Brown-out Reset Selection bit
  1956                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1957                           ;	Flash Program Memory Self Write Enable bits
  1958                           ;	WRT = OFF, Write protection off
  1959  2008                     	org	8200
  1960  2008  3FFF               	dw	16383

Data Sizes:
    Strings     14
    Constant    0
    Data        0
    BSS         17
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     10      26
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_puts@str	PTR unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[6]), 


Critical Paths under _main in COMMON

    _main->_LCD_setCursor
    _LCD_setCursor->_LCD_com
    _LCD_puts->_LCD_putChar
    _LCD_putChar->_LCD_writeNibble
    _LCD_Init->_LCD_com
    _LCD_com->_LCD_writeNibble
    _LCD_writeNibble->_IO_expanderWrite
    _IO_expanderWrite->_I2C_Master_Write
    _I2C_Master_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_I2C_Master_Init
    _I2C_Master_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1238
                                             10 COMMON     2     2      0
                    _I2C_Master_Init
                           _LCD_Init
                           _LCD_puts
                      _LCD_setCursor
 ---------------------------------------------------------------------------------
 (1) _LCD_setCursor                                        4     3      1     352
                                              6 COMMON     4     3      1
                            _LCD_com
 ---------------------------------------------------------------------------------
 (1) _LCD_puts                                             2     2      0     201
                                              6 COMMON     2     2      0
                        _LCD_putChar
 ---------------------------------------------------------------------------------
 (2) _LCD_putChar                                          2     2      0      90
                                              4 COMMON     2     2      0
                    _LCD_writeNibble
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             3     3      0     135
                                              6 COMMON     3     3      0
                   _IO_expanderWrite
                            _LCD_com
 ---------------------------------------------------------------------------------
 (2) _LCD_com                                              2     2      0      90
                                              4 COMMON     2     2      0
                    _LCD_writeNibble
 ---------------------------------------------------------------------------------
 (3) _LCD_writeNibble                                      2     2      0      60
                                              2 COMMON     2     2      0
                   _IO_expanderWrite
 ---------------------------------------------------------------------------------
 (4) _IO_expanderWrite                                     1     1      0      30
                                              1 COMMON     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     1     1      0      15
                                              0 COMMON     1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      4     0      4     550
                                              6 BANK0      4     0      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___aldiv
   _LCD_Init
     _IO_expanderWrite
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _LCD_com
       _LCD_writeNibble
         _IO_expanderWrite
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _LCD_puts
     _LCD_putChar
       _LCD_writeNibble
         _IO_expanderWrite
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _LCD_setCursor
     _LCD_com
       _LCD_writeNibble
         _IO_expanderWrite
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      28       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      A      1A       5       32.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      28      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Jul 13 22:58:39 2021

                        pc 0002                         l72 057F                         l81 057E  
                       l75 058B                         l69 0652                         l78 0575  
                       l96 0596                         l98 059A                         l99 059B  
                       u10 0585                         u11 0584                         u20 058B  
                       u21 058A                         u30 059A                         u31 0599  
                       u45 05D9                         u55 05F4                         _RS 007D  
                       fsr 0004            LCD_Init@address 0078                        l111 05E6  
                      l120 0688                        l105 0754                        l123 0601  
                      l132 05CC                        l108 05B3                        l129 0620  
                      l283 0769                        l293 07F1                        l730 0572  
                      l810 06CE                        l724 057F                        l732 0576  
                      l740 05B5                        l820 0700                        l812 06D4  
                      l726 0585                        l734 057B                        l742 059D  
                      l750 05CF                        l830 073C                        l822 070F  
                      l814 06E2                        l728 056D                        l736 058D  
                      l744 05A1                        l752 05D6                        l832 0745  
                      l824 0718                        l816 06EB                        l808 06CA  
                      l930 075C                        l738 0592                        l746 05A8  
                      l826 0727                        l818 06FA                        l754 05E8  
                      l940 078C                        l932 076D                        l748 05CE  
                      l828 072D                        l756 05EA                        l950 07BB  
                      l942 078F                        l934 0778                        l926 0755  
                      l960 07DE                        l952 07C9                        l944 079C  
                      l936 077C                        l928 0758                        l962 07E9  
                      l954 07CA                        l946 07A0                        l938 0784  
                      l970 0628                        l956 07D3                        l948 07A9  
                      l972 062B                        l980 065D                        l958 07D9  
                      l974 0647                        l966 0621                        l982 0665  
                      l968 0624                        l992 0603                        l984 066D  
                      l976 0654                        l994 0604                        l978 0655  
                      l986 0675                        _GIE 005F                        l996 0610  
                      l998 0614                        u300 07D9                        u220 075C  
                      u301 07D8                        u221 075B                        u310 07DE  
                      u230 076D                        u311 07DD                        u231 076C  
                      u240 078C                        u320 064F                        u241 078B  
                      u321 064B                        u260 07A0                        u340 0620  
                      u261 079F                        u341 061F                        u334 0652  
                      u255 0791                        u407 0713                        u280 07BB  
                      _PEN 048A                        u281 07BA                        u417 0722  
                      u275 07A2                        u427 0731                        u285 07B7  
                      u437 0740                        u357 06A5                        u295 07CB  
                      u447 074F                        u367 06D8                        u457 05B1  
                      u377 06E6                        u387 06F5                        _SEN 0488  
                      u397 0704                        fsr0 0004                        indf 0000  
__size_of_IO_expanderWrite 0019            __end_of_LCD_com 05E7                       l1000 0689  
                     l1010 06B7                       l1002 068C                       l1012 06BF  
                     l1004 06A1                       l1006 06A9                       l1008 06B1  
                     l1034 067D                       STR_1 0011                       STR_2 0009  
                     _PEIE 005E                       _RCEN 048B                       _main 0689  
                     btemp 007E     __size_of_LCD_setCursor 0036               ?_LCD_putChar 0070  
                     start 0000           ?_LCD_writeNibble 0070           __end_of_LCD_Init 0755  
         ?_I2C_Master_Init 0036           ?_I2C_Master_Wait 0070           ?_I2C_Master_Stop 0070  
         __end_of_LCD_puts 0621            __end_of___aldiv 07F2                      ?_main 0070  
                    _ACKEN 048C                      _ACKDT 048D                      _SSPIE 0463  
                    _SSPIF 0063                      pclath 000A                      status 0003  
                    wtemp0 007E            __initialization 07F2               __end_of_main 06C9  
                   ??_main 007A              _LCD_setCursor 0653                LCD_puts@str 0077  
                ??_LCD_com 0074          ?_I2C_Master_Start 0070          ?_I2C_Master_Write 0070  
       ??_I2C_Master_Start 0070         ??_I2C_Master_Write 0070                     _SSPADD 0093  
                   _TRISC3 043B                     _TRISC4 043C                     _TRISD5 0445  
                   _SSPCON 0014                     _SSPBUF 0013       IO_expanderWrite@data 0071  
                ??___aldiv 0078                     _buffer 0020             ?_LCD_setCursor 0076  
         _IO_expanderWrite 05B4    __end_of__initialization 07FC                  ?_LCD_Init 0070  
                ?_LCD_puts 0070       __size_of_LCD_putChar 001B             __pcstackCOMMON 0070  
               __pbssBANK0 0020                 ??_LCD_Init 0076                 __pnvCOMMON 007C  
               ??_LCD_puts 0076                 __pmaintext 0689            ??_LCD_setCursor 0077  
                  _ACKSTAT 048E                    _I2C_add 007C                    _LCD_com 05CD  
                  _SSPCON2 0091                    _SSPSTAT 0094                 __stringtab 0003  
                  ___aldiv 0755   __size_of_LCD_writeNibble 0018                    __ptext1 0653  
                  __ptext2 0602                    __ptext3 05E7                    __ptext4 06C9  
                  __ptext5 05CD                    __ptext6 059C                    __ptext7 05B4  
                  __ptext8 058C                    __ptext9 0576            LCD_putChar@data 0075  
         ___aldiv@dividend 0074   __size_of_I2C_Master_Init 0032   __size_of_I2C_Master_Wait 000D  
 __size_of_I2C_Master_Stop 0009                    clrloop0 0566       end_of_initialization 07FC  
__size_of_I2C_Master_Start 0009  __size_of_I2C_Master_Write 0010           ___aldiv@quotient 0032  
 __end_of_IO_expanderWrite 05CD          __size_of_LCD_Init 008C          __size_of_LCD_puts 001F  
               LCD_com@com 0075        start_initialization 07F2          ??_LCD_writeNibble 0072  
        ??_I2C_Master_Init 0079          ??_I2C_Master_Wait 0070          ??_I2C_Master_Stop 0070  
            ??_LCD_putChar 0074           LCD_setCursor@col 0076           LCD_setCursor@row 0079  
                 ?_LCD_com 0070                __pbssCOMMON 007D                  ___latbits 0002  
    LCD_writeNibble@nibble 0073              __pcstackBANK0 0030           _I2C_Master_Start 056D  
         _I2C_Master_Write 058C                   ?___aldiv 0070        __end_of_LCD_putChar 0602  
     I2C_Master_Write@data 0070      __end_of_LCD_setCursor 0689                  __pstrings 0003  
          ___aldiv@divisor 0070            ___aldiv@counter 0030                   _LCD_Init 06C9  
                clear_ram0 0565                   _LCD_puts 0602          ?_IO_expanderWrite 0070  
       ??_IO_expanderWrite 0071                __stringbase 0008           __size_of_LCD_com 001A  
      I2C_Master_Init@baud 0036                _LCD_putChar 05E7            _LCD_writeNibble 059C  
         __size_of___aldiv 009D         __end_of__stringtab 0009            _I2C_Master_Init 0621  
          _I2C_Master_Wait 057F            _I2C_Master_Stop 0576                   __ptext10 056D  
                 __ptext11 057F                   __ptext12 0621                   __ptext13 0755  
            __size_of_main 0040   __end_of_I2C_Master_Start 0576   __end_of_I2C_Master_Write 059C  
  __end_of_LCD_writeNibble 05B4                  stringcode 0003    __end_of_I2C_Master_Init 0653  
  __end_of_I2C_Master_Wait 058C    __end_of_I2C_Master_Stop 057F                   stringdir 0003  
                 stringtab 0003               ___aldiv@sign 0031  
