

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed May 12 16:50:20 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.20
    28                           ; Generated 12/02/2020 GMT
    29                           ; 
    30                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F887 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  001D                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  0081                     	;# 
    97  0085                     	;# 
    98  0086                     	;# 
    99  0087                     	;# 
   100  0088                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  008F                     	;# 
   106  0090                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  0105                     	;# 
   125  0107                     	;# 
   126  0108                     	;# 
   127  0109                     	;# 
   128  010C                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  010F                     	;# 
   133  0185                     	;# 
   134  0187                     	;# 
   135  0188                     	;# 
   136  0189                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  008F                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0093                     	;# 
   189  0093                     	;# 
   190  0094                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0098                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  009F                     	;# 
   202  0105                     	;# 
   203  0107                     	;# 
   204  0108                     	;# 
   205  0109                     	;# 
   206  010C                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  010F                     	;# 
   211  0185                     	;# 
   212  0187                     	;# 
   213  0188                     	;# 
   214  0189                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  0000                     	;# 
   218  0001                     	;# 
   219  0002                     	;# 
   220  0003                     	;# 
   221  0004                     	;# 
   222  0005                     	;# 
   223  0006                     	;# 
   224  0007                     	;# 
   225  0008                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000D                     	;# 
   231  000E                     	;# 
   232  000E                     	;# 
   233  000F                     	;# 
   234  0010                     	;# 
   235  0011                     	;# 
   236  0012                     	;# 
   237  0013                     	;# 
   238  0014                     	;# 
   239  0015                     	;# 
   240  0015                     	;# 
   241  0016                     	;# 
   242  0017                     	;# 
   243  0018                     	;# 
   244  0019                     	;# 
   245  001A                     	;# 
   246  001B                     	;# 
   247  001B                     	;# 
   248  001C                     	;# 
   249  001D                     	;# 
   250  001E                     	;# 
   251  001F                     	;# 
   252  0081                     	;# 
   253  0085                     	;# 
   254  0086                     	;# 
   255  0087                     	;# 
   256  0088                     	;# 
   257  0089                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  008F                     	;# 
   262  0090                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0093                     	;# 
   268  0094                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0097                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009A                     	;# 
   275  009B                     	;# 
   276  009C                     	;# 
   277  009D                     	;# 
   278  009E                     	;# 
   279  009F                     	;# 
   280  0105                     	;# 
   281  0107                     	;# 
   282  0108                     	;# 
   283  0109                     	;# 
   284  010C                     	;# 
   285  010C                     	;# 
   286  010D                     	;# 
   287  010E                     	;# 
   288  010F                     	;# 
   289  0185                     	;# 
   290  0187                     	;# 
   291  0188                     	;# 
   292  0189                     	;# 
   293  018C                     	;# 
   294  018D                     	;# 
   295  0000                     	;# 
   296  0001                     	;# 
   297  0002                     	;# 
   298  0003                     	;# 
   299  0004                     	;# 
   300  0005                     	;# 
   301  0006                     	;# 
   302  0007                     	;# 
   303  0008                     	;# 
   304  0009                     	;# 
   305  000A                     	;# 
   306  000B                     	;# 
   307  000C                     	;# 
   308  000D                     	;# 
   309  000E                     	;# 
   310  000E                     	;# 
   311  000F                     	;# 
   312  0010                     	;# 
   313  0011                     	;# 
   314  0012                     	;# 
   315  0013                     	;# 
   316  0014                     	;# 
   317  0015                     	;# 
   318  0015                     	;# 
   319  0016                     	;# 
   320  0017                     	;# 
   321  0018                     	;# 
   322  0019                     	;# 
   323  001A                     	;# 
   324  001B                     	;# 
   325  001B                     	;# 
   326  001C                     	;# 
   327  001D                     	;# 
   328  001E                     	;# 
   329  001F                     	;# 
   330  0081                     	;# 
   331  0085                     	;# 
   332  0086                     	;# 
   333  0087                     	;# 
   334  0088                     	;# 
   335  0089                     	;# 
   336  008C                     	;# 
   337  008D                     	;# 
   338  008E                     	;# 
   339  008F                     	;# 
   340  0090                     	;# 
   341  0091                     	;# 
   342  0092                     	;# 
   343  0093                     	;# 
   344  0093                     	;# 
   345  0093                     	;# 
   346  0094                     	;# 
   347  0095                     	;# 
   348  0096                     	;# 
   349  0097                     	;# 
   350  0098                     	;# 
   351  0099                     	;# 
   352  009A                     	;# 
   353  009B                     	;# 
   354  009C                     	;# 
   355  009D                     	;# 
   356  009E                     	;# 
   357  009F                     	;# 
   358  0105                     	;# 
   359  0107                     	;# 
   360  0108                     	;# 
   361  0109                     	;# 
   362  010C                     	;# 
   363  010C                     	;# 
   364  010D                     	;# 
   365  010E                     	;# 
   366  010F                     	;# 
   367  0185                     	;# 
   368  0187                     	;# 
   369  0188                     	;# 
   370  0189                     	;# 
   371  018C                     	;# 
   372  018D                     	;# 
   373                           
   374                           	psect	strings
   375  0003                     __pstrings:
   376  0003                     stringtab:
   377  0003                     __stringtab:
   378                           
   379                           ;	String table - string pointers are 1 byte each
   380  0003  1BFF               	btfsc	btemp+1,7
   381  0004  280D               	ljmp	stringcode
   382  0005  1383               	bcf	3,7
   383  0006  187F               	btfsc	btemp+1,0
   384  0007  1783               	bsf	3,7
   385  0008  0800               	movf	0,w
   386  0009  0A84               	incf	4,f
   387  000A  1903               	skipnz
   388  000B  0AFF               	incf	btemp+1,f
   389  000C  0008               	return
   390  000D                     stringcode:
   391  000D                     stringdir:
   392  000D  3000               	movlw	high stringdir
   393  000E  008A               	movwf	10
   394  000F  0804               	movf	4,w
   395  0010  0A84               	incf	4,f
   396  0011  0782               	addwf	2,f
   397  0012                     __stringbase:
   398  0012  3400               	retlw	0
   399  0013                     __end_of__stringtab:
   400  0013                     _dpowers:
   401  0013  3401               	retlw	1
   402  0014  3400               	retlw	0
   403  0015  340A               	retlw	10
   404  0016  3400               	retlw	0
   405  0017  3464               	retlw	100
   406  0018  3400               	retlw	0
   407  0019  34E8               	retlw	232
   408  001A  3403               	retlw	3
   409  001B  3410               	retlw	16
   410  001C  3427               	retlw	39
   411  001D                     __end_of_dpowers:
   412  0008                     _PORTD	set	8
   413  0008                     _PORTDbits	set	8
   414  0013                     _SSPBUF	set	19
   415  0014                     _SSPCON	set	20
   416  003E                     _RC6	set	62
   417  003F                     _RC7	set	63
   418  0094                     _SSPSTATbits	set	148
   419  0094                     _SSPSTAT	set	148
   420  0088                     _TRISD	set	136
   421  043B                     _TRISC3	set	1083
   422  043D                     _TRISC5	set	1085
   423  043C                     _TRISC4	set	1084
   424  043F                     _TRISC7	set	1087
   425  043E                     _TRISC6	set	1086
   426  001D                     STR_2:
   427  001D  3454               	retlw	84	;'T'
   428  001E  3465               	retlw	101	;'e'
   429  001F  346D               	retlw	109	;'m'
   430  0020  3470               	retlw	112	;'p'
   431  0021  3465               	retlw	101	;'e'
   432  0022  3472               	retlw	114	;'r'
   433  0023  3461               	retlw	97	;'a'
   434  0024  3474               	retlw	116	;'t'
   435  0025  3475               	retlw	117	;'u'
   436  0026  3472               	retlw	114	;'r'
   437  0027  3465               	retlw	101	;'e'
   438  0028  343A               	retlw	58	;':'
   439  0029  3420               	retlw	32	;' '
   440  002A  3425               	retlw	37	;'%'
   441  002B  3464               	retlw	100	;'d'
   442  002C  3420               	retlw	32	;' '
   443  002D  3400               	retlw	0
   444  002E                     STR_1:
   445  002E  3444               	retlw	68	;'D'
   446  002F  3465               	retlw	101	;'e'
   447  0030  3476               	retlw	118	;'v'
   448  0031  3469               	retlw	105	;'i'
   449  0032  346F               	retlw	111	;'o'
   450  0033  3474               	retlw	116	;'t'
   451  0034  342E               	retlw	46	;'.'
   452  0035  3476               	retlw	118	;'v'
   453  0036  346E               	retlw	110	;'n'
   454  0037  3400               	retlw	0
   455                           
   456                           	psect	cinit
   457  07F0                     start_initialization:	
   458                           ; #config settings
   459                           
   460  07F0                     __initialization:
   461                           
   462                           ; Clear objects allocated to BITBANK0
   463  07F0  1283               	bcf	3,5	;RP0=0, select bank0
   464  07F1  1303               	bcf	3,6	;RP1=0, select bank0
   465  07F2  01D5               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   466                           
   467                           ; Clear objects allocated to BANK0
   468  07F3  1383               	bcf	3,7	;select IRP bank0
   469  07F4  3020               	movlw	low __pbssBANK0
   470  07F5  0084               	movwf	4
   471  07F6  3045               	movlw	low (__pbssBANK0+37)
   472  07F7  120A  118A  2477  120A  118A  	fcall	clear_ram0
   473  07FC                     end_of_initialization:	
   474                           ;End of C runtime variable initialization code
   475                           
   476  07FC                     __end_of__initialization:
   477  07FC  0183               	clrf	3
   478  07FD  120A  118A  2E1B   	ljmp	_main	;jump to C main() function
   479                           
   480                           	psect	bitbssBANK0
   481  02A8                     __pbitbssBANK0:
   482  02A8                     _status:
   483  02A8                     	ds	1
   484                           
   485                           	psect	bssBANK0
   486  0020                     __pbssBANK0:
   487  0020                     _num:
   488  0020                     	ds	20
   489  0034                     _c:
   490  0034                     	ds	1
   491  0035                     _buffer:
   492  0035                     	ds	16
   493                           
   494                           	psect	clrtext
   495  0477                     clear_ram0:	
   496                           ;	Called with FSR containing the base address, and
   497                           ;	W with the last address+1
   498                           
   499  0477  0064               	clrwdt	;clear the watchdog before getting into this loop
   500  0478                     clrloop0:
   501  0478  0180               	clrf	0	;clear RAM location pointed to by FSR
   502  0479  0A84               	incf	4,f	;increment pointer
   503  047A  0604               	xorwf	4,w	;XOR with final address
   504  047B  1903               	btfsc	3,2	;have we reached the end yet?
   505  047C  3400               	retlw	0	;all done for this memory range, return
   506  047D  0604               	xorwf	4,w	;XOR again to restore value
   507  047E  2C78               	goto	clrloop0	;do the next byte
   508                           
   509                           	psect	cstackCOMMON
   510  0070                     __pcstackCOMMON:
   511  0070                     ?_SPI_transfer:
   512  0070                     ??_SPI_transfer:	
   513                           ; 1 bytes @ 0x0
   514                           
   515  0070                     ?_lcd_init:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0070                     ?_SPI_init:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0070                     ?_lcd_com:	
   522                           ; 1 bytes @ 0x0
   523                           
   524  0070                     ?_main:	
   525                           ; 1 bytes @ 0x0
   526                           
   527  0070                     ?_delay:	
   528                           ; 1 bytes @ 0x0
   529                           
   530  0070                     ?_lcd_init_write:	
   531                           ; 1 bytes @ 0x0
   532                           
   533  0070                     ?_lcd_data:	
   534                           ; 1 bytes @ 0x0
   535                           
   536  0070                     ?___lwdiv:	
   537                           ; 1 bytes @ 0x0
   538                           
   539  0070                     SPI_init@sample:	
   540                           ; 2 bytes @ 0x0
   541                           
   542  0070                     SPI_transfer@data:	
   543                           ; 1 bytes @ 0x0
   544                           
   545  0070                     delay@j:	
   546                           ; 1 bytes @ 0x0
   547                           
   548  0070                     ___lwdiv@divisor:	
   549                           ; 2 bytes @ 0x0
   550                           
   551                           
   552                           ; 2 bytes @ 0x0
   553  0070                     	ds	1
   554  0071                     ?_readTemp:
   555  0071                     SPI_init@idle:	
   556                           ; 2 bytes @ 0x1
   557                           
   558                           
   559                           ; 1 bytes @ 0x1
   560  0071                     	ds	1
   561  0072                     ??_delay:
   562  0072                     SPI_init@edge:	
   563                           ; 1 bytes @ 0x2
   564                           
   565  0072                     delay@i:	
   566                           ; 1 bytes @ 0x2
   567                           
   568  0072                     ___lwdiv@dividend:	
   569                           ; 2 bytes @ 0x2
   570                           
   571                           
   572                           ; 2 bytes @ 0x2
   573  0072                     	ds	1
   574  0073                     ??_SPI_init:
   575  0073                     ??_readTemp:	
   576                           ; 1 bytes @ 0x3
   577                           
   578  0073                     SPI_init@mode:	
   579                           ; 1 bytes @ 0x3
   580                           
   581                           
   582                           ; 1 bytes @ 0x3
   583  0073                     	ds	1
   584  0074                     ??_lcd_com:
   585  0074                     ??_lcd_init_write:	
   586                           ; 1 bytes @ 0x4
   587                           
   588  0074                     ??___lwdiv:	
   589                           ; 1 bytes @ 0x4
   590                           
   591  0074                     lcd_init_write@a:	
   592                           ; 1 bytes @ 0x4
   593                           
   594                           
   595                           ; 1 bytes @ 0x4
   596  0074                     	ds	1
   597  0075                     ___lwdiv@quotient:
   598                           
   599                           ; 2 bytes @ 0x5
   600  0075                     	ds	1
   601  0076                     lcd_com@a:
   602                           
   603                           ; 1 bytes @ 0x6
   604  0076                     	ds	1
   605  0077                     lcd_com@temp:
   606  0077                     ___lwdiv@counter:	
   607                           ; 1 bytes @ 0x7
   608                           
   609  0077                     readTemp@data:	
   610                           ; 1 bytes @ 0x7
   611                           
   612                           
   613                           ; 2 bytes @ 0x7
   614  0077                     	ds	1
   615  0078                     ??_lcd_init:
   616  0078                     ??_lcd_data:	
   617                           ; 1 bytes @ 0x8
   618                           
   619  0078                     ?___lwmod:	
   620                           ; 1 bytes @ 0x8
   621                           
   622  0078                     lcd_data@a:	
   623                           ; 2 bytes @ 0x8
   624                           
   625  0078                     ___lwmod@divisor:	
   626                           ; 1 bytes @ 0x8
   627                           
   628                           
   629                           ; 2 bytes @ 0x8
   630  0078                     	ds	1
   631  0079                     ?_lcd_puts:
   632  0079                     readTemp@high:	
   633                           ; 1 bytes @ 0x9
   634                           
   635  0079                     lcd_puts@str:	
   636                           ; 1 bytes @ 0x9
   637                           
   638                           
   639                           ; 2 bytes @ 0x9
   640  0079                     	ds	1
   641  007A                     readTemp@low:
   642  007A                     ___lwmod@dividend:	
   643                           ; 1 bytes @ 0xA
   644                           
   645                           
   646                           ; 2 bytes @ 0xA
   647  007A                     	ds	1
   648  007B                     ??_lcd_puts:
   649  007B                     lcd_puts@i:	
   650                           ; 1 bytes @ 0xB
   651                           
   652                           
   653                           ; 2 bytes @ 0xB
   654  007B                     	ds	1
   655  007C                     ??___lwmod:
   656                           
   657                           ; 1 bytes @ 0xC
   658  007C                     	ds	1
   659  007D                     ___lwmod@counter:
   660                           
   661                           ; 1 bytes @ 0xD
   662  007D                     	ds	1
   663                           
   664                           	psect	cstackBANK0
   665  0045                     __pcstackBANK0:
   666  0045                     ?_sprintf:
   667  0045                     sprintf@f:	
   668                           ; 2 bytes @ 0x0
   669                           
   670                           
   671                           ; 1 bytes @ 0x0
   672  0045                     	ds	3
   673  0048                     ??_sprintf:
   674                           
   675                           ; 1 bytes @ 0x3
   676  0048                     	ds	3
   677  004B                     sprintf@ap:
   678                           
   679                           ; 1 bytes @ 0x6
   680  004B                     	ds	1
   681  004C                     sprintf@flag:
   682                           
   683                           ; 1 bytes @ 0x7
   684  004C                     	ds	1
   685  004D                     sprintf@prec:
   686                           
   687                           ; 1 bytes @ 0x8
   688  004D                     	ds	1
   689  004E                     sprintf@val:
   690                           
   691                           ; 2 bytes @ 0x9
   692  004E                     	ds	2
   693  0050                     sprintf@sp:
   694                           
   695                           ; 1 bytes @ 0xB
   696  0050                     	ds	1
   697  0051                     sprintf@c:
   698                           
   699                           ; 1 bytes @ 0xC
   700  0051                     	ds	1
   701  0052                     ??_main:
   702                           
   703                           ; 1 bytes @ 0xD
   704  0052                     	ds	1
   705  0053                     main@temp:
   706                           
   707                           ; 2 bytes @ 0xE
   708  0053                     	ds	2
   709                           
   710                           	psect	maintext
   711  061B                     __pmaintext:	
   712 ;;
   713 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   714 ;;
   715 ;; *************** function _main *****************
   716 ;; Defined at:
   717 ;;		line 51 in file "main.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;		None
   720 ;; Auto vars:     Size  Location     Type
   721 ;;  temp            2   14[BANK0 ] int 
   722 ;; Return value:  Size  Location     Type
   723 ;;                  1    wreg      void 
   724 ;; Registers used:
   725 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   726 ;; Tracked objects:
   727 ;;		On entry : B00/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   731 ;;      Params:         0       0       0       0       0
   732 ;;      Locals:         0       2       0       0       0
   733 ;;      Temps:          0       1       0       0       0
   734 ;;      Totals:         0       3       0       0       0
   735 ;;Total ram usage:        3 bytes
   736 ;; Hardware stack levels required when called:    4
   737 ;; This function calls:
   738 ;;		_SPI_init
   739 ;;		_lcd_com
   740 ;;		_lcd_init
   741 ;;		_lcd_puts
   742 ;;		_readTemp
   743 ;;		_sprintf
   744 ;; This function is called by:
   745 ;;		Startup code after reset
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           
   750                           ;psect for function _main
   751  061B                     _main:
   752  061B                     l1273:	
   753                           ;incstack = 0
   754                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   755                           
   756                           
   757                           ;main.c: 52:     TRISD = 0;
   758  061B  1683               	bsf	3,5	;RP0=1, select bank1
   759  061C  1303               	bcf	3,6	;RP1=0, select bank1
   760  061D  0188               	clrf	8	;volatile
   761  061E                     l1275:
   762                           
   763                           ;main.c: 53:     TRISC6 = TRISC7 = 0;
   764  061E  1387               	bcf	7,7	;volatile
   765  061F  1307               	bcf	7,6	;volatile
   766  0620                     l1277:
   767                           
   768                           ;main.c: 54:     lcd_init();
   769  0620  120A  118A  2671  120A  118A  	fcall	_lcd_init
   770  0625                     l1279:
   771                           
   772                           ;main.c: 55:     SPI_init(SPI_MASTER_OSC_DIV4, DATA_SAMPLE_END, CLOCK_IDLE_LOW, SPI_IDLE
      +                          _TO_ACTIVE);
   773  0625  3080               	movlw	128
   774  0626  1283               	bcf	3,5	;RP0=0, select bank0
   775  0627  1303               	bcf	3,6	;RP1=0, select bank0
   776  0628  00D2               	movwf	??_main
   777  0629  0852               	movf	??_main,w
   778  062A  00F0               	movwf	SPI_init@sample
   779  062B  01F1               	clrf	SPI_init@idle
   780  062C  01F2               	clrf	SPI_init@edge
   781  062D  3020               	movlw	32
   782  062E  120A  118A  24C5  120A  118A  	fcall	_SPI_init
   783  0633                     l1281:
   784                           
   785                           ;main.c: 56:     lcd_com(0x80);
   786  0633  3080               	movlw	128
   787  0634  120A  118A  25CC  120A  118A  	fcall	_lcd_com
   788  0639                     l1283:
   789                           
   790                           ;main.c: 57:     lcd_puts("Deviot.vn");
   791  0639  301C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   792  063A  00F9               	movwf	lcd_puts@str
   793  063B  3080               	movlw	128
   794  063C  00FA               	movwf	lcd_puts@str+1
   795  063D  120A  118A  24DC  120A  118A  	fcall	_lcd_puts
   796  0642                     l1285:
   797                           
   798                           ;main.c: 59:     {;main.c: 60:         RC6 = 1;
   799  0642  1283               	bcf	3,5	;RP0=0, select bank0
   800  0643  1303               	bcf	3,6	;RP1=0, select bank0
   801  0644  1707               	bsf	7,6	;volatile
   802  0645                     l1287:
   803                           
   804                           ;main.c: 61:         int temp = readTemp();
   805  0645  120A  118A  2544  120A  118A  	fcall	_readTemp
   806  064A  0872               	movf	?_readTemp+1,w
   807  064B  1283               	bcf	3,5	;RP0=0, select bank0
   808  064C  1303               	bcf	3,6	;RP1=0, select bank0
   809  064D  00D4               	movwf	main@temp+1
   810  064E  0871               	movf	?_readTemp,w
   811  064F  00D3               	movwf	main@temp
   812  0650                     l1289:
   813                           
   814                           ;main.c: 62:         sprintf(buffer, "Temperature: %d ", temp);
   815  0650  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   816  0651  00D2               	movwf	??_main
   817  0652  0852               	movf	??_main,w
   818  0653  00C5               	movwf	sprintf@f
   819  0654  0854               	movf	main@temp+1,w
   820  0655  00C7               	movwf	?_sprintf+2
   821  0656  0853               	movf	main@temp,w
   822  0657  00C6               	movwf	?_sprintf+1
   823  0658  3035               	movlw	(low (_buffer| 0))& (0+255)
   824  0659  120A  118A  2708  120A  118A  	fcall	_sprintf
   825  065E                     l1291:
   826                           
   827                           ;main.c: 63:         lcd_com(0xC0);
   828  065E  30C0               	movlw	192
   829  065F  120A  118A  25CC  120A  118A  	fcall	_lcd_com
   830  0664                     l1293:
   831                           
   832                           ;main.c: 64:         lcd_puts(buffer);
   833  0664  3035               	movlw	(low (_buffer| 0))& (0+255)
   834  0665  00F9               	movwf	lcd_puts@str
   835  0666  3000               	movlw	0
   836  0667  00FA               	movwf	lcd_puts@str+1
   837  0668  120A  118A  24DC  120A  118A  	fcall	_lcd_puts
   838  066D  2E42               	goto	l1285
   839  066E  120A  118A  2800   	ljmp	start
   840  0671                     __end_of_main:
   841                           
   842                           	psect	text1
   843  0708                     __ptext1:	
   844 ;; *************** function _sprintf *****************
   845 ;; Defined at:
   846 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;  sp              1    wreg     PTR unsigned char 
   849 ;;		 -> buffer(16), 
   850 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   851 ;;		 -> STR_2(17), 
   852 ;; Auto vars:     Size  Location     Type
   853 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   854 ;;		 -> buffer(16), 
   855 ;;  tmpval          4    0        struct .
   856 ;;  val             2    9[BANK0 ] unsigned int 
   857 ;;  cp              2    0        PTR const unsigned char 
   858 ;;  len             2    0        unsigned int 
   859 ;;  c               1   12[BANK0 ] unsigned char 
   860 ;;  prec            1    8[BANK0 ] char 
   861 ;;  flag            1    7[BANK0 ] unsigned char 
   862 ;;  ap              1    6[BANK0 ] PTR void [1]
   863 ;;		 -> ?_sprintf(2), 
   864 ;; Return value:  Size  Location     Type
   865 ;;                  2    0[BANK0 ] int 
   866 ;; Registers used:
   867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   873 ;;      Params:         0       3       0       0       0
   874 ;;      Locals:         0       7       0       0       0
   875 ;;      Temps:          0       3       0       0       0
   876 ;;      Totals:         0      13       0       0       0
   877 ;;Total ram usage:       13 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; Hardware stack levels required when called:    1
   880 ;; This function calls:
   881 ;;		___lwdiv
   882 ;;		___lwmod
   883 ;; This function is called by:
   884 ;;		_main
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           
   889                           ;psect for function _sprintf
   890  0708                     _sprintf:
   891                           
   892                           ;incstack = 0
   893                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   894                           ;sprintf@sp stored from wreg
   895  0708  1283               	bcf	3,5	;RP0=0, select bank0
   896  0709  1303               	bcf	3,6	;RP1=0, select bank0
   897  070A  00D0               	movwf	sprintf@sp
   898  070B                     l1211:
   899                           
   900                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   901  070B  3046               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   902  070C  00C8               	movwf	??_sprintf
   903  070D  0848               	movf	??_sprintf,w
   904  070E  00CB               	movwf	sprintf@ap
   905                           
   906                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   907  070F  2FD9               	goto	l1263
   908  0710                     l1213:
   909                           
   910                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   911  0710  3025               	movlw	37
   912  0711  0651               	xorwf	sprintf@c,w
   913  0712  1903               	btfsc	3,2
   914  0713  2F15               	goto	u541
   915  0714  2F16               	goto	u540
   916  0715                     u541:
   917  0715  2F22               	goto	l1219
   918  0716                     u540:
   919  0716                     l1215:
   920                           
   921                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   922  0716  0851               	movf	sprintf@c,w
   923  0717  00C8               	movwf	??_sprintf
   924  0718  0850               	movf	sprintf@sp,w
   925  0719  0084               	movwf	4
   926  071A  0848               	movf	??_sprintf,w
   927  071B  1383               	bcf	3,7	;select IRP bank0
   928  071C  0080               	movwf	0
   929  071D                     l1217:
   930  071D  3001               	movlw	1
   931  071E  00C8               	movwf	??_sprintf
   932  071F  0848               	movf	??_sprintf,w
   933  0720  07D0               	addwf	sprintf@sp,f
   934                           
   935                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
   936  0721  2FD9               	goto	l1263
   937  0722                     l1219:
   938                           
   939                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   940  0722  01CC               	clrf	sprintf@flag
   941  0723                     l1223:	
   942                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   943                           
   944  0723  3001               	movlw	1
   945  0724  07C5               	addwf	sprintf@f,f
   946  0725  30FF               	movlw	-1
   947  0726  0745               	addwf	sprintf@f,w
   948  0727  0084               	movwf	4
   949  0728  120A  118A  200D  120A  118A  	fcall	stringdir
   950  072D  00D1               	movwf	sprintf@c
   951  072E  00C8               	movwf	??_sprintf
   952  072F  01C9               	clrf	??_sprintf+1
   953                           
   954                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   955                           ; Switch size 1, requested type "simple"
   956                           ; Number of cases is 1, Range of values is 0 to 0
   957                           ; switch strategies available:
   958                           ; Name         Instructions Cycles
   959                           ; simple_byte            4     3 (average)
   960                           ; direct_byte           11     8 (fixed)
   961                           ; jumptable            260     6 (fixed)
   962                           ;	Chosen strategy is simple_byte
   963  0730  0849               	movf	??_sprintf+1,w
   964  0731  3A00               	xorlw	0	; case 0
   965  0732  1903               	skipnz
   966  0733  2F35               	goto	l1397
   967  0734  2FD9               	goto	l1263
   968  0735                     l1397:
   969                           
   970                           ; Switch size 1, requested type "simple"
   971                           ; Number of cases is 3, Range of values is 0 to 105
   972                           ; switch strategies available:
   973                           ; Name         Instructions Cycles
   974                           ; simple_byte           10     6 (average)
   975                           ; jumptable            260     6 (fixed)
   976                           ;	Chosen strategy is simple_byte
   977  0735  0848               	movf	??_sprintf,w
   978  0736  3A00               	xorlw	0	; case 0
   979  0737  1903               	skipnz
   980  0738  2FEB               	goto	l1265
   981  0739  3A64               	xorlw	100	; case 100
   982  073A  1903               	skipnz
   983  073B  2F40               	goto	l1225
   984  073C  3A0D               	xorlw	13	; case 105
   985  073D  1903               	skipnz
   986  073E  2F40               	goto	l1225
   987  073F  2FD9               	goto	l1263
   988  0740                     l1225:
   989                           
   990                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
   991  0740  084B               	movf	sprintf@ap,w
   992  0741  0084               	movwf	4
   993  0742  1383               	bcf	3,7	;select IRP bank0
   994  0743  0800               	movf	0,w
   995  0744  00CE               	movwf	sprintf@val
   996  0745  0A84               	incf	4,f
   997  0746  0800               	movf	0,w
   998  0747  00CF               	movwf	sprintf@val+1
   999  0748                     l1227:
  1000  0748  3002               	movlw	2
  1001  0749  00C8               	movwf	??_sprintf
  1002  074A  0848               	movf	??_sprintf,w
  1003  074B  07CB               	addwf	sprintf@ap,f
  1004  074C                     l1229:
  1005                           
  1006                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1007  074C  1FCF               	btfss	sprintf@val+1,7
  1008  074D  2F4F               	goto	u551
  1009  074E  2F50               	goto	u550
  1010  074F                     u551:
  1011  074F  2F59               	goto	l1235
  1012  0750                     u550:
  1013  0750                     l1231:
  1014                           
  1015                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1016  0750  3003               	movlw	3
  1017  0751  00C8               	movwf	??_sprintf
  1018  0752  0848               	movf	??_sprintf,w
  1019  0753  04CC               	iorwf	sprintf@flag,f
  1020  0754                     l1233:
  1021                           
  1022                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1023  0754  09CE               	comf	sprintf@val,f
  1024  0755  09CF               	comf	sprintf@val+1,f
  1025  0756  0ACE               	incf	sprintf@val,f
  1026  0757  1903               	skipnz
  1027  0758  0ACF               	incf	sprintf@val+1,f
  1028  0759                     l1235:
  1029                           
  1030                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1031  0759  01D1               	clrf	sprintf@c
  1032  075A  0AD1               	incf	sprintf@c,f
  1033  075B                     l1241:
  1034                           
  1035                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1036  075B  0851               	movf	sprintf@c,w
  1037  075C  00C8               	movwf	??_sprintf
  1038  075D  0748               	addwf	??_sprintf,w
  1039  075E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1040  075F  0084               	movwf	4
  1041  0760  120A  118A  200D  120A  118A  	fcall	stringdir
  1042  0765  00C9               	movwf	??_sprintf+1
  1043  0766  120A  118A  200D  120A  118A  	fcall	stringdir
  1044  076B  00CA               	movwf	??_sprintf+2
  1045  076C  084A               	movf	??_sprintf+2,w
  1046  076D  024F               	subwf	sprintf@val+1,w
  1047  076E  1D03               	skipz
  1048  076F  2F72               	goto	u565
  1049  0770  0849               	movf	??_sprintf+1,w
  1050  0771  024E               	subwf	sprintf@val,w
  1051  0772                     u565:
  1052  0772  1803               	skipnc
  1053  0773  2F75               	goto	u561
  1054  0774  2F76               	goto	u560
  1055  0775                     u561:
  1056  0775  2F77               	goto	l1245
  1057  0776                     u560:
  1058  0776  2F81               	goto	l1247
  1059  0777                     l1245:
  1060  0777  3001               	movlw	1
  1061  0778  00C8               	movwf	??_sprintf
  1062  0779  0848               	movf	??_sprintf,w
  1063  077A  07D1               	addwf	sprintf@c,f
  1064  077B  3005               	movlw	5
  1065  077C  0651               	xorwf	sprintf@c,w
  1066  077D  1D03               	btfss	3,2
  1067  077E  2F80               	goto	u571
  1068  077F  2F81               	goto	u570
  1069  0780                     u571:
  1070  0780  2F5B               	goto	l1241
  1071  0781                     u570:
  1072  0781                     l1247:
  1073                           
  1074                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1075  0781  084C               	movf	sprintf@flag,w
  1076  0782  3903               	andlw	3
  1077  0783  1903               	btfsc	3,2
  1078  0784  2F86               	goto	u581
  1079  0785  2F87               	goto	u580
  1080  0786                     u581:
  1081  0786  2F92               	goto	l1253
  1082  0787                     u580:
  1083  0787                     l1249:
  1084                           
  1085                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1086  0787  302D               	movlw	45
  1087  0788  00C8               	movwf	??_sprintf
  1088  0789  0850               	movf	sprintf@sp,w
  1089  078A  0084               	movwf	4
  1090  078B  0848               	movf	??_sprintf,w
  1091  078C  1383               	bcf	3,7	;select IRP bank0
  1092  078D  0080               	movwf	0
  1093  078E                     l1251:
  1094  078E  3001               	movlw	1
  1095  078F  00C8               	movwf	??_sprintf
  1096  0790  0848               	movf	??_sprintf,w
  1097  0791  07D0               	addwf	sprintf@sp,f
  1098  0792                     l1253:
  1099                           
  1100                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1101  0792  0851               	movf	sprintf@c,w
  1102  0793  00C8               	movwf	??_sprintf
  1103  0794  0848               	movf	??_sprintf,w
  1104  0795  00CD               	movwf	sprintf@prec
  1105                           
  1106                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1107  0796  2FD0               	goto	l1261
  1108  0797                     l1255:
  1109                           
  1110                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1111  0797  300A               	movlw	10
  1112  0798  00F8               	movwf	___lwmod@divisor
  1113  0799  3000               	movlw	0
  1114  079A  00F9               	movwf	___lwmod@divisor+1
  1115  079B  084D               	movf	sprintf@prec,w
  1116  079C  00C8               	movwf	??_sprintf
  1117  079D  0748               	addwf	??_sprintf,w
  1118  079E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1119  079F  0084               	movwf	4
  1120  07A0  120A  118A  200D  120A  118A  	fcall	stringdir
  1121  07A5  00F0               	movwf	___lwdiv@divisor
  1122  07A6  120A  118A  200D  120A  118A  	fcall	stringdir
  1123  07AB  00F1               	movwf	___lwdiv@divisor+1
  1124  07AC  084F               	movf	sprintf@val+1,w
  1125  07AD  00F3               	movwf	___lwdiv@dividend+1
  1126  07AE  084E               	movf	sprintf@val,w
  1127  07AF  00F2               	movwf	___lwdiv@dividend
  1128  07B0  120A  118A  2588  120A  118A  	fcall	___lwdiv
  1129  07B5  0871               	movf	?___lwdiv+1,w
  1130  07B6  00FB               	movwf	___lwmod@dividend+1
  1131  07B7  0870               	movf	?___lwdiv,w
  1132  07B8  00FA               	movwf	___lwmod@dividend
  1133  07B9  120A  118A  250A  120A  118A  	fcall	___lwmod
  1134  07BE  0878               	movf	?___lwmod,w
  1135  07BF  3E30               	addlw	48
  1136  07C0  1283               	bcf	3,5	;RP0=0, select bank0
  1137  07C1  1303               	bcf	3,6	;RP1=0, select bank0
  1138  07C2  00C9               	movwf	??_sprintf+1
  1139  07C3  0849               	movf	??_sprintf+1,w
  1140  07C4  00D1               	movwf	sprintf@c
  1141  07C5                     l1257:
  1142                           
  1143                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1144  07C5  0851               	movf	sprintf@c,w
  1145  07C6  00C8               	movwf	??_sprintf
  1146  07C7  0850               	movf	sprintf@sp,w
  1147  07C8  0084               	movwf	4
  1148  07C9  0848               	movf	??_sprintf,w
  1149  07CA  1383               	bcf	3,7	;select IRP bank0
  1150  07CB  0080               	movwf	0
  1151  07CC                     l1259:
  1152  07CC  3001               	movlw	1
  1153  07CD  00C8               	movwf	??_sprintf
  1154  07CE  0848               	movf	??_sprintf,w
  1155  07CF  07D0               	addwf	sprintf@sp,f
  1156  07D0                     l1261:
  1157                           
  1158                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1159  07D0  30FF               	movlw	255
  1160  07D1  00C8               	movwf	??_sprintf
  1161  07D2  0848               	movf	??_sprintf,w
  1162  07D3  07CD               	addwf	sprintf@prec,f
  1163  07D4  0A4D               	incf	sprintf@prec,w
  1164  07D5  1D03               	btfss	3,2
  1165  07D6  2FD8               	goto	u591
  1166  07D7  2FD9               	goto	u590
  1167  07D8                     u591:
  1168  07D8  2F97               	goto	l1255
  1169  07D9                     u590:
  1170  07D9                     l1263:
  1171                           
  1172                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1173  07D9  3001               	movlw	1
  1174  07DA  07C5               	addwf	sprintf@f,f
  1175  07DB  30FF               	movlw	-1
  1176  07DC  0745               	addwf	sprintf@f,w
  1177  07DD  0084               	movwf	4
  1178  07DE  120A  118A  200D  120A  118A  	fcall	stringdir
  1179  07E3  00C8               	movwf	??_sprintf
  1180  07E4  0848               	movf	??_sprintf,w
  1181  07E5  00D1               	movwf	sprintf@c
  1182  07E6  0851               	movf	sprintf@c,w
  1183  07E7  1D03               	btfss	3,2
  1184  07E8  2FEA               	goto	u601
  1185  07E9  2FEB               	goto	u600
  1186  07EA                     u601:
  1187  07EA  2F10               	goto	l1213
  1188  07EB                     u600:
  1189  07EB                     l1265:
  1190                           
  1191                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1192  07EB  0850               	movf	sprintf@sp,w
  1193  07EC  0084               	movwf	4
  1194  07ED  1383               	bcf	3,7	;select IRP bank0
  1195  07EE  0180               	clrf	0
  1196  07EF                     l239:
  1197  07EF  0008               	return
  1198  07F0                     __end_of_sprintf:
  1199                           
  1200                           	psect	text2
  1201  050A                     __ptext2:	
  1202 ;; *************** function ___lwmod *****************
  1203 ;; Defined at:
  1204 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;  divisor         2    8[COMMON] unsigned int 
  1207 ;;  dividend        2   10[COMMON] unsigned int 
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;  counter         1   13[COMMON] unsigned char 
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  2    8[COMMON] unsigned int 
  1212 ;; Registers used:
  1213 ;;		wreg, status,2, status,0
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1219 ;;      Params:         4       0       0       0       0
  1220 ;;      Locals:         1       0       0       0       0
  1221 ;;      Temps:          1       0       0       0       0
  1222 ;;      Totals:         6       0       0       0       0
  1223 ;;Total ram usage:        6 bytes
  1224 ;; Hardware stack levels used:    1
  1225 ;; This function calls:
  1226 ;;		Nothing
  1227 ;; This function is called by:
  1228 ;;		_sprintf
  1229 ;;		_lcd_print_number
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233                           
  1234                           ;psect for function ___lwmod
  1235  050A                     ___lwmod:
  1236  050A                     l1155:	
  1237                           ;incstack = 0
  1238                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1239                           
  1240  050A  0878               	movf	___lwmod@divisor,w
  1241  050B  0479               	iorwf	___lwmod@divisor+1,w
  1242  050C  1903               	btfsc	3,2
  1243  050D  2D0F               	goto	u451
  1244  050E  2D10               	goto	u450
  1245  050F                     u451:
  1246  050F  2D3F               	goto	l1173
  1247  0510                     u450:
  1248  0510                     l1157:
  1249  0510  01FD               	clrf	___lwmod@counter
  1250  0511  0AFD               	incf	___lwmod@counter,f
  1251  0512  2D1E               	goto	l1163
  1252  0513                     l1159:
  1253  0513  3001               	movlw	1
  1254  0514                     u465:
  1255  0514  1003               	clrc
  1256  0515  0DF8               	rlf	___lwmod@divisor,f
  1257  0516  0DF9               	rlf	___lwmod@divisor+1,f
  1258  0517  3EFF               	addlw	-1
  1259  0518  1D03               	skipz
  1260  0519  2D14               	goto	u465
  1261  051A                     l1161:
  1262  051A  3001               	movlw	1
  1263  051B  00FC               	movwf	??___lwmod
  1264  051C  087C               	movf	??___lwmod,w
  1265  051D  07FD               	addwf	___lwmod@counter,f
  1266  051E                     l1163:
  1267  051E  1FF9               	btfss	___lwmod@divisor+1,7
  1268  051F  2D21               	goto	u471
  1269  0520  2D22               	goto	u470
  1270  0521                     u471:
  1271  0521  2D13               	goto	l1159
  1272  0522                     u470:
  1273  0522                     l1165:
  1274  0522  0879               	movf	___lwmod@divisor+1,w
  1275  0523  027B               	subwf	___lwmod@dividend+1,w
  1276  0524  1D03               	skipz
  1277  0525  2D28               	goto	u485
  1278  0526  0878               	movf	___lwmod@divisor,w
  1279  0527  027A               	subwf	___lwmod@dividend,w
  1280  0528                     u485:
  1281  0528  1C03               	skipc
  1282  0529  2D2B               	goto	u481
  1283  052A  2D2C               	goto	u480
  1284  052B                     u481:
  1285  052B  2D32               	goto	l1169
  1286  052C                     u480:
  1287  052C                     l1167:
  1288  052C  0878               	movf	___lwmod@divisor,w
  1289  052D  02FA               	subwf	___lwmod@dividend,f
  1290  052E  0879               	movf	___lwmod@divisor+1,w
  1291  052F  1C03               	skipc
  1292  0530  03FB               	decf	___lwmod@dividend+1,f
  1293  0531  02FB               	subwf	___lwmod@dividend+1,f
  1294  0532                     l1169:
  1295  0532  3001               	movlw	1
  1296  0533                     u495:
  1297  0533  1003               	clrc
  1298  0534  0CF9               	rrf	___lwmod@divisor+1,f
  1299  0535  0CF8               	rrf	___lwmod@divisor,f
  1300  0536  3EFF               	addlw	-1
  1301  0537  1D03               	skipz
  1302  0538  2D33               	goto	u495
  1303  0539                     l1171:
  1304  0539  3001               	movlw	1
  1305  053A  02FD               	subwf	___lwmod@counter,f
  1306  053B  1D03               	btfss	3,2
  1307  053C  2D3E               	goto	u501
  1308  053D  2D3F               	goto	u500
  1309  053E                     u501:
  1310  053E  2D22               	goto	l1165
  1311  053F                     u500:
  1312  053F                     l1173:
  1313  053F  087B               	movf	___lwmod@dividend+1,w
  1314  0540  00F9               	movwf	?___lwmod+1
  1315  0541  087A               	movf	___lwmod@dividend,w
  1316  0542  00F8               	movwf	?___lwmod
  1317  0543                     l525:
  1318  0543  0008               	return
  1319  0544                     __end_of___lwmod:
  1320                           
  1321                           	psect	text3
  1322  0588                     __ptext3:	
  1323 ;; *************** function ___lwdiv *****************
  1324 ;; Defined at:
  1325 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;  divisor         2    0[COMMON] unsigned int 
  1328 ;;  dividend        2    2[COMMON] unsigned int 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  quotient        2    5[COMMON] unsigned int 
  1331 ;;  counter         1    7[COMMON] unsigned char 
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  2    0[COMMON] unsigned int 
  1334 ;; Registers used:
  1335 ;;		wreg, status,2, status,0
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1341 ;;      Params:         4       0       0       0       0
  1342 ;;      Locals:         3       0       0       0       0
  1343 ;;      Temps:          1       0       0       0       0
  1344 ;;      Totals:         8       0       0       0       0
  1345 ;;Total ram usage:        8 bytes
  1346 ;; Hardware stack levels used:    1
  1347 ;; This function calls:
  1348 ;;		Nothing
  1349 ;; This function is called by:
  1350 ;;		_sprintf
  1351 ;;		_lcd_print_number
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           
  1356                           ;psect for function ___lwdiv
  1357  0588                     ___lwdiv:
  1358  0588                     l1129:	
  1359                           ;incstack = 0
  1360                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1361                           
  1362  0588  01F5               	clrf	___lwdiv@quotient
  1363  0589  01F6               	clrf	___lwdiv@quotient+1
  1364  058A                     l1131:
  1365  058A  0870               	movf	___lwdiv@divisor,w
  1366  058B  0471               	iorwf	___lwdiv@divisor+1,w
  1367  058C  1903               	btfsc	3,2
  1368  058D  2D8F               	goto	u381
  1369  058E  2D90               	goto	u380
  1370  058F                     u381:
  1371  058F  2DC7               	goto	l1151
  1372  0590                     u380:
  1373  0590                     l1133:
  1374  0590  01F7               	clrf	___lwdiv@counter
  1375  0591  0AF7               	incf	___lwdiv@counter,f
  1376  0592  2D9E               	goto	l1139
  1377  0593                     l1135:
  1378  0593  3001               	movlw	1
  1379  0594                     u395:
  1380  0594  1003               	clrc
  1381  0595  0DF0               	rlf	___lwdiv@divisor,f
  1382  0596  0DF1               	rlf	___lwdiv@divisor+1,f
  1383  0597  3EFF               	addlw	-1
  1384  0598  1D03               	skipz
  1385  0599  2D94               	goto	u395
  1386  059A                     l1137:
  1387  059A  3001               	movlw	1
  1388  059B  00F4               	movwf	??___lwdiv
  1389  059C  0874               	movf	??___lwdiv,w
  1390  059D  07F7               	addwf	___lwdiv@counter,f
  1391  059E                     l1139:
  1392  059E  1FF1               	btfss	___lwdiv@divisor+1,7
  1393  059F  2DA1               	goto	u401
  1394  05A0  2DA2               	goto	u400
  1395  05A1                     u401:
  1396  05A1  2D93               	goto	l1135
  1397  05A2                     u400:
  1398  05A2                     l1141:
  1399  05A2  3001               	movlw	1
  1400  05A3                     u415:
  1401  05A3  1003               	clrc
  1402  05A4  0DF5               	rlf	___lwdiv@quotient,f
  1403  05A5  0DF6               	rlf	___lwdiv@quotient+1,f
  1404  05A6  3EFF               	addlw	-1
  1405  05A7  1D03               	skipz
  1406  05A8  2DA3               	goto	u415
  1407  05A9  0871               	movf	___lwdiv@divisor+1,w
  1408  05AA  0273               	subwf	___lwdiv@dividend+1,w
  1409  05AB  1D03               	skipz
  1410  05AC  2DAF               	goto	u425
  1411  05AD  0870               	movf	___lwdiv@divisor,w
  1412  05AE  0272               	subwf	___lwdiv@dividend,w
  1413  05AF                     u425:
  1414  05AF  1C03               	skipc
  1415  05B0  2DB2               	goto	u421
  1416  05B1  2DB3               	goto	u420
  1417  05B2                     u421:
  1418  05B2  2DBA               	goto	l1147
  1419  05B3                     u420:
  1420  05B3                     l1143:
  1421  05B3  0870               	movf	___lwdiv@divisor,w
  1422  05B4  02F2               	subwf	___lwdiv@dividend,f
  1423  05B5  0871               	movf	___lwdiv@divisor+1,w
  1424  05B6  1C03               	skipc
  1425  05B7  03F3               	decf	___lwdiv@dividend+1,f
  1426  05B8  02F3               	subwf	___lwdiv@dividend+1,f
  1427  05B9                     l1145:
  1428  05B9  1475               	bsf	___lwdiv@quotient,0
  1429  05BA                     l1147:
  1430  05BA  3001               	movlw	1
  1431  05BB                     u435:
  1432  05BB  1003               	clrc
  1433  05BC  0CF1               	rrf	___lwdiv@divisor+1,f
  1434  05BD  0CF0               	rrf	___lwdiv@divisor,f
  1435  05BE  3EFF               	addlw	-1
  1436  05BF  1D03               	skipz
  1437  05C0  2DBB               	goto	u435
  1438  05C1                     l1149:
  1439  05C1  3001               	movlw	1
  1440  05C2  02F7               	subwf	___lwdiv@counter,f
  1441  05C3  1D03               	btfss	3,2
  1442  05C4  2DC6               	goto	u441
  1443  05C5  2DC7               	goto	u440
  1444  05C6                     u441:
  1445  05C6  2DA2               	goto	l1141
  1446  05C7                     u440:
  1447  05C7                     l1151:
  1448  05C7  0876               	movf	___lwdiv@quotient+1,w
  1449  05C8  00F1               	movwf	?___lwdiv+1
  1450  05C9  0875               	movf	___lwdiv@quotient,w
  1451  05CA  00F0               	movwf	?___lwdiv
  1452  05CB                     l515:
  1453  05CB  0008               	return
  1454  05CC                     __end_of___lwdiv:
  1455                           
  1456                           	psect	text4
  1457  0544                     __ptext4:	
  1458 ;; *************** function _readTemp *****************
  1459 ;; Defined at:
  1460 ;;		line 39 in file "main.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;		None
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  data            2    7[COMMON] int 
  1465 ;;  low             1   10[COMMON] unsigned char 
  1466 ;;  high            1    9[COMMON] unsigned char 
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  2    1[COMMON] int 
  1469 ;; Registers used:
  1470 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1476 ;;      Params:         2       0       0       0       0
  1477 ;;      Locals:         4       0       0       0       0
  1478 ;;      Temps:          4       0       0       0       0
  1479 ;;      Totals:        10       0       0       0       0
  1480 ;;Total ram usage:       10 bytes
  1481 ;; Hardware stack levels used:    1
  1482 ;; Hardware stack levels required when called:    1
  1483 ;; This function calls:
  1484 ;;		_SPI_transfer
  1485 ;; This function is called by:
  1486 ;;		_main
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           
  1491                           ;psect for function _readTemp
  1492  0544                     _readTemp:
  1493  0544                     l1177:	
  1494                           ;incstack = 0
  1495                           ; Regs used in _readTemp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1496                           
  1497                           
  1498                           ;main.c: 40:     int data;;main.c: 41:     char high, low;;main.c: 42:     RC7 = 0;
  1499  0544  1283               	bcf	3,5	;RP0=0, select bank0
  1500  0545  1303               	bcf	3,6	;RP1=0, select bank0
  1501  0546  1387               	bcf	7,7	;volatile
  1502  0547                     l1179:
  1503                           
  1504                           ;main.c: 43:     _delay((unsigned long)((1)*(8000000/4000.0)));
  1505  0547  3003               	movlw	3
  1506  0548  00F4               	movwf	??_readTemp+1
  1507  0549  3097               	movlw	151
  1508  054A  00F3               	movwf	??_readTemp
  1509  054B                     u677:
  1510  054B  0BF3               	decfsz	??_readTemp,f
  1511  054C  2D4B               	goto	u677
  1512  054D  0BF4               	decfsz	??_readTemp+1,f
  1513  054E  2D4B               	goto	u677
  1514  054F  2D50               	nop2
  1515  0550                     l1181:
  1516                           
  1517                           ;main.c: 44:     high = SPI_transfer(0);
  1518  0550  3000               	movlw	0
  1519  0551  120A  118A  248B  120A  118A  	fcall	_SPI_transfer
  1520  0556  00F3               	movwf	??_readTemp
  1521  0557  0873               	movf	??_readTemp,w
  1522  0558  00F9               	movwf	readTemp@high
  1523  0559                     l1183:
  1524                           
  1525                           ;main.c: 45:     low = SPI_transfer(0);
  1526  0559  3000               	movlw	0
  1527  055A  120A  118A  248B  120A  118A  	fcall	_SPI_transfer
  1528  055F  00F3               	movwf	??_readTemp
  1529  0560  0873               	movf	??_readTemp,w
  1530  0561  00FA               	movwf	readTemp@low
  1531  0562                     l1185:
  1532                           
  1533                           ;main.c: 46:     RC7 = 1;
  1534  0562  1283               	bcf	3,5	;RP0=0, select bank0
  1535  0563  1303               	bcf	3,6	;RP1=0, select bank0
  1536  0564  1787               	bsf	7,7	;volatile
  1537  0565                     l1187:
  1538                           
  1539                           ;main.c: 47:     data = (high << 8) | low;
  1540  0565  087A               	movf	readTemp@low,w
  1541  0566  00F3               	movwf	??_readTemp
  1542  0567  01F4               	clrf	??_readTemp+1
  1543  0568  0879               	movf	readTemp@high,w
  1544  0569  00F5               	movwf	??_readTemp+2
  1545  056A  01F6               	clrf	??_readTemp+3
  1546  056B  0875               	movf	??_readTemp+2,w
  1547  056C  00F6               	movwf	??_readTemp+3
  1548  056D  01F5               	clrf	??_readTemp+2
  1549  056E  0873               	movf	??_readTemp,w
  1550  056F  0475               	iorwf	??_readTemp+2,w
  1551  0570  00F7               	movwf	readTemp@data
  1552  0571  0874               	movf	??_readTemp+1,w
  1553  0572  0476               	iorwf	??_readTemp+3,w
  1554  0573  00F8               	movwf	readTemp@data+1
  1555  0574                     l1189:
  1556                           
  1557                           ;main.c: 48:     return (data >> 5) - 25;
  1558  0574  0878               	movf	readTemp@data+1,w
  1559  0575  00F4               	movwf	??_readTemp+1
  1560  0576  0877               	movf	readTemp@data,w
  1561  0577  00F3               	movwf	??_readTemp
  1562  0578  3005               	movlw	5
  1563  0579  00FF               	movwf	btemp+1
  1564  057A                     u515:
  1565  057A  0D74               	rlf	??_readTemp+1,w
  1566  057B  0CF4               	rrf	??_readTemp+1,f
  1567  057C  0CF3               	rrf	??_readTemp,f
  1568  057D  0BFF               	decfsz	btemp+1,f
  1569  057E  2D7A               	goto	u515
  1570  057F  0873               	movf	??_readTemp,w
  1571  0580  3EE7               	addlw	231
  1572  0581  00F1               	movwf	?_readTemp
  1573  0582  0874               	movf	??_readTemp+1,w
  1574  0583  1803               	skipnc
  1575  0584  3E01               	addlw	1
  1576  0585  3EFF               	addlw	255
  1577  0586  00F2               	movwf	?_readTemp+1
  1578  0587                     l29:
  1579  0587  0008               	return
  1580  0588                     __end_of_readTemp:
  1581                           
  1582                           	psect	text5
  1583  048B                     __ptext5:	
  1584 ;; *************** function _SPI_transfer *****************
  1585 ;; Defined at:
  1586 ;;		line 28 in file "SPI.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;  data            1    wreg     unsigned char 
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;  data            1    0[COMMON] unsigned char 
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  1    wreg      unsigned char 
  1593 ;; Registers used:
  1594 ;;		wreg
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1600 ;;      Params:         0       0       0       0       0
  1601 ;;      Locals:         1       0       0       0       0
  1602 ;;      Temps:          0       0       0       0       0
  1603 ;;      Totals:         1       0       0       0       0
  1604 ;;Total ram usage:        1 bytes
  1605 ;; Hardware stack levels used:    1
  1606 ;; This function calls:
  1607 ;;		Nothing
  1608 ;; This function is called by:
  1609 ;;		_readTemp
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           
  1614                           ;psect for function _SPI_transfer
  1615  048B                     _SPI_transfer:
  1616                           
  1617                           ;incstack = 0
  1618                           ; Regs used in _SPI_transfer: [wreg]
  1619                           ;SPI_transfer@data stored from wreg
  1620  048B  00F0               	movwf	SPI_transfer@data
  1621  048C                     l1109:
  1622                           
  1623                           ;SPI.c: 28: unsigned char SPI_transfer(unsigned char data);SPI.c: 29: {;SPI.c: 30:     S
      +                          SPBUF = data;
  1624  048C  0870               	movf	SPI_transfer@data,w
  1625  048D  1283               	bcf	3,5	;RP0=0, select bank0
  1626  048E  1303               	bcf	3,6	;RP1=0, select bank0
  1627  048F  0093               	movwf	19	;volatile
  1628  0490                     l59:	
  1629                           ;SPI.c: 31:     while(!SSPSTATbits.BF);
  1630                           
  1631  0490  1683               	bsf	3,5	;RP0=1, select bank1
  1632  0491  1303               	bcf	3,6	;RP1=0, select bank1
  1633  0492  1C14               	btfss	20,0	;volatile
  1634  0493  2C95               	goto	u371
  1635  0494  2C96               	goto	u370
  1636  0495                     u371:
  1637  0495  2C90               	goto	l59
  1638  0496                     u370:
  1639  0496                     l1111:
  1640                           
  1641                           ;SPI.c: 32:     return SSPBUF;
  1642  0496  1283               	bcf	3,5	;RP0=0, select bank0
  1643  0497  1303               	bcf	3,6	;RP1=0, select bank0
  1644  0498  0813               	movf	19,w	;volatile
  1645  0499                     l62:
  1646  0499  0008               	return
  1647  049A                     __end_of_SPI_transfer:
  1648                           
  1649                           	psect	text6
  1650  04DC                     __ptext6:	
  1651 ;; *************** function _lcd_puts *****************
  1652 ;; Defined at:
  1653 ;;		line 103 in file "lcd.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;  str             2    9[COMMON] PTR unsigned char 
  1656 ;;		 -> buffer(16), STR_1(10), 
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;  i               2   11[COMMON] unsigned int 
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      void 
  1661 ;; Registers used:
  1662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1668 ;;      Params:         2       0       0       0       0
  1669 ;;      Locals:         2       0       0       0       0
  1670 ;;      Temps:          0       0       0       0       0
  1671 ;;      Totals:         4       0       0       0       0
  1672 ;;Total ram usage:        4 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    3
  1675 ;; This function calls:
  1676 ;;		_lcd_data
  1677 ;; This function is called by:
  1678 ;;		_main
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           
  1683                           ;psect for function _lcd_puts
  1684  04DC                     _lcd_puts:
  1685  04DC                     l1203:	
  1686                           ;incstack = 0
  1687                           ; Regs used in _lcd_puts: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1688                           
  1689                           
  1690                           ;lcd.c: 103: void lcd_puts(char *str);lcd.c: 104: {;lcd.c: 105:   unsigned int i=0;
  1691  04DC  01FB               	clrf	lcd_puts@i
  1692  04DD  01FC               	clrf	lcd_puts@i+1
  1693                           
  1694                           ;lcd.c: 106:  for(;str[i]!=0;i++)
  1695  04DE  2CF6               	goto	l1209
  1696  04DF                     l1205:
  1697                           
  1698                           ;lcd.c: 107:   lcd_data(str[i]);
  1699  04DF  087B               	movf	lcd_puts@i,w
  1700  04E0  0779               	addwf	lcd_puts@str,w
  1701  04E1  0084               	movwf	4
  1702  04E2  087A               	movf	lcd_puts@str+1,w
  1703  04E3  1803               	skipnc
  1704  04E4  0A7A               	incf	lcd_puts@str+1,w
  1705  04E5  00FF               	movwf	btemp+1
  1706  04E6  120A  118A  2003  120A  118A  	fcall	stringtab
  1707  04EB  120A  118A  247F  120A  118A  	fcall	_lcd_data
  1708  04F0                     l1207:
  1709  04F0  3001               	movlw	1
  1710  04F1  07FB               	addwf	lcd_puts@i,f
  1711  04F2  1803               	skipnc
  1712  04F3  0AFC               	incf	lcd_puts@i+1,f
  1713  04F4  3000               	movlw	0
  1714  04F5  07FC               	addwf	lcd_puts@i+1,f
  1715  04F6                     l1209:
  1716  04F6  087B               	movf	lcd_puts@i,w
  1717  04F7  0779               	addwf	lcd_puts@str,w
  1718  04F8  0084               	movwf	4
  1719  04F9  087A               	movf	lcd_puts@str+1,w
  1720  04FA  1803               	skipnc
  1721  04FB  0A7A               	incf	lcd_puts@str+1,w
  1722  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  1723  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  1724  04FE  00FF               	movwf	btemp+1
  1725  04FF  120A  118A  2003  120A  118A  	fcall	stringtab
  1726  0504  3A00               	xorlw	0
  1727  0505  1D03               	skipz
  1728  0506  2D08               	goto	u531
  1729  0507  2D09               	goto	u530
  1730  0508                     u531:
  1731  0508  2CDF               	goto	l1205
  1732  0509                     u530:
  1733  0509                     l98:
  1734  0509  0008               	return
  1735  050A                     __end_of_lcd_puts:
  1736                           
  1737                           	psect	text7
  1738  047F                     __ptext7:	
  1739 ;; *************** function _lcd_data *****************
  1740 ;; Defined at:
  1741 ;;		line 74 in file "lcd.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;  a               1    wreg     unsigned char 
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;  a               1    8[COMMON] unsigned char 
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  1    wreg      void 
  1748 ;; Registers used:
  1749 ;;		wreg, status,2, status,0, pclath, cstack
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1755 ;;      Params:         0       0       0       0       0
  1756 ;;      Locals:         1       0       0       0       0
  1757 ;;      Temps:          0       0       0       0       0
  1758 ;;      Totals:         1       0       0       0       0
  1759 ;;Total ram usage:        1 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; Hardware stack levels required when called:    2
  1762 ;; This function calls:
  1763 ;;		_lcd_com
  1764 ;; This function is called by:
  1765 ;;		_lcd_puts
  1766 ;;		_hex2lcd
  1767 ;;		_LCD_ScrollMessage
  1768 ;;		_lcd_print_number
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           
  1773                           ;psect for function _lcd_data
  1774  047F                     _lcd_data:
  1775                           
  1776                           ;incstack = 0
  1777                           ; Regs used in _lcd_data: [wreg+status,2+status,0+pclath+cstack]
  1778                           ;lcd_data@a stored from wreg
  1779  047F  00F8               	movwf	lcd_data@a
  1780  0480                     l1125:
  1781                           
  1782                           ;lcd.c: 74: void lcd_data(unsigned char a);lcd.c: 75: {;lcd.c: 76:  status=1;
  1783  0480  1283               	bcf	3,5	;RP0=0, select bank0
  1784  0481  1303               	bcf	3,6	;RP1=0, select bank0
  1785  0482  1455               	bsf	_status/(0+8),_status& (0+7)
  1786                           
  1787                           ;lcd.c: 77:  PORTDbits.RD0=1;
  1788  0483  1408               	bsf	8,0	;volatile
  1789  0484                     l1127:
  1790                           
  1791                           ;lcd.c: 78:  lcd_com(a);
  1792  0484  0878               	movf	lcd_data@a,w
  1793  0485  120A  118A  25CC  120A  118A  	fcall	_lcd_com
  1794  048A                     l89:
  1795  048A  0008               	return
  1796  048B                     __end_of_lcd_data:
  1797                           
  1798                           	psect	text8
  1799  0671                     __ptext8:	
  1800 ;; *************** function _lcd_init *****************
  1801 ;; Defined at:
  1802 ;;		line 80 in file "lcd.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;		None
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      void 
  1809 ;; Registers used:
  1810 ;;		wreg, status,2, status,0, pclath, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1816 ;;      Params:         0       0       0       0       0
  1817 ;;      Locals:         0       0       0       0       0
  1818 ;;      Temps:          0       0       0       0       0
  1819 ;;      Totals:         0       0       0       0       0
  1820 ;;Total ram usage:        0 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    2
  1823 ;; This function calls:
  1824 ;;		_delay
  1825 ;;		_lcd_com
  1826 ;;		_lcd_init_write
  1827 ;; This function is called by:
  1828 ;;		_main
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           
  1833                           ;psect for function _lcd_init
  1834  0671                     _lcd_init:
  1835  0671                     l1193:	
  1836                           ;incstack = 0
  1837                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1838                           
  1839                           
  1840                           ;lcd.c: 82:  delay(300);
  1841  0671  302C               	movlw	44
  1842  0672  00F0               	movwf	delay@j
  1843  0673  3001               	movlw	1
  1844  0674  00F1               	movwf	delay@j+1
  1845  0675  120A  118A  24AF  120A  118A  	fcall	_delay
  1846                           
  1847                           ;lcd.c: 83:  lcd_init_write(0x30);
  1848  067A  3030               	movlw	48
  1849  067B  120A  118A  249A  120A  118A  	fcall	_lcd_init_write
  1850                           
  1851                           ;lcd.c: 84:  delay(300);
  1852  0680  302C               	movlw	44
  1853  0681  00F0               	movwf	delay@j
  1854  0682  3001               	movlw	1
  1855  0683  00F1               	movwf	delay@j+1
  1856  0684  120A  118A  24AF  120A  118A  	fcall	_delay
  1857                           
  1858                           ;lcd.c: 85:  lcd_init_write(0x30);
  1859  0689  3030               	movlw	48
  1860  068A  120A  118A  249A  120A  118A  	fcall	_lcd_init_write
  1861                           
  1862                           ;lcd.c: 86:  delay(300);
  1863  068F  302C               	movlw	44
  1864  0690  00F0               	movwf	delay@j
  1865  0691  3001               	movlw	1
  1866  0692  00F1               	movwf	delay@j+1
  1867  0693  120A  118A  24AF  120A  118A  	fcall	_delay
  1868                           
  1869                           ;lcd.c: 87:  lcd_init_write(0x30);
  1870  0698  3030               	movlw	48
  1871  0699  120A  118A  249A  120A  118A  	fcall	_lcd_init_write
  1872                           
  1873                           ;lcd.c: 88:  delay(300);
  1874  069E  302C               	movlw	44
  1875  069F  00F0               	movwf	delay@j
  1876  06A0  3001               	movlw	1
  1877  06A1  00F1               	movwf	delay@j+1
  1878  06A2  120A  118A  24AF  120A  118A  	fcall	_delay
  1879                           
  1880                           ;lcd.c: 89:  lcd_init_write(0x20);
  1881  06A7  3020               	movlw	32
  1882  06A8  120A  118A  249A  120A  118A  	fcall	_lcd_init_write
  1883                           
  1884                           ;lcd.c: 90:  delay(300);
  1885  06AD  302C               	movlw	44
  1886  06AE  00F0               	movwf	delay@j
  1887  06AF  3001               	movlw	1
  1888  06B0  00F1               	movwf	delay@j+1
  1889  06B1  120A  118A  24AF  120A  118A  	fcall	_delay
  1890                           
  1891                           ;lcd.c: 91:  lcd_com(0xC);
  1892  06B6  300C               	movlw	12
  1893  06B7  120A  118A  25CC  120A  118A  	fcall	_lcd_com
  1894                           
  1895                           ;lcd.c: 92:  lcd_com(0x28);
  1896  06BC  3028               	movlw	40
  1897  06BD  120A  118A  25CC  120A  118A  	fcall	_lcd_com
  1898                           
  1899                           ;lcd.c: 93:  delay(300);
  1900  06C2  302C               	movlw	44
  1901  06C3  00F0               	movwf	delay@j
  1902  06C4  3001               	movlw	1
  1903  06C5  00F1               	movwf	delay@j+1
  1904  06C6  120A  118A  24AF  120A  118A  	fcall	_delay
  1905                           
  1906                           ;lcd.c: 94:  lcd_com(4);
  1907  06CB  3004               	movlw	4
  1908  06CC  120A  118A  25CC  120A  118A  	fcall	_lcd_com
  1909                           
  1910                           ;lcd.c: 95:  delay(300);
  1911  06D1  302C               	movlw	44
  1912  06D2  00F0               	movwf	delay@j
  1913  06D3  3001               	movlw	1
  1914  06D4  00F1               	movwf	delay@j+1
  1915  06D5  120A  118A  24AF  120A  118A  	fcall	_delay
  1916                           
  1917                           ;lcd.c: 96:  lcd_com(0x85);
  1918  06DA  3085               	movlw	133
  1919  06DB  120A  118A  25CC  120A  118A  	fcall	_lcd_com
  1920                           
  1921                           ;lcd.c: 97:  delay(300);
  1922  06E0  302C               	movlw	44
  1923  06E1  00F0               	movwf	delay@j
  1924  06E2  3001               	movlw	1
  1925  06E3  00F1               	movwf	delay@j+1
  1926  06E4  120A  118A  24AF  120A  118A  	fcall	_delay
  1927                           
  1928                           ;lcd.c: 98:  lcd_com(6);
  1929  06E9  3006               	movlw	6
  1930  06EA  120A  118A  25CC  120A  118A  	fcall	_lcd_com
  1931                           
  1932                           ;lcd.c: 99:  delay(300);
  1933  06EF  302C               	movlw	44
  1934  06F0  00F0               	movwf	delay@j
  1935  06F1  3001               	movlw	1
  1936  06F2  00F1               	movwf	delay@j+1
  1937  06F3  120A  118A  24AF  120A  118A  	fcall	_delay
  1938                           
  1939                           ;lcd.c: 100:  lcd_com(1);
  1940  06F8  3001               	movlw	1
  1941  06F9  120A  118A  25CC  120A  118A  	fcall	_lcd_com
  1942                           
  1943                           ;lcd.c: 101:  delay(300);
  1944  06FE  302C               	movlw	44
  1945  06FF  00F0               	movwf	delay@j
  1946  0700  3001               	movlw	1
  1947  0701  00F1               	movwf	delay@j+1
  1948  0702  120A  118A  24AF  120A  118A  	fcall	_delay
  1949  0707                     l92:
  1950  0707  0008               	return
  1951  0708                     __end_of_lcd_init:
  1952                           
  1953                           	psect	text9
  1954  049A                     __ptext9:	
  1955 ;; *************** function _lcd_init_write *****************
  1956 ;; Defined at:
  1957 ;;		line 36 in file "lcd.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;  a               1    wreg     unsigned char 
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;  a               1    4[COMMON] unsigned char 
  1962 ;; Return value:  Size  Location     Type
  1963 ;;                  1    wreg      void 
  1964 ;; Registers used:
  1965 ;;		wreg, status,2, status,0, pclath, cstack
  1966 ;; Tracked objects:
  1967 ;;		On entry : 0/0
  1968 ;;		On exit  : 0/0
  1969 ;;		Unchanged: 0/0
  1970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1971 ;;      Params:         0       0       0       0       0
  1972 ;;      Locals:         1       0       0       0       0
  1973 ;;      Temps:          0       0       0       0       0
  1974 ;;      Totals:         1       0       0       0       0
  1975 ;;Total ram usage:        1 bytes
  1976 ;; Hardware stack levels used:    1
  1977 ;; Hardware stack levels required when called:    1
  1978 ;; This function calls:
  1979 ;;		_delay
  1980 ;; This function is called by:
  1981 ;;		_lcd_init
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           
  1986                           ;psect for function _lcd_init_write
  1987  049A                     _lcd_init_write:
  1988                           
  1989                           ;incstack = 0
  1990                           ; Regs used in _lcd_init_write: [wreg+status,2+status,0+pclath+cstack]
  1991                           ;lcd_init_write@a stored from wreg
  1992  049A  00F4               	movwf	lcd_init_write@a
  1993  049B                     l1115:
  1994                           
  1995                           ;lcd.c: 36: void lcd_init_write(unsigned char a);lcd.c: 37: {;lcd.c: 38:  PORTDbits.RD0=
      +                          0;
  1996  049B  1283               	bcf	3,5	;RP0=0, select bank0
  1997  049C  1303               	bcf	3,6	;RP1=0, select bank0
  1998  049D  1008               	bcf	8,0	;volatile
  1999                           
  2000                           ;lcd.c: 39:  PORTDbits.RD1=0;
  2001  049E  1088               	bcf	8,1	;volatile
  2002  049F                     l1117:
  2003                           
  2004                           ;lcd.c: 40:  PORTD=a;
  2005  049F  0874               	movf	lcd_init_write@a,w
  2006  04A0  0088               	movwf	8	;volatile
  2007  04A1                     l1119:
  2008                           
  2009                           ;lcd.c: 41:  PORTDbits.RD2=1;
  2010  04A1  1508               	bsf	8,2	;volatile
  2011  04A2                     l1121:
  2012                           
  2013                           ;lcd.c: 42:  delay(300);
  2014  04A2  302C               	movlw	44
  2015  04A3  00F0               	movwf	delay@j
  2016  04A4  3001               	movlw	1
  2017  04A5  00F1               	movwf	delay@j+1
  2018  04A6  120A  118A  24AF  120A  118A  	fcall	_delay
  2019  04AB                     l1123:
  2020                           
  2021                           ;lcd.c: 43:  PORTDbits.RD2=0;
  2022  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  2023  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  2024  04AD  1108               	bcf	8,2	;volatile
  2025  04AE                     l81:
  2026  04AE  0008               	return
  2027  04AF                     __end_of_lcd_init_write:
  2028                           
  2029                           	psect	text10
  2030  05CC                     __ptext10:	
  2031 ;; *************** function _lcd_com *****************
  2032 ;; Defined at:
  2033 ;;		line 47 in file "lcd.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;  a               1    wreg     unsigned char 
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  a               1    6[COMMON] unsigned char 
  2038 ;;  temp            1    7[COMMON] unsigned char 
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  1    wreg      void 
  2041 ;; Registers used:
  2042 ;;		wreg, status,2, status,0, pclath, cstack
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2048 ;;      Params:         0       0       0       0       0
  2049 ;;      Locals:         2       0       0       0       0
  2050 ;;      Temps:          2       0       0       0       0
  2051 ;;      Totals:         4       0       0       0       0
  2052 ;;Total ram usage:        4 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; Hardware stack levels required when called:    1
  2055 ;; This function calls:
  2056 ;;		_delay
  2057 ;; This function is called by:
  2058 ;;		_main
  2059 ;;		_lcd_data
  2060 ;;		_lcd_init
  2061 ;;		_LCD_ScrollMessage
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           
  2066                           ;psect for function _lcd_com
  2067  05CC                     _lcd_com:
  2068                           
  2069                           ;incstack = 0
  2070                           ; Regs used in _lcd_com: [wreg+status,2+status,0+pclath+cstack]
  2071                           ;lcd_com@a stored from wreg
  2072  05CC  00F6               	movwf	lcd_com@a
  2073  05CD                     l1077:
  2074                           
  2075                           ;lcd.c: 47: void lcd_com(unsigned char a);lcd.c: 48: {;lcd.c: 49:  unsigned char temp;;l
      +                          cd.c: 50:  if(status)
  2076  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  2077  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  2078  05CF  1C55               	btfss	_status/(0+8),_status& (0+7)
  2079  05D0  2DD2               	goto	u351
  2080  05D1  2DD3               	goto	u350
  2081  05D2                     u351:
  2082  05D2  2DD5               	goto	l84
  2083  05D3                     u350:
  2084  05D3                     l1079:
  2085                           
  2086                           ;lcd.c: 51:  {;lcd.c: 52:   status=0;
  2087  05D3  1055               	bcf	_status/(0+8),_status& (0+7)
  2088                           
  2089                           ;lcd.c: 53:   goto next;
  2090  05D4  2DD6               	goto	l85
  2091  05D5                     l84:	
  2092                           ;lcd.c: 54:  }
  2093                           
  2094                           
  2095                           ;lcd.c: 55:  PORTDbits.RD0=0;
  2096  05D5  1008               	bcf	8,0	;volatile
  2097  05D6                     l85:	
  2098                           ;lcd.c: 56:  next:
  2099                           
  2100                           
  2101                           ;lcd.c: 57:  PORTDbits.RD1=0;
  2102  05D6  1088               	bcf	8,1	;volatile
  2103  05D7                     l1081:
  2104                           
  2105                           ;lcd.c: 58:  temp=a;
  2106  05D7  0876               	movf	lcd_com@a,w
  2107  05D8  00F4               	movwf	??_lcd_com
  2108  05D9  0874               	movf	??_lcd_com,w
  2109  05DA  00F7               	movwf	lcd_com@temp
  2110  05DB                     l1083:
  2111                           
  2112                           ;lcd.c: 59:  temp&=0xf0;
  2113  05DB  30F0               	movlw	240
  2114  05DC  00F4               	movwf	??_lcd_com
  2115  05DD  0874               	movf	??_lcd_com,w
  2116  05DE  05F7               	andwf	lcd_com@temp,f
  2117  05DF                     l1085:
  2118                           
  2119                           ;lcd.c: 60:  PORTD&=0x0f;
  2120  05DF  300F               	movlw	15
  2121  05E0  00F4               	movwf	??_lcd_com
  2122  05E1  0874               	movf	??_lcd_com,w
  2123  05E2  0588               	andwf	8,f	;volatile
  2124  05E3                     l1087:
  2125                           
  2126                           ;lcd.c: 61:  PORTD|=temp;
  2127  05E3  0877               	movf	lcd_com@temp,w	;volatile
  2128  05E4  00F4               	movwf	??_lcd_com
  2129  05E5  0874               	movf	??_lcd_com,w
  2130  05E6  0488               	iorwf	8,f	;volatile
  2131  05E7                     l1089:
  2132                           
  2133                           ;lcd.c: 62:  PORTDbits.RD2=1;
  2134  05E7  1508               	bsf	8,2	;volatile
  2135  05E8                     l1091:
  2136                           
  2137                           ;lcd.c: 63:  delay(300);
  2138  05E8  302C               	movlw	44
  2139  05E9  00F0               	movwf	delay@j
  2140  05EA  3001               	movlw	1
  2141  05EB  00F1               	movwf	delay@j+1
  2142  05EC  120A  118A  24AF  120A  118A  	fcall	_delay
  2143  05F1                     l1093:
  2144                           
  2145                           ;lcd.c: 64:  PORTDbits.RD2=0;
  2146  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  2147  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  2148  05F3  1108               	bcf	8,2	;volatile
  2149  05F4                     l1095:
  2150                           
  2151                           ;lcd.c: 65:  temp=a<<4;
  2152  05F4  0876               	movf	lcd_com@a,w
  2153  05F5  00F4               	movwf	??_lcd_com
  2154  05F6  3003               	movlw	3
  2155  05F7                     u365:
  2156  05F7  1003               	clrc
  2157  05F8  0DF4               	rlf	??_lcd_com,f
  2158  05F9  3EFF               	addlw	-1
  2159  05FA  1D03               	skipz
  2160  05FB  2DF7               	goto	u365
  2161  05FC  1003               	clrc
  2162  05FD  0D74               	rlf	??_lcd_com,w
  2163  05FE  00F5               	movwf	??_lcd_com+1
  2164  05FF  0875               	movf	??_lcd_com+1,w
  2165  0600  00F7               	movwf	lcd_com@temp
  2166  0601                     l1097:
  2167                           
  2168                           ;lcd.c: 66:  temp&=0xf0;
  2169  0601  30F0               	movlw	240
  2170  0602  00F4               	movwf	??_lcd_com
  2171  0603  0874               	movf	??_lcd_com,w
  2172  0604  05F7               	andwf	lcd_com@temp,f
  2173  0605                     l1099:
  2174                           
  2175                           ;lcd.c: 67:  PORTD&=0x0f;
  2176  0605  300F               	movlw	15
  2177  0606  00F4               	movwf	??_lcd_com
  2178  0607  0874               	movf	??_lcd_com,w
  2179  0608  0588               	andwf	8,f	;volatile
  2180  0609                     l1101:
  2181                           
  2182                           ;lcd.c: 68:  PORTD|=temp;
  2183  0609  0877               	movf	lcd_com@temp,w	;volatile
  2184  060A  00F4               	movwf	??_lcd_com
  2185  060B  0874               	movf	??_lcd_com,w
  2186  060C  0488               	iorwf	8,f	;volatile
  2187  060D                     l1103:
  2188                           
  2189                           ;lcd.c: 69:  PORTDbits.RD2=1;
  2190  060D  1508               	bsf	8,2	;volatile
  2191  060E                     l1105:
  2192                           
  2193                           ;lcd.c: 70:  delay(300);
  2194  060E  302C               	movlw	44
  2195  060F  00F0               	movwf	delay@j
  2196  0610  3001               	movlw	1
  2197  0611  00F1               	movwf	delay@j+1
  2198  0612  120A  118A  24AF  120A  118A  	fcall	_delay
  2199  0617                     l1107:
  2200                           
  2201                           ;lcd.c: 71:  PORTDbits.RD2=0;
  2202  0617  1283               	bcf	3,5	;RP0=0, select bank0
  2203  0618  1303               	bcf	3,6	;RP1=0, select bank0
  2204  0619  1108               	bcf	8,2	;volatile
  2205  061A                     l86:
  2206  061A  0008               	return
  2207  061B                     __end_of_lcd_com:
  2208                           
  2209                           	psect	text11
  2210  04AF                     __ptext11:	
  2211 ;; *************** function _delay *****************
  2212 ;; Defined at:
  2213 ;;		line 30 in file "lcd.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  j               2    0[COMMON] unsigned int 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  i               2    2[COMMON] unsigned int 
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  1    wreg      void 
  2220 ;; Registers used:
  2221 ;;		wreg, status,2
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2227 ;;      Params:         2       0       0       0       0
  2228 ;;      Locals:         2       0       0       0       0
  2229 ;;      Temps:          0       0       0       0       0
  2230 ;;      Totals:         4       0       0       0       0
  2231 ;;Total ram usage:        4 bytes
  2232 ;; Hardware stack levels used:    1
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_lcd_init_write
  2237 ;;		_lcd_com
  2238 ;;		_lcd_init
  2239 ;;		_LCD_ScrollMessage
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           
  2244                           ;psect for function _delay
  2245  04AF                     _delay:
  2246  04AF                     l1073:	
  2247                           ;incstack = 0
  2248                           ; Regs used in _delay: [wreg+status,2]
  2249                           
  2250                           
  2251                           ;lcd.c: 30: void delay(unsigned int j);lcd.c: 31: {;lcd.c: 32:  unsigned int i=0;
  2252  04AF  01F2               	clrf	delay@i
  2253  04B0  01F3               	clrf	delay@i+1
  2254                           
  2255                           ;lcd.c: 33:  for(i=0;i<j;i++);
  2256  04B1  01F2               	clrf	delay@i
  2257  04B2  01F3               	clrf	delay@i+1
  2258  04B3  2CBA               	goto	l75
  2259  04B4                     l1075:
  2260  04B4  3001               	movlw	1
  2261  04B5  07F2               	addwf	delay@i,f
  2262  04B6  1803               	skipnc
  2263  04B7  0AF3               	incf	delay@i+1,f
  2264  04B8  3000               	movlw	0
  2265  04B9  07F3               	addwf	delay@i+1,f
  2266  04BA                     l75:
  2267  04BA  0871               	movf	delay@j+1,w
  2268  04BB  0273               	subwf	delay@i+1,w
  2269  04BC  1D03               	skipz
  2270  04BD  2CC0               	goto	u345
  2271  04BE  0870               	movf	delay@j,w
  2272  04BF  0272               	subwf	delay@i,w
  2273  04C0                     u345:
  2274  04C0  1C03               	skipc
  2275  04C1  2CC3               	goto	u341
  2276  04C2  2CC4               	goto	u340
  2277  04C3                     u341:
  2278  04C3  2CB4               	goto	l1075
  2279  04C4                     u340:
  2280  04C4                     l78:
  2281  04C4  0008               	return
  2282  04C5                     __end_of_delay:
  2283                           
  2284                           	psect	text12
  2285  04C5                     __ptext12:	
  2286 ;; *************** function _SPI_init *****************
  2287 ;; Defined at:
  2288 ;;		line 12 in file "SPI.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;  mode            1    wreg     enum E1264
  2291 ;;  sample          1    0[COMMON] enum E1272
  2292 ;;  idle            1    1[COMMON] enum E1276
  2293 ;;  edge            1    2[COMMON] enum E1280
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  mode            1    3[COMMON] enum E1264
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		wreg, status,2, status,0
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2305 ;;      Params:         3       0       0       0       0
  2306 ;;      Locals:         1       0       0       0       0
  2307 ;;      Temps:          0       0       0       0       0
  2308 ;;      Totals:         4       0       0       0       0
  2309 ;;Total ram usage:        4 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; This function calls:
  2312 ;;		Nothing
  2313 ;; This function is called by:
  2314 ;;		_main
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           
  2319                           ;psect for function _SPI_init
  2320  04C5                     _SPI_init:
  2321                           
  2322                           ;incstack = 0
  2323                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  2324                           ;SPI_init@mode stored from wreg
  2325  04C5  00F3               	movwf	SPI_init@mode
  2326  04C6                     l1195:
  2327                           
  2328                           ;SPI.c: 13:     TRISC4 = 1;
  2329  04C6  1683               	bsf	3,5	;RP0=1, select bank1
  2330  04C7  1303               	bcf	3,6	;RP1=0, select bank1
  2331  04C8  1607               	bsf	7,4	;volatile
  2332                           
  2333                           ;SPI.c: 14:     TRISC5 = 0;
  2334  04C9  1287               	bcf	7,5	;volatile
  2335                           
  2336                           ;SPI.c: 15:     if (mode & 0b00000100)
  2337  04CA  1D73               	btfss	SPI_init@mode,2
  2338  04CB  2CCD               	goto	u521
  2339  04CC  2CCE               	goto	u520
  2340  04CD                     u521:
  2341  04CD  2CD2               	goto	l54
  2342  04CE                     u520:
  2343  04CE                     l1197:
  2344                           
  2345                           ;SPI.c: 16:     {;SPI.c: 17:         TRISC3 = 1;
  2346  04CE  1587               	bsf	7,3	;volatile
  2347  04CF                     l1199:
  2348                           
  2349                           ;SPI.c: 18:         SSPSTAT = edge;
  2350  04CF  0872               	movf	SPI_init@edge,w
  2351  04D0  0094               	movwf	20	;volatile
  2352                           
  2353                           ;SPI.c: 19:     } else
  2354  04D1  2CD6               	goto	l55
  2355  04D2                     l54:
  2356                           
  2357                           ;SPI.c: 20:     {;SPI.c: 21:         TRISC3 = 0;
  2358  04D2  1187               	bcf	7,3	;volatile
  2359  04D3                     l1201:
  2360                           
  2361                           ;SPI.c: 22:         SSPSTAT = sample | edge;
  2362  04D3  0870               	movf	SPI_init@sample,w
  2363  04D4  0472               	iorwf	SPI_init@edge,w
  2364  04D5  0094               	movwf	20	;volatile
  2365  04D6                     l55:	
  2366                           ;SPI.c: 24:     }
  2367                           
  2368                           
  2369                           ;SPI.c: 25:     SSPCON = mode | idle;
  2370  04D6  0873               	movf	SPI_init@mode,w
  2371  04D7  0471               	iorwf	SPI_init@idle,w
  2372  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  2373  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  2374  04DA  0094               	movwf	20	;volatile
  2375  04DB                     l56:
  2376  04DB  0008               	return
  2377  04DC                     __end_of_SPI_init:
  2378  007E                     btemp	set	126	;btemp
  2379  007E                     wtemp0	set	126
  2380                           
  2381                           	psect	config
  2382                           
  2383                           ;Config register CONFIG1 @ 0x2007
  2384                           ;	Oscillator Selection bits
  2385                           ;	FOSC = EXTRC_CLKOUT, RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/
      +                          OSC1/CLKIN
  2386                           ;	Watchdog Timer Enable bit
  2387                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2388                           ;	Power-up Timer Enable bit
  2389                           ;	PWRTE = OFF, PWRT disabled
  2390                           ;	RE3/MCLR pin function select bit
  2391                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  2392                           ;	Code Protection bit
  2393                           ;	CP = OFF, Program memory code protection is disabled
  2394                           ;	Data Code Protection bit
  2395                           ;	CPD = OFF, Data memory code protection is disabled
  2396                           ;	Brown Out Reset Selection bits
  2397                           ;	BOREN = OFF, BOR disabled
  2398                           ;	Internal External Switchover bit
  2399                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2400                           ;	Fail-Safe Clock Monitor Enabled bit
  2401                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2402                           ;	Low Voltage Programming Enable bit
  2403                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2404                           ;	In-Circuit Debugger Mode bit
  2405                           ;	DEBUG = 0x1, unprogrammed default
  2406  2007                     	org	8199
  2407  2007  20F7               	dw	8439
  2408                           
  2409                           ;Config register CONFIG2 @ 0x2008
  2410                           ;	Brown-out Reset Selection bit
  2411                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2412                           ;	Flash Program Memory Self Write Enable bits
  2413                           ;	WRT = OFF, Write protection off
  2414  2008                     	org	8200
  2415  2008  3FFF               	dw	16383

Data Sizes:
    Strings     27
    Constant    10
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     16      54
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_2(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> buffer(BANK0[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_puts@str	PTR unsigned char  size(2) Largest target is 16
		 -> buffer(BANK0[16]), STR_1(CODE[10]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _readTemp->_SPI_transfer
    _lcd_puts->_lcd_data
    _lcd_data->_lcd_com
    _lcd_init->_lcd_com
    _lcd_init_write->_delay
    _lcd_com->_delay

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    8486
                                             13 BANK0      3     3      0
                           _SPI_init
                            _lcd_com
                           _lcd_init
                           _lcd_puts
                           _readTemp
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1515
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     463
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     466
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _readTemp                                            10     8      2      91
                                              1 COMMON    10     8      2
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (2) _SPI_transfer                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             4     2      2    1543
                                              9 COMMON     4     2      2
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             1     1      0    1301
                                              8 COMMON     1     1      0
                            _lcd_com
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    3675
                              _delay
                            _lcd_com
                     _lcd_init_write
 ---------------------------------------------------------------------------------
 (2) _lcd_init_write                                       1     1      0    1209
                                              4 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _lcd_com                                              4     4      0    1279
                                              4 COMMON     4     4      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                4     2      2    1187
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             4     1      3     360
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init
   _lcd_com
     _delay
   _lcd_init
     _delay
     _lcd_com
       _delay
     _lcd_init_write
       _delay
   _lcd_puts
     _lcd_data
       _lcd_com
         _delay
   _readTemp
     _SPI_transfer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      44       3        0.0%
BITBANK0            50      0       1       4        1.2%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      36       5       67.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      44      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed May 12 16:50:20 2021

                      _c 0034                        pc 0002              _SSPSTATbits 0094  
            lcd_com@temp 0077                       l29 0587                       l54 04D2  
                     l62 0499                       l55 04D6                       l56 04DB  
                     l81 04AE                       l75 04BA                       l59 0490  
                     l84 05D5                       l92 0707                       l85 05D6  
                     l78 04C4                       l86 061A                       l89 048A  
                     l98 0509                       fsr 0004                      l239 07EF  
                    l515 05CB                      l525 0543                      _RC6 003E  
                    _RC7 003F                      u400 05A2                      u401 05A1  
                    u340 04C4                      u420 05B3                      u500 053F  
                    u341 04C3                      u421 05B2                      u501 053E  
                    u350 05D3                      u351 05D2                      u415 05A3  
                    u520 04CE                      u440 05C7                      u600 07EB  
                    u521 04CD                      u345 04C0                      u441 05C6  
                    u425 05AF                      u601 07EA                      u530 0509  
                    u370 0496                      u450 0510                      u531 0508  
                    u371 0495                      u515 057A                      u435 05BB  
                    u451 050F                      u380 0590                      u540 0716  
                    u365 05F7                      u381 058F                      u541 0715  
                    u470 0522                      u550 0750                      u471 0521  
                    u551 074F                      u480 052C                      u560 0776  
                    u481 052B                      u465 0514                      u561 0775  
                    u570 0781                      u395 0594                      u571 0780  
                    u580 0787                      u485 0528                      u581 0786  
                    u565 0772                      u590 07D9                      u495 0533  
                    u591 07D8                      u677 054B                      _num 0020  
                    fsr0 0004                      indf 0000                     l1101 0609  
                   l1103 060D                     l1111 0496                     l1201 04D3  
                   l1105 060E                     l1121 04A2                     l1107 0617  
                   l1123 04AB                     l1115 049B                     l1203 04DC  
                   l1131 058A                     l1211 070B                     l1117 049F  
                   l1125 0480                     l1205 04DF                     l1109 048C  
                   l1141 05A2                     l1133 0590                     l1213 0710  
                   l1119 04A1                     l1127 0484                     l1207 04F0  
  __size_of_SPI_transfer 000F                     l1143 05B3                     l1135 0593  
                   l1151 05C7                     l1231 0750                     l1223 0723  
                   l1215 0716                     l1073 04AF                     l1081 05D7  
                   l1209 04F6                     l1145 05B9                     l1137 059A  
                   l1129 0588                     l1161 051A                     l1241 075B  
                   l1233 0754                     l1225 0740                     l1217 071D  
                   l1075 04B4                     l1091 05E8                     l1083 05DB  
                   l1147 05BA                     l1139 059E                     l1171 0539  
                   l1163 051E                     l1155 050A                     l1251 078E  
                   l1235 0759                     l1227 0748                     l1219 0722  
                   l1093 05F1                     l1085 05DF                     l1077 05CD  
                   l1181 0550                     l1149 05C1                     l1165 0522  
                   l1157 0510                     l1173 053F                     l1261 07D0  
                   l1253 0792                     l1245 0777                     l1229 074C  
                   l1095 05F4                     l1087 05E3                     l1079 05D3  
                   l1183 0559                     l1167 052C                     l1159 0513  
                   l1255 0797                     l1247 0781                     l1263 07D9  
                   l1097 0601                     l1089 05E7                     l1193 0671  
                   l1185 0562                     l1177 0544                     l1169 0532  
                   l1257 07C5                     l1249 0787                     l1265 07EB  
                   l1281 0633                     l1273 061B                     l1195 04C6  
                   l1099 0605                     l1187 0565                     l1179 0547  
                   l1259 07CC                     l1291 065E                     l1283 0639  
                   l1275 061E                     l1197 04CE                     l1189 0574  
                   l1293 0664                     l1285 0642                     l1277 0620  
                   l1199 04CF                     l1287 0645                     l1279 0625  
                   l1289 0650                     l1397 0735                     STR_1 002E  
                   STR_2 001D                     _main 061B           SPI_init@sample 0070  
                   btemp 007E              lcd_puts@str 0079                     start 0000  
                  ?_main 0070          __end_of___lwdiv 05CC          __end_of___lwmod 0544  
       SPI_transfer@data 0070             _SPI_transfer 048B                    _PORTD 0008  
                  _TRISD 0088          __end_of_lcd_com 061B                    _delay 04AF  
        __end_of_dpowers 001D                    pclath 000A         __end_of_SPI_init 04DC  
                  status 0003                    wtemp0 007E          __end_of_sprintf 07F0  
        __initialization 07F0             __end_of_main 0671                   ??_main 0052  
                 ?_delay 0070                   _TRISC3 043B                   _TRISC4 043C  
                 _TRISC5 043D                   _TRISC6 043E                   _TRISC7 043F  
                 _SSPCON 0014                   _SSPBUF 0013         __end_of_lcd_data 048B  
       __end_of_lcd_init 0708         __end_of_lcd_puts 050A              readTemp@low 007A  
              ??___lwdiv 0074                ??___lwmod 007C                   _buffer 0035  
       __end_of_readTemp 0588                   delay@i 0072                   delay@j 0070  
                 _status 02A8                ??_lcd_com 0074                ??_sprintf 0048  
       ??_lcd_init_write 0074  __end_of__initialization 07FC             SPI_init@edge 0072  
           SPI_init@idle 0071             SPI_init@mode 0073           __pcstackCOMMON 0070  
          __end_of_delay 04C5                ?_SPI_init 0070                  ??_delay 0072  
             __pbssBANK0 0020               __pmaintext 061B               ??_SPI_init 0073  
              ?_lcd_data 0070                ?_lcd_init 0070                  _SSPSTAT 0094  
              ?_lcd_puts 0079               __stringtab 0003                ?_readTemp 0071  
                ___lwdiv 0588                  ___lwmod 050A             readTemp@data 0077  
           readTemp@high 0079                  __ptext1 0708                  __ptext2 050A  
                __ptext3 0588                  __ptext4 0544                  __ptext5 048B  
                __ptext6 04DC                  __ptext7 047F                  __ptext8 0671  
                __ptext9 049A                  _lcd_com 05CC                  _dpowers 0013  
             ??_lcd_data 0078                  _sprintf 0708                  clrloop0 0478  
             ??_lcd_init 0078               ??_lcd_puts 007B     end_of_initialization 07FC  
             ??_readTemp 0073                _PORTDbits 0008          lcd_init_write@a 0074  
          __pbitbssBANK0 02A8      start_initialization 07F0        __size_of_SPI_init 0017  
          ?_SPI_transfer 0070                ___latbits 0002            __pcstackBANK0 0045  
      __size_of_lcd_data 000C        __size_of_lcd_init 0097              sprintf@flag 004C  
      __size_of_lcd_puts 002E              sprintf@prec 004D        __size_of_readTemp 0044  
       ___lwdiv@dividend 0072  __size_of_lcd_init_write 0015                 ?___lwdiv 0070  
               ?___lwmod 0078                __pstrings 0003           ??_SPI_transfer 0070  
               ?_lcd_com 0070         ___lwdiv@quotient 0075           __size_of_delay 0016  
               ?_sprintf 0045                clear_ram0 0477                lcd_data@a 0078  
            __stringbase 0012                 _SPI_init 04C5                lcd_puts@i 007B  
       __size_of___lwdiv 0044         __size_of___lwmod 003A       __end_of__stringtab 0013  
       __size_of_lcd_com 004F               sprintf@val 004E          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0077                 __ptext10 05CC                 __ptext11 04AF  
               __ptext12 04C5                 _lcd_data 047F                 _lcd_init 0671  
               _lcd_puts 04DC         __size_of_sprintf 00E8                 _readTemp 0544  
          __size_of_main 0056     __end_of_SPI_transfer 049A           _lcd_init_write 049A  
               lcd_com@a 0076                 main@temp 0053                sprintf@ap 004B  
              sprintf@sp 0050         ___lwmod@dividend 007A   __end_of_lcd_init_write 04AF  
              stringcode 000D                 sprintf@c 0051                 sprintf@f 0045  
        ___lwmod@divisor 0078          ___lwmod@counter 007D                 stringdir 000D  
               stringtab 0003          ?_lcd_init_write 0070  
