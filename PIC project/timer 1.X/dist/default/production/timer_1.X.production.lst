

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Apr 20 15:55:24 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.20
    25                           ; Generated 12/02/2020 GMT
    26                           ; 
    27                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F887 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  008F                     	;# 
   103  0090                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  0105                     	;# 
   122  0107                     	;# 
   123  0108                     	;# 
   124  0109                     	;# 
   125  010C                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  010F                     	;# 
   130  0185                     	;# 
   131  0187                     	;# 
   132  0188                     	;# 
   133  0189                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0088                     	;# 
   176  0089                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  008F                     	;# 
   181  0090                     	;# 
   182  0091                     	;# 
   183  0092                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0098                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  009F                     	;# 
   199  0105                     	;# 
   200  0107                     	;# 
   201  0108                     	;# 
   202  0109                     	;# 
   203  010C                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  0185                     	;# 
   209  0187                     	;# 
   210  0188                     	;# 
   211  0189                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214  0000                     	;# 
   215  0001                     	;# 
   216  0002                     	;# 
   217  0003                     	;# 
   218  0004                     	;# 
   219  0005                     	;# 
   220  0006                     	;# 
   221  0007                     	;# 
   222  0008                     	;# 
   223  0009                     	;# 
   224  000A                     	;# 
   225  000B                     	;# 
   226  000C                     	;# 
   227  000D                     	;# 
   228  000E                     	;# 
   229  000E                     	;# 
   230  000F                     	;# 
   231  0010                     	;# 
   232  0011                     	;# 
   233  0012                     	;# 
   234  0013                     	;# 
   235  0014                     	;# 
   236  0015                     	;# 
   237  0015                     	;# 
   238  0016                     	;# 
   239  0017                     	;# 
   240  0018                     	;# 
   241  0019                     	;# 
   242  001A                     	;# 
   243  001B                     	;# 
   244  001B                     	;# 
   245  001C                     	;# 
   246  001D                     	;# 
   247  001E                     	;# 
   248  001F                     	;# 
   249  0081                     	;# 
   250  0085                     	;# 
   251  0086                     	;# 
   252  0087                     	;# 
   253  0088                     	;# 
   254  0089                     	;# 
   255  008C                     	;# 
   256  008D                     	;# 
   257  008E                     	;# 
   258  008F                     	;# 
   259  0090                     	;# 
   260  0091                     	;# 
   261  0092                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0093                     	;# 
   265  0094                     	;# 
   266  0095                     	;# 
   267  0096                     	;# 
   268  0097                     	;# 
   269  0098                     	;# 
   270  0099                     	;# 
   271  009A                     	;# 
   272  009B                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009E                     	;# 
   276  009F                     	;# 
   277  0105                     	;# 
   278  0107                     	;# 
   279  0108                     	;# 
   280  0109                     	;# 
   281  010C                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  010F                     	;# 
   286  0185                     	;# 
   287  0187                     	;# 
   288  0188                     	;# 
   289  0189                     	;# 
   290  018C                     	;# 
   291  018D                     	;# 
   292                           
   293                           	psect	strings
   294  0003                     __pstrings:
   295  0003                     stringtab:
   296  0003                     __stringtab:
   297  0003                     stringcode:	
   298                           ;	String table - string pointers are 1 byte each
   299                           
   300  0003                     stringdir:
   301  0003  3000               	movlw	high stringdir
   302  0004  008A               	movwf	10
   303  0005  0804               	movf	4,w
   304  0006  0A84               	incf	4,f
   305  0007  0782               	addwf	2,f
   306  0008                     __stringbase:
   307  0008  3400               	retlw	0
   308  0009                     __end_of__stringtab:
   309  0009                     _dpowers:
   310  0009  3401               	retlw	1
   311  000A  3400               	retlw	0
   312  000B  340A               	retlw	10
   313  000C  3400               	retlw	0
   314  000D  3464               	retlw	100
   315  000E  3400               	retlw	0
   316  000F  34E8               	retlw	232
   317  0010  3403               	retlw	3
   318  0011  3410               	retlw	16
   319  0012  3427               	retlw	39
   320  0013                     __end_of_dpowers:
   321  000E                     _TMR1	set	14
   322  0008                     _PORTD	set	8
   323  0008                     _PORTDbits	set	8
   324  000E                     _TMR1L	set	14
   325  000F                     _TMR1H	set	15
   326  0010                     _T1CONbits	set	16
   327  0088                     _TRISD	set	136
   328  0087                     _TRISCbits	set	135
   329  0013                     STR_1:
   330  0013  3444               	retlw	68	;'D'
   331  0014  3465               	retlw	101	;'e'
   332  0015  346D               	retlw	109	;'m'
   333  0016  3420               	retlw	32	;' '
   334  0017  3478               	retlw	120	;'x'
   335  0018  3475               	retlw	117	;'u'
   336  0019  346E               	retlw	110	;'n'
   337  001A  3467               	retlw	103	;'g'
   338  001B  343A               	retlw	58	;':'
   339  001C  3420               	retlw	32	;' '
   340  001D  3425               	retlw	37	;'%'
   341  001E  3464               	retlw	100	;'d'
   342  001F  3400               	retlw	0
   343                           
   344                           	psect	cinit
   345  07F0                     start_initialization:	
   346                           ; #config settings
   347                           
   348  07F0                     __initialization:
   349                           
   350                           ; Clear objects allocated to BITBANK0
   351  07F0  1283               	bcf	3,5	;RP0=0, select bank0
   352  07F1  1303               	bcf	3,6	;RP1=0, select bank0
   353  07F2  01D5               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   354                           
   355                           ; Clear objects allocated to BANK0
   356  07F3  1383               	bcf	3,7	;select IRP bank0
   357  07F4  3020               	movlw	low __pbssBANK0
   358  07F5  0084               	movwf	4
   359  07F6  3045               	movlw	low (__pbssBANK0+37)
   360  07F7  120A  118A  2505  120A  118A  	fcall	clear_ram0
   361  07FC                     end_of_initialization:	
   362                           ;End of C runtime variable initialization code
   363                           
   364  07FC                     __end_of__initialization:
   365  07FC  0183               	clrf	3
   366  07FD  120A  118A  2D65   	ljmp	_main	;jump to C main() function
   367                           
   368                           	psect	bitbssBANK0
   369  02A8                     __pbitbssBANK0:
   370  02A8                     _status:
   371  02A8                     	ds	1
   372                           
   373                           	psect	bssBANK0
   374  0020                     __pbssBANK0:
   375  0020                     _num:
   376  0020                     	ds	20
   377  0034                     _c:
   378  0034                     	ds	1
   379  0035                     _buffer:
   380  0035                     	ds	16
   381                           
   382                           	psect	clrtext
   383  0505                     clear_ram0:	
   384                           ;	Called with FSR containing the base address, and
   385                           ;	W with the last address+1
   386                           
   387  0505  0064               	clrwdt	;clear the watchdog before getting into this loop
   388  0506                     clrloop0:
   389  0506  0180               	clrf	0	;clear RAM location pointed to by FSR
   390  0507  0A84               	incf	4,f	;increment pointer
   391  0508  0604               	xorwf	4,w	;XOR with final address
   392  0509  1903               	btfsc	3,2	;have we reached the end yet?
   393  050A  3400               	retlw	0	;all done for this memory range, return
   394  050B  0604               	xorwf	4,w	;XOR again to restore value
   395  050C  2D06               	goto	clrloop0	;do the next byte
   396                           
   397                           	psect	cstackCOMMON
   398  0070                     __pcstackCOMMON:
   399  0070                     ?_lcd_init:
   400  0070                     ?_lcd_com:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_lcd_puts:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_main:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ?_delay:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_lcd_init_write:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_lcd_data:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?___lwdiv:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     delay@j:	
   422                           ; 2 bytes @ 0x0
   423                           
   424  0070                     ___lwdiv@divisor:	
   425                           ; 2 bytes @ 0x0
   426                           
   427                           
   428                           ; 2 bytes @ 0x0
   429  0070                     	ds	2
   430  0072                     ??_delay:
   431  0072                     delay@i:	
   432                           ; 1 bytes @ 0x2
   433                           
   434  0072                     ___lwdiv@dividend:	
   435                           ; 2 bytes @ 0x2
   436                           
   437                           
   438                           ; 2 bytes @ 0x2
   439  0072                     	ds	2
   440  0074                     ??_lcd_com:
   441  0074                     ??_lcd_init_write:	
   442                           ; 1 bytes @ 0x4
   443                           
   444  0074                     ??___lwdiv:	
   445                           ; 1 bytes @ 0x4
   446                           
   447  0074                     lcd_init_write@a:	
   448                           ; 1 bytes @ 0x4
   449                           
   450                           
   451                           ; 1 bytes @ 0x4
   452  0074                     	ds	1
   453  0075                     ___lwdiv@quotient:
   454                           
   455                           ; 2 bytes @ 0x5
   456  0075                     	ds	1
   457  0076                     lcd_com@a:
   458                           
   459                           ; 1 bytes @ 0x6
   460  0076                     	ds	1
   461  0077                     lcd_com@temp:
   462  0077                     ___lwdiv@counter:	
   463                           ; 1 bytes @ 0x7
   464                           
   465                           
   466                           ; 1 bytes @ 0x7
   467  0077                     	ds	1
   468  0078                     ??_lcd_init:
   469  0078                     ??_lcd_data:	
   470                           ; 1 bytes @ 0x8
   471                           
   472  0078                     ?___lwmod:	
   473                           ; 1 bytes @ 0x8
   474                           
   475  0078                     lcd_data@a:	
   476                           ; 2 bytes @ 0x8
   477                           
   478  0078                     ___lwmod@divisor:	
   479                           ; 1 bytes @ 0x8
   480                           
   481                           
   482                           ; 2 bytes @ 0x8
   483  0078                     	ds	1
   484  0079                     ??_lcd_puts:
   485                           
   486                           ; 1 bytes @ 0x9
   487  0079                     	ds	1
   488  007A                     lcd_puts@i:
   489  007A                     ___lwmod@dividend:	
   490                           ; 2 bytes @ 0xA
   491                           
   492                           
   493                           ; 2 bytes @ 0xA
   494  007A                     	ds	2
   495  007C                     ??___lwmod:
   496  007C                     lcd_puts@str:	
   497                           ; 1 bytes @ 0xC
   498                           
   499                           
   500                           ; 1 bytes @ 0xC
   501  007C                     	ds	1
   502  007D                     ___lwmod@counter:
   503                           
   504                           ; 1 bytes @ 0xD
   505  007D                     	ds	1
   506                           
   507                           	psect	cstackBANK0
   508  0045                     __pcstackBANK0:
   509  0045                     ?_sprintf:
   510  0045                     sprintf@f:	
   511                           ; 2 bytes @ 0x0
   512                           
   513                           
   514                           ; 1 bytes @ 0x0
   515  0045                     	ds	3
   516  0048                     ??_sprintf:
   517                           
   518                           ; 1 bytes @ 0x3
   519  0048                     	ds	3
   520  004B                     sprintf@ap:
   521                           
   522                           ; 1 bytes @ 0x6
   523  004B                     	ds	1
   524  004C                     sprintf@flag:
   525                           
   526                           ; 1 bytes @ 0x7
   527  004C                     	ds	1
   528  004D                     sprintf@prec:
   529                           
   530                           ; 1 bytes @ 0x8
   531  004D                     	ds	1
   532  004E                     sprintf@val:
   533                           
   534                           ; 2 bytes @ 0x9
   535  004E                     	ds	2
   536  0050                     sprintf@sp:
   537                           
   538                           ; 1 bytes @ 0xB
   539  0050                     	ds	1
   540  0051                     sprintf@c:
   541                           
   542                           ; 1 bytes @ 0xC
   543  0051                     	ds	1
   544  0052                     ??_main:
   545                           
   546                           ; 1 bytes @ 0xD
   547  0052                     	ds	1
   548  0053                     main@cnt:
   549                           
   550                           ; 2 bytes @ 0xE
   551  0053                     	ds	2
   552                           
   553                           	psect	maintext
   554  0565                     __pmaintext:	
   555 ;;
   556 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   557 ;;
   558 ;; *************** function _main *****************
   559 ;; Defined at:
   560 ;;		line 23 in file "newmain.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;		None
   563 ;; Auto vars:     Size  Location     Type
   564 ;;  cnt             2   14[BANK0 ] unsigned int 
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   569 ;; Tracked objects:
   570 ;;		On entry : B00/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   574 ;;      Params:         0       0       0       0       0
   575 ;;      Locals:         0       2       0       0       0
   576 ;;      Temps:          0       1       0       0       0
   577 ;;      Totals:         0       3       0       0       0
   578 ;;Total ram usage:        3 bytes
   579 ;; Hardware stack levels required when called:    4
   580 ;; This function calls:
   581 ;;		_lcd_com
   582 ;;		_lcd_init
   583 ;;		_lcd_puts
   584 ;;		_sprintf
   585 ;; This function is called by:
   586 ;;		Startup code after reset
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590                           
   591                           ;psect for function _main
   592  0565                     _main:
   593  0565                     l1183:	
   594                           ;incstack = 0
   595                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   596                           
   597                           
   598                           ;newmain.c: 24:     unsigned int cnt;;newmain.c: 25:     TRISCbits.TRISC0 = 1;
   599  0565  1683               	bsf	3,5	;RP0=1, select bank1
   600  0566  1303               	bcf	3,6	;RP1=0, select bank1
   601  0567  1407               	bsf	7,0	;volatile
   602  0568                     l1185:
   603                           
   604                           ;newmain.c: 26:     TRISD = 0;
   605  0568  0188               	clrf	8	;volatile
   606  0569                     l1187:
   607                           
   608                           ;newmain.c: 27:     lcd_init();
   609  0569  120A  118A  2668  120A  118A  	fcall	_lcd_init
   610  056E                     l1189:
   611                           
   612                           ;newmain.c: 28:     T1CONbits.TMR1CS = 1;
   613  056E  1283               	bcf	3,5	;RP0=0, select bank0
   614  056F  1303               	bcf	3,6	;RP1=0, select bank0
   615  0570  1490               	bsf	16,1	;volatile
   616  0571                     l1191:
   617                           
   618                           ;newmain.c: 29:     T1CONbits.T1CKPS = 0;
   619  0571  30CF               	movlw	-49
   620  0572  0590               	andwf	16,f	;volatile
   621  0573                     l1193:
   622                           
   623                           ;newmain.c: 30:     T1CONbits.T1SYNC = 0;
   624  0573  1110               	bcf	16,2	;volatile
   625  0574                     l1195:
   626                           
   627                           ;newmain.c: 31:     T1CONbits.TMR1ON = 1;
   628  0574  1410               	bsf	16,0	;volatile
   629  0575                     l1197:
   630                           
   631                           ;newmain.c: 32:     TMR1H = TMR1L = 0;
   632  0575  018E               	clrf	14	;volatile
   633  0576  018F               	clrf	15	;volatile
   634  0577                     l1199:
   635                           
   636                           ;newmain.c: 34:     {;newmain.c: 35:         cnt = TMR1;
   637  0577  1283               	bcf	3,5	;RP0=0, select bank0
   638  0578  1303               	bcf	3,6	;RP1=0, select bank0
   639  0579  080F               	movf	15,w	;volatile
   640  057A  00D4               	movwf	main@cnt+1
   641  057B  080E               	movf	14,w	;volatile
   642  057C  00D3               	movwf	main@cnt
   643  057D                     l1201:
   644                           
   645                           ;newmain.c: 39:         sprintf(buffer,"Dem xung: %d",cnt);
   646  057D  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   647  057E  00D2               	movwf	??_main
   648  057F  0852               	movf	??_main,w
   649  0580  00C5               	movwf	sprintf@f
   650  0581  0854               	movf	main@cnt+1,w
   651  0582  00C7               	movwf	?_sprintf+2
   652  0583  0853               	movf	main@cnt,w
   653  0584  00C6               	movwf	?_sprintf+1
   654  0585  3035               	movlw	(low (_buffer| 0))& (0+255)
   655  0586  120A  118A  2708  120A  118A  	fcall	_sprintf
   656  058B                     l1203:
   657                           
   658                           ;newmain.c: 40:         lcd_com(0x80);
   659  058B  3080               	movlw	128
   660  058C  120A  118A  2619  120A  118A  	fcall	_lcd_com
   661  0591                     l1205:
   662                           
   663                           ;newmain.c: 41:         lcd_puts(buffer);
   664  0591  3035               	movlw	(low (_buffer| 0))& (0+255)
   665  0592  120A  118A  2544  120A  118A  	fcall	_lcd_puts
   666  0597  2D77               	goto	l1199
   667  0598  120A  118A  2800   	ljmp	start
   668  059B                     __end_of_main:
   669                           
   670                           	psect	text1
   671  0708                     __ptext1:	
   672 ;; *************** function _sprintf *****************
   673 ;; Defined at:
   674 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;  sp              1    wreg     PTR unsigned char 
   677 ;;		 -> buffer(16), 
   678 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   679 ;;		 -> STR_1(13), 
   680 ;; Auto vars:     Size  Location     Type
   681 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   682 ;;		 -> buffer(16), 
   683 ;;  tmpval          4    0        struct .
   684 ;;  val             2    9[BANK0 ] unsigned int 
   685 ;;  cp              2    0        PTR const unsigned char 
   686 ;;  len             2    0        unsigned int 
   687 ;;  c               1   12[BANK0 ] unsigned char 
   688 ;;  prec            1    8[BANK0 ] char 
   689 ;;  flag            1    7[BANK0 ] unsigned char 
   690 ;;  ap              1    6[BANK0 ] PTR void [1]
   691 ;;		 -> ?_sprintf(2), 
   692 ;; Return value:  Size  Location     Type
   693 ;;                  2    0[BANK0 ] int 
   694 ;; Registers used:
   695 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   701 ;;      Params:         0       3       0       0       0
   702 ;;      Locals:         0       7       0       0       0
   703 ;;      Temps:          0       3       0       0       0
   704 ;;      Totals:         0      13       0       0       0
   705 ;;Total ram usage:       13 bytes
   706 ;; Hardware stack levels used:    1
   707 ;; Hardware stack levels required when called:    1
   708 ;; This function calls:
   709 ;;		___lwdiv
   710 ;;		___lwmod
   711 ;; This function is called by:
   712 ;;		_main
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716                           
   717                           ;psect for function _sprintf
   718  0708                     _sprintf:
   719                           
   720                           ;incstack = 0
   721                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   722                           ;sprintf@sp stored from wreg
   723  0708  1283               	bcf	3,5	;RP0=0, select bank0
   724  0709  1303               	bcf	3,6	;RP1=0, select bank0
   725  070A  00D0               	movwf	sprintf@sp
   726  070B                     l1113:
   727                           
   728                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   729  070B  3046               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   730  070C  00C8               	movwf	??_sprintf
   731  070D  0848               	movf	??_sprintf,w
   732  070E  00CB               	movwf	sprintf@ap
   733                           
   734                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   735  070F  2FD9               	goto	l1165
   736  0710                     l1115:
   737                           
   738                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   739  0710  3025               	movlw	37
   740  0711  0651               	xorwf	sprintf@c,w
   741  0712  1903               	btfsc	3,2
   742  0713  2F15               	goto	u471
   743  0714  2F16               	goto	u470
   744  0715                     u471:
   745  0715  2F22               	goto	l1121
   746  0716                     u470:
   747  0716                     l1117:
   748                           
   749                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   750  0716  0851               	movf	sprintf@c,w
   751  0717  00C8               	movwf	??_sprintf
   752  0718  0850               	movf	sprintf@sp,w
   753  0719  0084               	movwf	4
   754  071A  0848               	movf	??_sprintf,w
   755  071B  1383               	bcf	3,7	;select IRP bank0
   756  071C  0080               	movwf	0
   757  071D                     l1119:
   758  071D  3001               	movlw	1
   759  071E  00C8               	movwf	??_sprintf
   760  071F  0848               	movf	??_sprintf,w
   761  0720  07D0               	addwf	sprintf@sp,f
   762                           
   763                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
   764  0721  2FD9               	goto	l1165
   765  0722                     l1121:
   766                           
   767                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   768  0722  01CC               	clrf	sprintf@flag
   769  0723                     l1125:	
   770                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   771                           
   772  0723  3001               	movlw	1
   773  0724  07C5               	addwf	sprintf@f,f
   774  0725  30FF               	movlw	-1
   775  0726  0745               	addwf	sprintf@f,w
   776  0727  0084               	movwf	4
   777  0728  120A  118A  2003  120A  118A  	fcall	stringdir
   778  072D  00D1               	movwf	sprintf@c
   779  072E  00C8               	movwf	??_sprintf
   780  072F  01C9               	clrf	??_sprintf+1
   781                           
   782                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   783                           ; Switch size 1, requested type "simple"
   784                           ; Number of cases is 1, Range of values is 0 to 0
   785                           ; switch strategies available:
   786                           ; Name         Instructions Cycles
   787                           ; simple_byte            4     3 (average)
   788                           ; direct_byte           11     8 (fixed)
   789                           ; jumptable            260     6 (fixed)
   790                           ;	Chosen strategy is simple_byte
   791  0730  0849               	movf	??_sprintf+1,w
   792  0731  3A00               	xorlw	0	; case 0
   793  0732  1903               	skipnz
   794  0733  2F35               	goto	l1309
   795  0734  2FD9               	goto	l1165
   796  0735                     l1309:
   797                           
   798                           ; Switch size 1, requested type "simple"
   799                           ; Number of cases is 3, Range of values is 0 to 105
   800                           ; switch strategies available:
   801                           ; Name         Instructions Cycles
   802                           ; simple_byte           10     6 (average)
   803                           ; jumptable            260     6 (fixed)
   804                           ;	Chosen strategy is simple_byte
   805  0735  0848               	movf	??_sprintf,w
   806  0736  3A00               	xorlw	0	; case 0
   807  0737  1903               	skipnz
   808  0738  2FEB               	goto	l1167
   809  0739  3A64               	xorlw	100	; case 100
   810  073A  1903               	skipnz
   811  073B  2F40               	goto	l1127
   812  073C  3A0D               	xorlw	13	; case 105
   813  073D  1903               	skipnz
   814  073E  2F40               	goto	l1127
   815  073F  2FD9               	goto	l1165
   816  0740                     l1127:
   817                           
   818                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
   819  0740  084B               	movf	sprintf@ap,w
   820  0741  0084               	movwf	4
   821  0742  1383               	bcf	3,7	;select IRP bank0
   822  0743  0800               	movf	0,w
   823  0744  00CE               	movwf	sprintf@val
   824  0745  0A84               	incf	4,f
   825  0746  0800               	movf	0,w
   826  0747  00CF               	movwf	sprintf@val+1
   827  0748                     l1129:
   828  0748  3002               	movlw	2
   829  0749  00C8               	movwf	??_sprintf
   830  074A  0848               	movf	??_sprintf,w
   831  074B  07CB               	addwf	sprintf@ap,f
   832  074C                     l1131:
   833                           
   834                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
   835  074C  1FCF               	btfss	sprintf@val+1,7
   836  074D  2F4F               	goto	u481
   837  074E  2F50               	goto	u480
   838  074F                     u481:
   839  074F  2F59               	goto	l1137
   840  0750                     u480:
   841  0750                     l1133:
   842                           
   843                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
   844  0750  3003               	movlw	3
   845  0751  00C8               	movwf	??_sprintf
   846  0752  0848               	movf	??_sprintf,w
   847  0753  04CC               	iorwf	sprintf@flag,f
   848  0754                     l1135:
   849                           
   850                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
   851  0754  09CE               	comf	sprintf@val,f
   852  0755  09CF               	comf	sprintf@val+1,f
   853  0756  0ACE               	incf	sprintf@val,f
   854  0757  1903               	skipnz
   855  0758  0ACF               	incf	sprintf@val+1,f
   856  0759                     l1137:
   857                           
   858                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
   859  0759  01D1               	clrf	sprintf@c
   860  075A  0AD1               	incf	sprintf@c,f
   861  075B                     l1143:
   862                           
   863                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
   864  075B  0851               	movf	sprintf@c,w
   865  075C  00C8               	movwf	??_sprintf
   866  075D  0748               	addwf	??_sprintf,w
   867  075E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   868  075F  0084               	movwf	4
   869  0760  120A  118A  2003  120A  118A  	fcall	stringdir
   870  0765  00C9               	movwf	??_sprintf+1
   871  0766  120A  118A  2003  120A  118A  	fcall	stringdir
   872  076B  00CA               	movwf	??_sprintf+2
   873  076C  084A               	movf	??_sprintf+2,w
   874  076D  024F               	subwf	sprintf@val+1,w
   875  076E  1D03               	skipz
   876  076F  2F72               	goto	u495
   877  0770  0849               	movf	??_sprintf+1,w
   878  0771  024E               	subwf	sprintf@val,w
   879  0772                     u495:
   880  0772  1803               	skipnc
   881  0773  2F75               	goto	u491
   882  0774  2F76               	goto	u490
   883  0775                     u491:
   884  0775  2F77               	goto	l1147
   885  0776                     u490:
   886  0776  2F81               	goto	l1149
   887  0777                     l1147:
   888  0777  3001               	movlw	1
   889  0778  00C8               	movwf	??_sprintf
   890  0779  0848               	movf	??_sprintf,w
   891  077A  07D1               	addwf	sprintf@c,f
   892  077B  3005               	movlw	5
   893  077C  0651               	xorwf	sprintf@c,w
   894  077D  1D03               	btfss	3,2
   895  077E  2F80               	goto	u501
   896  077F  2F81               	goto	u500
   897  0780                     u501:
   898  0780  2F5B               	goto	l1143
   899  0781                     u500:
   900  0781                     l1149:
   901                           
   902                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
   903  0781  084C               	movf	sprintf@flag,w
   904  0782  3903               	andlw	3
   905  0783  1903               	btfsc	3,2
   906  0784  2F86               	goto	u511
   907  0785  2F87               	goto	u510
   908  0786                     u511:
   909  0786  2F92               	goto	l1155
   910  0787                     u510:
   911  0787                     l1151:
   912                           
   913                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
   914  0787  302D               	movlw	45
   915  0788  00C8               	movwf	??_sprintf
   916  0789  0850               	movf	sprintf@sp,w
   917  078A  0084               	movwf	4
   918  078B  0848               	movf	??_sprintf,w
   919  078C  1383               	bcf	3,7	;select IRP bank0
   920  078D  0080               	movwf	0
   921  078E                     l1153:
   922  078E  3001               	movlw	1
   923  078F  00C8               	movwf	??_sprintf
   924  0790  0848               	movf	??_sprintf,w
   925  0791  07D0               	addwf	sprintf@sp,f
   926  0792                     l1155:
   927                           
   928                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   929  0792  0851               	movf	sprintf@c,w
   930  0793  00C8               	movwf	??_sprintf
   931  0794  0848               	movf	??_sprintf,w
   932  0795  00CD               	movwf	sprintf@prec
   933                           
   934                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   935  0796  2FD0               	goto	l1163
   936  0797                     l1157:
   937                           
   938                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
   939  0797  300A               	movlw	10
   940  0798  00F8               	movwf	___lwmod@divisor
   941  0799  3000               	movlw	0
   942  079A  00F9               	movwf	___lwmod@divisor+1
   943  079B  084D               	movf	sprintf@prec,w
   944  079C  00C8               	movwf	??_sprintf
   945  079D  0748               	addwf	??_sprintf,w
   946  079E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   947  079F  0084               	movwf	4
   948  07A0  120A  118A  2003  120A  118A  	fcall	stringdir
   949  07A5  00F0               	movwf	___lwdiv@divisor
   950  07A6  120A  118A  2003  120A  118A  	fcall	stringdir
   951  07AB  00F1               	movwf	___lwdiv@divisor+1
   952  07AC  084F               	movf	sprintf@val+1,w
   953  07AD  00F3               	movwf	___lwdiv@dividend+1
   954  07AE  084E               	movf	sprintf@val,w
   955  07AF  00F2               	movwf	___lwdiv@dividend
   956  07B0  120A  118A  25D5  120A  118A  	fcall	___lwdiv
   957  07B5  0871               	movf	?___lwdiv+1,w
   958  07B6  00FB               	movwf	___lwmod@dividend+1
   959  07B7  0870               	movf	?___lwdiv,w
   960  07B8  00FA               	movwf	___lwmod@dividend
   961  07B9  120A  118A  259B  120A  118A  	fcall	___lwmod
   962  07BE  0878               	movf	?___lwmod,w
   963  07BF  3E30               	addlw	48
   964  07C0  1283               	bcf	3,5	;RP0=0, select bank0
   965  07C1  1303               	bcf	3,6	;RP1=0, select bank0
   966  07C2  00C9               	movwf	??_sprintf+1
   967  07C3  0849               	movf	??_sprintf+1,w
   968  07C4  00D1               	movwf	sprintf@c
   969  07C5                     l1159:
   970                           
   971                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
   972  07C5  0851               	movf	sprintf@c,w
   973  07C6  00C8               	movwf	??_sprintf
   974  07C7  0850               	movf	sprintf@sp,w
   975  07C8  0084               	movwf	4
   976  07C9  0848               	movf	??_sprintf,w
   977  07CA  1383               	bcf	3,7	;select IRP bank0
   978  07CB  0080               	movwf	0
   979  07CC                     l1161:
   980  07CC  3001               	movlw	1
   981  07CD  00C8               	movwf	??_sprintf
   982  07CE  0848               	movf	??_sprintf,w
   983  07CF  07D0               	addwf	sprintf@sp,f
   984  07D0                     l1163:
   985                           
   986                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   987  07D0  30FF               	movlw	255
   988  07D1  00C8               	movwf	??_sprintf
   989  07D2  0848               	movf	??_sprintf,w
   990  07D3  07CD               	addwf	sprintf@prec,f
   991  07D4  0A4D               	incf	sprintf@prec,w
   992  07D5  1D03               	btfss	3,2
   993  07D6  2FD8               	goto	u521
   994  07D7  2FD9               	goto	u520
   995  07D8                     u521:
   996  07D8  2F97               	goto	l1157
   997  07D9                     u520:
   998  07D9                     l1165:
   999                           
  1000                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1001  07D9  3001               	movlw	1
  1002  07DA  07C5               	addwf	sprintf@f,f
  1003  07DB  30FF               	movlw	-1
  1004  07DC  0745               	addwf	sprintf@f,w
  1005  07DD  0084               	movwf	4
  1006  07DE  120A  118A  2003  120A  118A  	fcall	stringdir
  1007  07E3  00C8               	movwf	??_sprintf
  1008  07E4  0848               	movf	??_sprintf,w
  1009  07E5  00D1               	movwf	sprintf@c
  1010  07E6  0851               	movf	sprintf@c,w
  1011  07E7  1D03               	btfss	3,2
  1012  07E8  2FEA               	goto	u531
  1013  07E9  2FEB               	goto	u530
  1014  07EA                     u531:
  1015  07EA  2F10               	goto	l1115
  1016  07EB                     u530:
  1017  07EB                     l1167:
  1018                           
  1019                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1020  07EB  0850               	movf	sprintf@sp,w
  1021  07EC  0084               	movwf	4
  1022  07ED  1383               	bcf	3,7	;select IRP bank0
  1023  07EE  0180               	clrf	0
  1024  07EF                     l207:
  1025  07EF  0008               	return
  1026  07F0                     __end_of_sprintf:
  1027                           
  1028                           	psect	text2
  1029  059B                     __ptext2:	
  1030 ;; *************** function ___lwmod *****************
  1031 ;; Defined at:
  1032 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;  divisor         2    8[COMMON] unsigned int 
  1035 ;;  dividend        2   10[COMMON] unsigned int 
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  counter         1   13[COMMON] unsigned char 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  2    8[COMMON] unsigned int 
  1040 ;; Registers used:
  1041 ;;		wreg, status,2, status,0
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1047 ;;      Params:         4       0       0       0       0
  1048 ;;      Locals:         1       0       0       0       0
  1049 ;;      Temps:          1       0       0       0       0
  1050 ;;      Totals:         6       0       0       0       0
  1051 ;;Total ram usage:        6 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; This function calls:
  1054 ;;		Nothing
  1055 ;; This function is called by:
  1056 ;;		_sprintf
  1057 ;;		_lcd_print_number
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           
  1062                           ;psect for function ___lwmod
  1063  059B                     ___lwmod:
  1064  059B                     l1089:	
  1065                           ;incstack = 0
  1066                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1067                           
  1068  059B  0878               	movf	___lwmod@divisor,w
  1069  059C  0479               	iorwf	___lwmod@divisor+1,w
  1070  059D  1903               	btfsc	3,2
  1071  059E  2DA0               	goto	u411
  1072  059F  2DA1               	goto	u410
  1073  05A0                     u411:
  1074  05A0  2DD0               	goto	l1107
  1075  05A1                     u410:
  1076  05A1                     l1091:
  1077  05A1  01FD               	clrf	___lwmod@counter
  1078  05A2  0AFD               	incf	___lwmod@counter,f
  1079  05A3  2DAF               	goto	l1097
  1080  05A4                     l1093:
  1081  05A4  3001               	movlw	1
  1082  05A5                     u425:
  1083  05A5  1003               	clrc
  1084  05A6  0DF8               	rlf	___lwmod@divisor,f
  1085  05A7  0DF9               	rlf	___lwmod@divisor+1,f
  1086  05A8  3EFF               	addlw	-1
  1087  05A9  1D03               	skipz
  1088  05AA  2DA5               	goto	u425
  1089  05AB                     l1095:
  1090  05AB  3001               	movlw	1
  1091  05AC  00FC               	movwf	??___lwmod
  1092  05AD  087C               	movf	??___lwmod,w
  1093  05AE  07FD               	addwf	___lwmod@counter,f
  1094  05AF                     l1097:
  1095  05AF  1FF9               	btfss	___lwmod@divisor+1,7
  1096  05B0  2DB2               	goto	u431
  1097  05B1  2DB3               	goto	u430
  1098  05B2                     u431:
  1099  05B2  2DA4               	goto	l1093
  1100  05B3                     u430:
  1101  05B3                     l1099:
  1102  05B3  0879               	movf	___lwmod@divisor+1,w
  1103  05B4  027B               	subwf	___lwmod@dividend+1,w
  1104  05B5  1D03               	skipz
  1105  05B6  2DB9               	goto	u445
  1106  05B7  0878               	movf	___lwmod@divisor,w
  1107  05B8  027A               	subwf	___lwmod@dividend,w
  1108  05B9                     u445:
  1109  05B9  1C03               	skipc
  1110  05BA  2DBC               	goto	u441
  1111  05BB  2DBD               	goto	u440
  1112  05BC                     u441:
  1113  05BC  2DC3               	goto	l1103
  1114  05BD                     u440:
  1115  05BD                     l1101:
  1116  05BD  0878               	movf	___lwmod@divisor,w
  1117  05BE  02FA               	subwf	___lwmod@dividend,f
  1118  05BF  0879               	movf	___lwmod@divisor+1,w
  1119  05C0  1C03               	skipc
  1120  05C1  03FB               	decf	___lwmod@dividend+1,f
  1121  05C2  02FB               	subwf	___lwmod@dividend+1,f
  1122  05C3                     l1103:
  1123  05C3  3001               	movlw	1
  1124  05C4                     u455:
  1125  05C4  1003               	clrc
  1126  05C5  0CF9               	rrf	___lwmod@divisor+1,f
  1127  05C6  0CF8               	rrf	___lwmod@divisor,f
  1128  05C7  3EFF               	addlw	-1
  1129  05C8  1D03               	skipz
  1130  05C9  2DC4               	goto	u455
  1131  05CA                     l1105:
  1132  05CA  3001               	movlw	1
  1133  05CB  02FD               	subwf	___lwmod@counter,f
  1134  05CC  1D03               	btfss	3,2
  1135  05CD  2DCF               	goto	u461
  1136  05CE  2DD0               	goto	u460
  1137  05CF                     u461:
  1138  05CF  2DB3               	goto	l1099
  1139  05D0                     u460:
  1140  05D0                     l1107:
  1141  05D0  087B               	movf	___lwmod@dividend+1,w
  1142  05D1  00F9               	movwf	?___lwmod+1
  1143  05D2  087A               	movf	___lwmod@dividend,w
  1144  05D3  00F8               	movwf	?___lwmod
  1145  05D4                     l493:
  1146  05D4  0008               	return
  1147  05D5                     __end_of___lwmod:
  1148                           
  1149                           	psect	text3
  1150  05D5                     __ptext3:	
  1151 ;; *************** function ___lwdiv *****************
  1152 ;; Defined at:
  1153 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;  divisor         2    0[COMMON] unsigned int 
  1156 ;;  dividend        2    2[COMMON] unsigned int 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;  quotient        2    5[COMMON] unsigned int 
  1159 ;;  counter         1    7[COMMON] unsigned char 
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  2    0[COMMON] unsigned int 
  1162 ;; Registers used:
  1163 ;;		wreg, status,2, status,0
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1169 ;;      Params:         4       0       0       0       0
  1170 ;;      Locals:         3       0       0       0       0
  1171 ;;      Temps:          1       0       0       0       0
  1172 ;;      Totals:         8       0       0       0       0
  1173 ;;Total ram usage:        8 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; This function calls:
  1176 ;;		Nothing
  1177 ;; This function is called by:
  1178 ;;		_sprintf
  1179 ;;		_lcd_print_number
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           
  1184                           ;psect for function ___lwdiv
  1185  05D5                     ___lwdiv:
  1186  05D5                     l1063:	
  1187                           ;incstack = 0
  1188                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1189                           
  1190  05D5  01F5               	clrf	___lwdiv@quotient
  1191  05D6  01F6               	clrf	___lwdiv@quotient+1
  1192  05D7                     l1065:
  1193  05D7  0870               	movf	___lwdiv@divisor,w
  1194  05D8  0471               	iorwf	___lwdiv@divisor+1,w
  1195  05D9  1903               	btfsc	3,2
  1196  05DA  2DDC               	goto	u341
  1197  05DB  2DDD               	goto	u340
  1198  05DC                     u341:
  1199  05DC  2E14               	goto	l1085
  1200  05DD                     u340:
  1201  05DD                     l1067:
  1202  05DD  01F7               	clrf	___lwdiv@counter
  1203  05DE  0AF7               	incf	___lwdiv@counter,f
  1204  05DF  2DEB               	goto	l1073
  1205  05E0                     l1069:
  1206  05E0  3001               	movlw	1
  1207  05E1                     u355:
  1208  05E1  1003               	clrc
  1209  05E2  0DF0               	rlf	___lwdiv@divisor,f
  1210  05E3  0DF1               	rlf	___lwdiv@divisor+1,f
  1211  05E4  3EFF               	addlw	-1
  1212  05E5  1D03               	skipz
  1213  05E6  2DE1               	goto	u355
  1214  05E7                     l1071:
  1215  05E7  3001               	movlw	1
  1216  05E8  00F4               	movwf	??___lwdiv
  1217  05E9  0874               	movf	??___lwdiv,w
  1218  05EA  07F7               	addwf	___lwdiv@counter,f
  1219  05EB                     l1073:
  1220  05EB  1FF1               	btfss	___lwdiv@divisor+1,7
  1221  05EC  2DEE               	goto	u361
  1222  05ED  2DEF               	goto	u360
  1223  05EE                     u361:
  1224  05EE  2DE0               	goto	l1069
  1225  05EF                     u360:
  1226  05EF                     l1075:
  1227  05EF  3001               	movlw	1
  1228  05F0                     u375:
  1229  05F0  1003               	clrc
  1230  05F1  0DF5               	rlf	___lwdiv@quotient,f
  1231  05F2  0DF6               	rlf	___lwdiv@quotient+1,f
  1232  05F3  3EFF               	addlw	-1
  1233  05F4  1D03               	skipz
  1234  05F5  2DF0               	goto	u375
  1235  05F6  0871               	movf	___lwdiv@divisor+1,w
  1236  05F7  0273               	subwf	___lwdiv@dividend+1,w
  1237  05F8  1D03               	skipz
  1238  05F9  2DFC               	goto	u385
  1239  05FA  0870               	movf	___lwdiv@divisor,w
  1240  05FB  0272               	subwf	___lwdiv@dividend,w
  1241  05FC                     u385:
  1242  05FC  1C03               	skipc
  1243  05FD  2DFF               	goto	u381
  1244  05FE  2E00               	goto	u380
  1245  05FF                     u381:
  1246  05FF  2E07               	goto	l1081
  1247  0600                     u380:
  1248  0600                     l1077:
  1249  0600  0870               	movf	___lwdiv@divisor,w
  1250  0601  02F2               	subwf	___lwdiv@dividend,f
  1251  0602  0871               	movf	___lwdiv@divisor+1,w
  1252  0603  1C03               	skipc
  1253  0604  03F3               	decf	___lwdiv@dividend+1,f
  1254  0605  02F3               	subwf	___lwdiv@dividend+1,f
  1255  0606                     l1079:
  1256  0606  1475               	bsf	___lwdiv@quotient,0
  1257  0607                     l1081:
  1258  0607  3001               	movlw	1
  1259  0608                     u395:
  1260  0608  1003               	clrc
  1261  0609  0CF1               	rrf	___lwdiv@divisor+1,f
  1262  060A  0CF0               	rrf	___lwdiv@divisor,f
  1263  060B  3EFF               	addlw	-1
  1264  060C  1D03               	skipz
  1265  060D  2E08               	goto	u395
  1266  060E                     l1083:
  1267  060E  3001               	movlw	1
  1268  060F  02F7               	subwf	___lwdiv@counter,f
  1269  0610  1D03               	btfss	3,2
  1270  0611  2E13               	goto	u401
  1271  0612  2E14               	goto	u400
  1272  0613                     u401:
  1273  0613  2DEF               	goto	l1075
  1274  0614                     u400:
  1275  0614                     l1085:
  1276  0614  0876               	movf	___lwdiv@quotient+1,w
  1277  0615  00F1               	movwf	?___lwdiv+1
  1278  0616  0875               	movf	___lwdiv@quotient,w
  1279  0617  00F0               	movwf	?___lwdiv
  1280  0618                     l483:
  1281  0618  0008               	return
  1282  0619                     __end_of___lwdiv:
  1283                           
  1284                           	psect	text4
  1285  0544                     __ptext4:	
  1286 ;; *************** function _lcd_puts *****************
  1287 ;; Defined at:
  1288 ;;		line 92 in file "lcd.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;  str             1    wreg     PTR unsigned char 
  1291 ;;		 -> buffer(16), 
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;  str             1   12[COMMON] PTR unsigned char 
  1294 ;;		 -> buffer(16), 
  1295 ;;  i               2   10[COMMON] int 
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1305 ;;      Params:         0       0       0       0       0
  1306 ;;      Locals:         3       0       0       0       0
  1307 ;;      Temps:          1       0       0       0       0
  1308 ;;      Totals:         4       0       0       0       0
  1309 ;;Total ram usage:        4 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    3
  1312 ;; This function calls:
  1313 ;;		_lcd_data
  1314 ;; This function is called by:
  1315 ;;		_main
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           
  1320                           ;psect for function _lcd_puts
  1321  0544                     _lcd_puts:
  1322                           
  1323                           ;incstack = 0
  1324                           ; Regs used in _lcd_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1325                           ;lcd_puts@str stored from wreg
  1326  0544  00FC               	movwf	lcd_puts@str
  1327  0545                     l1175:
  1328                           
  1329                           ;lcd.c: 93:     for (int i = 0; str[i] != 0; i++)
  1330  0545  01FA               	clrf	lcd_puts@i
  1331  0546  01FB               	clrf	lcd_puts@i+1
  1332  0547  2D59               	goto	l1181
  1333  0548                     l1177:
  1334                           
  1335                           ;lcd.c: 94:         lcd_data(str[i]);
  1336  0548  087A               	movf	lcd_puts@i,w
  1337  0549  077C               	addwf	lcd_puts@str,w
  1338  054A  00F9               	movwf	??_lcd_puts
  1339  054B  0879               	movf	??_lcd_puts,w
  1340  054C  0084               	movwf	4
  1341  054D  0800               	movf	0,w
  1342  054E  120A  118A  250D  120A  118A  	fcall	_lcd_data
  1343  0553                     l1179:
  1344  0553  3001               	movlw	1
  1345  0554  07FA               	addwf	lcd_puts@i,f
  1346  0555  1803               	skipnc
  1347  0556  0AFB               	incf	lcd_puts@i+1,f
  1348  0557  3000               	movlw	0
  1349  0558  07FB               	addwf	lcd_puts@i+1,f
  1350  0559                     l1181:
  1351  0559  087A               	movf	lcd_puts@i,w
  1352  055A  077C               	addwf	lcd_puts@str,w
  1353  055B  00F9               	movwf	??_lcd_puts
  1354  055C  0879               	movf	??_lcd_puts,w
  1355  055D  0084               	movwf	4
  1356  055E  1383               	bcf	3,7	;select IRP bank0
  1357  055F  0800               	movf	0,w
  1358  0560  1D03               	btfss	3,2
  1359  0561  2D63               	goto	u541
  1360  0562  2D64               	goto	u540
  1361  0563                     u541:
  1362  0563  2D48               	goto	l1177
  1363  0564                     u540:
  1364  0564                     l66:
  1365  0564  0008               	return
  1366  0565                     __end_of_lcd_puts:
  1367                           
  1368                           	psect	text5
  1369  050D                     __ptext5:	
  1370 ;; *************** function _lcd_data *****************
  1371 ;; Defined at:
  1372 ;;		line 62 in file "lcd.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;  a               1    wreg     unsigned char 
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;  a               1    8[COMMON] unsigned char 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, status,2, status,0, pclath, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1386 ;;      Params:         0       0       0       0       0
  1387 ;;      Locals:         1       0       0       0       0
  1388 ;;      Temps:          0       0       0       0       0
  1389 ;;      Totals:         1       0       0       0       0
  1390 ;;Total ram usage:        1 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    2
  1393 ;; This function calls:
  1394 ;;		_lcd_com
  1395 ;; This function is called by:
  1396 ;;		_lcd_puts
  1397 ;;		_hex2lcd
  1398 ;;		_LCD_ScrollMessage
  1399 ;;		_lcd_print_number
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           
  1404                           ;psect for function _lcd_data
  1405  050D                     _lcd_data:
  1406                           
  1407                           ;incstack = 0
  1408                           ; Regs used in _lcd_data: [wreg+status,2+status,0+pclath+cstack]
  1409                           ;lcd_data@a stored from wreg
  1410  050D  00F8               	movwf	lcd_data@a
  1411  050E                     l1059:
  1412                           
  1413                           ;lcd.c: 63:     status = 1;
  1414  050E  1283               	bcf	3,5	;RP0=0, select bank0
  1415  050F  1303               	bcf	3,6	;RP1=0, select bank0
  1416  0510  1455               	bsf	_status/(0+8),_status& (0+7)
  1417                           
  1418                           ;lcd.c: 64:     PORTDbits.RD0 = 1;
  1419  0511  1408               	bsf	8,0	;volatile
  1420  0512                     l1061:
  1421                           
  1422                           ;lcd.c: 65:     lcd_com(a);
  1423  0512  0878               	movf	lcd_data@a,w
  1424  0513  120A  118A  2619  120A  118A  	fcall	_lcd_com
  1425  0518                     l57:
  1426  0518  0008               	return
  1427  0519                     __end_of_lcd_data:
  1428                           
  1429                           	psect	text6
  1430  0668                     __ptext6:	
  1431 ;; *************** function _lcd_init *****************
  1432 ;; Defined at:
  1433 ;;		line 68 in file "lcd.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;		None
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;		None
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		wreg, status,2, status,0, pclath, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1447 ;;      Params:         0       0       0       0       0
  1448 ;;      Locals:         0       0       0       0       0
  1449 ;;      Temps:          0       0       0       0       0
  1450 ;;      Totals:         0       0       0       0       0
  1451 ;;Total ram usage:        0 bytes
  1452 ;; Hardware stack levels used:    1
  1453 ;; Hardware stack levels required when called:    2
  1454 ;; This function calls:
  1455 ;;		_delay
  1456 ;;		_lcd_com
  1457 ;;		_lcd_init_write
  1458 ;; This function is called by:
  1459 ;;		_main
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           
  1464                           ;psect for function _lcd_init
  1465  0668                     _lcd_init:
  1466  0668                     l1111:	
  1467                           ;incstack = 0
  1468                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1469                           
  1470                           
  1471                           ;lcd.c: 69:     delay(300);
  1472  0668  302C               	movlw	44
  1473  0669  00F0               	movwf	delay@j
  1474  066A  3001               	movlw	1
  1475  066B  00F1               	movwf	delay@j+1
  1476  066C  120A  118A  252E  120A  118A  	fcall	_delay
  1477                           
  1478                           ;lcd.c: 70:     lcd_init_write(0x30);
  1479  0671  3030               	movlw	48
  1480  0672  120A  118A  2519  120A  118A  	fcall	_lcd_init_write
  1481                           
  1482                           ;lcd.c: 71:     delay(300);
  1483  0677  302C               	movlw	44
  1484  0678  00F0               	movwf	delay@j
  1485  0679  3001               	movlw	1
  1486  067A  00F1               	movwf	delay@j+1
  1487  067B  120A  118A  252E  120A  118A  	fcall	_delay
  1488                           
  1489                           ;lcd.c: 72:     lcd_init_write(0x30);
  1490  0680  3030               	movlw	48
  1491  0681  120A  118A  2519  120A  118A  	fcall	_lcd_init_write
  1492                           
  1493                           ;lcd.c: 73:     delay(300);
  1494  0686  302C               	movlw	44
  1495  0687  00F0               	movwf	delay@j
  1496  0688  3001               	movlw	1
  1497  0689  00F1               	movwf	delay@j+1
  1498  068A  120A  118A  252E  120A  118A  	fcall	_delay
  1499                           
  1500                           ;lcd.c: 74:     lcd_init_write(0x30);
  1501  068F  3030               	movlw	48
  1502  0690  120A  118A  2519  120A  118A  	fcall	_lcd_init_write
  1503                           
  1504                           ;lcd.c: 75:     delay(300);
  1505  0695  302C               	movlw	44
  1506  0696  00F0               	movwf	delay@j
  1507  0697  3001               	movlw	1
  1508  0698  00F1               	movwf	delay@j+1
  1509  0699  120A  118A  252E  120A  118A  	fcall	_delay
  1510                           
  1511                           ;lcd.c: 76:     lcd_init_write(0x20);
  1512  069E  3020               	movlw	32
  1513  069F  120A  118A  2519  120A  118A  	fcall	_lcd_init_write
  1514                           
  1515                           ;lcd.c: 77:     delay(300);
  1516  06A4  302C               	movlw	44
  1517  06A5  00F0               	movwf	delay@j
  1518  06A6  3001               	movlw	1
  1519  06A7  00F1               	movwf	delay@j+1
  1520  06A8  120A  118A  252E  120A  118A  	fcall	_delay
  1521                           
  1522                           ;lcd.c: 78:     lcd_com(0xC);
  1523  06AD  300C               	movlw	12
  1524  06AE  120A  118A  2619  120A  118A  	fcall	_lcd_com
  1525                           
  1526                           ;lcd.c: 79:     delay(300);
  1527  06B3  302C               	movlw	44
  1528  06B4  00F0               	movwf	delay@j
  1529  06B5  3001               	movlw	1
  1530  06B6  00F1               	movwf	delay@j+1
  1531  06B7  120A  118A  252E  120A  118A  	fcall	_delay
  1532                           
  1533                           ;lcd.c: 80:     lcd_com(0x28);
  1534  06BC  3028               	movlw	40
  1535  06BD  120A  118A  2619  120A  118A  	fcall	_lcd_com
  1536                           
  1537                           ;lcd.c: 81:     delay(300);
  1538  06C2  302C               	movlw	44
  1539  06C3  00F0               	movwf	delay@j
  1540  06C4  3001               	movlw	1
  1541  06C5  00F1               	movwf	delay@j+1
  1542  06C6  120A  118A  252E  120A  118A  	fcall	_delay
  1543                           
  1544                           ;lcd.c: 82:     lcd_com(4);
  1545  06CB  3004               	movlw	4
  1546  06CC  120A  118A  2619  120A  118A  	fcall	_lcd_com
  1547                           
  1548                           ;lcd.c: 83:     delay(300);
  1549  06D1  302C               	movlw	44
  1550  06D2  00F0               	movwf	delay@j
  1551  06D3  3001               	movlw	1
  1552  06D4  00F1               	movwf	delay@j+1
  1553  06D5  120A  118A  252E  120A  118A  	fcall	_delay
  1554                           
  1555                           ;lcd.c: 84:     lcd_com(0x85);
  1556  06DA  3085               	movlw	133
  1557  06DB  120A  118A  2619  120A  118A  	fcall	_lcd_com
  1558                           
  1559                           ;lcd.c: 85:     delay(300);
  1560  06E0  302C               	movlw	44
  1561  06E1  00F0               	movwf	delay@j
  1562  06E2  3001               	movlw	1
  1563  06E3  00F1               	movwf	delay@j+1
  1564  06E4  120A  118A  252E  120A  118A  	fcall	_delay
  1565                           
  1566                           ;lcd.c: 86:     lcd_com(6);
  1567  06E9  3006               	movlw	6
  1568  06EA  120A  118A  2619  120A  118A  	fcall	_lcd_com
  1569                           
  1570                           ;lcd.c: 87:     delay(300);
  1571  06EF  302C               	movlw	44
  1572  06F0  00F0               	movwf	delay@j
  1573  06F1  3001               	movlw	1
  1574  06F2  00F1               	movwf	delay@j+1
  1575  06F3  120A  118A  252E  120A  118A  	fcall	_delay
  1576                           
  1577                           ;lcd.c: 88:     lcd_com(1);
  1578  06F8  3001               	movlw	1
  1579  06F9  120A  118A  2619  120A  118A  	fcall	_lcd_com
  1580                           
  1581                           ;lcd.c: 89:     delay(300);
  1582  06FE  302C               	movlw	44
  1583  06FF  00F0               	movwf	delay@j
  1584  0700  3001               	movlw	1
  1585  0701  00F1               	movwf	delay@j+1
  1586  0702  120A  118A  252E  120A  118A  	fcall	_delay
  1587  0707                     l60:
  1588  0707  0008               	return
  1589  0708                     __end_of_lcd_init:
  1590                           
  1591                           	psect	text7
  1592  0519                     __ptext7:	
  1593 ;; *************** function _lcd_init_write *****************
  1594 ;; Defined at:
  1595 ;;		line 28 in file "lcd.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;  a               1    wreg     unsigned char 
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;  a               1    4[COMMON] unsigned char 
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      void 
  1602 ;; Registers used:
  1603 ;;		wreg, status,2, status,0, pclath, cstack
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1609 ;;      Params:         0       0       0       0       0
  1610 ;;      Locals:         1       0       0       0       0
  1611 ;;      Temps:          0       0       0       0       0
  1612 ;;      Totals:         1       0       0       0       0
  1613 ;;Total ram usage:        1 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:    1
  1616 ;; This function calls:
  1617 ;;		_delay
  1618 ;; This function is called by:
  1619 ;;		_lcd_init
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           
  1624                           ;psect for function _lcd_init_write
  1625  0519                     _lcd_init_write:
  1626                           
  1627                           ;incstack = 0
  1628                           ; Regs used in _lcd_init_write: [wreg+status,2+status,0+pclath+cstack]
  1629                           ;lcd_init_write@a stored from wreg
  1630  0519  00F4               	movwf	lcd_init_write@a
  1631  051A                     l1049:
  1632                           
  1633                           ;lcd.c: 29:     PORTDbits.RD0 = 0;
  1634  051A  1283               	bcf	3,5	;RP0=0, select bank0
  1635  051B  1303               	bcf	3,6	;RP1=0, select bank0
  1636  051C  1008               	bcf	8,0	;volatile
  1637                           
  1638                           ;lcd.c: 30:     PORTDbits.RD1 = 0;
  1639  051D  1088               	bcf	8,1	;volatile
  1640  051E                     l1051:
  1641                           
  1642                           ;lcd.c: 31:     PORTD = a;
  1643  051E  0874               	movf	lcd_init_write@a,w
  1644  051F  0088               	movwf	8	;volatile
  1645  0520                     l1053:
  1646                           
  1647                           ;lcd.c: 32:     PORTDbits.RD2 = 1;
  1648  0520  1508               	bsf	8,2	;volatile
  1649  0521                     l1055:
  1650                           
  1651                           ;lcd.c: 33:     delay(300);
  1652  0521  302C               	movlw	44
  1653  0522  00F0               	movwf	delay@j
  1654  0523  3001               	movlw	1
  1655  0524  00F1               	movwf	delay@j+1
  1656  0525  120A  118A  252E  120A  118A  	fcall	_delay
  1657  052A                     l1057:
  1658                           
  1659                           ;lcd.c: 34:     PORTDbits.RD2 = 0;
  1660  052A  1283               	bcf	3,5	;RP0=0, select bank0
  1661  052B  1303               	bcf	3,6	;RP1=0, select bank0
  1662  052C  1108               	bcf	8,2	;volatile
  1663  052D                     l49:
  1664  052D  0008               	return
  1665  052E                     __end_of_lcd_init_write:
  1666                           
  1667                           	psect	text8
  1668  0619                     __ptext8:	
  1669 ;; *************** function _lcd_com *****************
  1670 ;; Defined at:
  1671 ;;		line 37 in file "lcd.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;  a               1    wreg     unsigned char 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;  a               1    6[COMMON] unsigned char 
  1676 ;;  temp            1    7[COMMON] unsigned char 
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  1    wreg      void 
  1679 ;; Registers used:
  1680 ;;		wreg, status,2, status,0, pclath, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1686 ;;      Params:         0       0       0       0       0
  1687 ;;      Locals:         2       0       0       0       0
  1688 ;;      Temps:          2       0       0       0       0
  1689 ;;      Totals:         4       0       0       0       0
  1690 ;;Total ram usage:        4 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    1
  1693 ;; This function calls:
  1694 ;;		_delay
  1695 ;; This function is called by:
  1696 ;;		_main
  1697 ;;		_lcd_data
  1698 ;;		_lcd_init
  1699 ;;		_LCD_ScrollMessage
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           
  1704                           ;psect for function _lcd_com
  1705  0619                     _lcd_com:
  1706                           
  1707                           ;incstack = 0
  1708                           ; Regs used in _lcd_com: [wreg+status,2+status,0+pclath+cstack]
  1709                           ;lcd_com@a stored from wreg
  1710  0619  00F6               	movwf	lcd_com@a
  1711  061A                     l1017:
  1712                           
  1713                           ;lcd.c: 38:     unsigned char temp;;lcd.c: 39:     if (status) {
  1714  061A  1283               	bcf	3,5	;RP0=0, select bank0
  1715  061B  1303               	bcf	3,6	;RP1=0, select bank0
  1716  061C  1C55               	btfss	_status/(0+8),_status& (0+7)
  1717  061D  2E1F               	goto	u321
  1718  061E  2E20               	goto	u320
  1719  061F                     u321:
  1720  061F  2E22               	goto	l52
  1721  0620                     u320:
  1722  0620                     l1019:
  1723                           
  1724                           ;lcd.c: 40:         status = 0;
  1725  0620  1055               	bcf	_status/(0+8),_status& (0+7)
  1726                           
  1727                           ;lcd.c: 41:         goto next;
  1728  0621  2E23               	goto	l53
  1729  0622                     l52:	
  1730                           ;lcd.c: 42:     }
  1731                           
  1732                           
  1733                           ;lcd.c: 43:     PORTDbits.RD0 = 0;
  1734  0622  1008               	bcf	8,0	;volatile
  1735  0623                     l53:	
  1736                           ;lcd.c: 44: next:
  1737                           
  1738                           
  1739                           ;lcd.c: 45:     PORTDbits.RD1 = 0;
  1740  0623  1088               	bcf	8,1	;volatile
  1741  0624                     l1021:
  1742                           
  1743                           ;lcd.c: 46:     temp = a;
  1744  0624  0876               	movf	lcd_com@a,w
  1745  0625  00F4               	movwf	??_lcd_com
  1746  0626  0874               	movf	??_lcd_com,w
  1747  0627  00F7               	movwf	lcd_com@temp
  1748  0628                     l1023:
  1749                           
  1750                           ;lcd.c: 47:     temp &= 0xf0;
  1751  0628  30F0               	movlw	240
  1752  0629  00F4               	movwf	??_lcd_com
  1753  062A  0874               	movf	??_lcd_com,w
  1754  062B  05F7               	andwf	lcd_com@temp,f
  1755  062C                     l1025:
  1756                           
  1757                           ;lcd.c: 48:     PORTD &= 0x0f;
  1758  062C  300F               	movlw	15
  1759  062D  00F4               	movwf	??_lcd_com
  1760  062E  0874               	movf	??_lcd_com,w
  1761  062F  0588               	andwf	8,f	;volatile
  1762  0630                     l1027:
  1763                           
  1764                           ;lcd.c: 49:     PORTD |= temp;
  1765  0630  0877               	movf	lcd_com@temp,w	;volatile
  1766  0631  00F4               	movwf	??_lcd_com
  1767  0632  0874               	movf	??_lcd_com,w
  1768  0633  0488               	iorwf	8,f	;volatile
  1769  0634                     l1029:
  1770                           
  1771                           ;lcd.c: 50:     PORTDbits.RD2 = 1;
  1772  0634  1508               	bsf	8,2	;volatile
  1773  0635                     l1031:
  1774                           
  1775                           ;lcd.c: 51:     delay(300);
  1776  0635  302C               	movlw	44
  1777  0636  00F0               	movwf	delay@j
  1778  0637  3001               	movlw	1
  1779  0638  00F1               	movwf	delay@j+1
  1780  0639  120A  118A  252E  120A  118A  	fcall	_delay
  1781  063E                     l1033:
  1782                           
  1783                           ;lcd.c: 52:     PORTDbits.RD2 = 0;
  1784  063E  1283               	bcf	3,5	;RP0=0, select bank0
  1785  063F  1303               	bcf	3,6	;RP1=0, select bank0
  1786  0640  1108               	bcf	8,2	;volatile
  1787  0641                     l1035:
  1788                           
  1789                           ;lcd.c: 53:     temp = a << 4;
  1790  0641  0876               	movf	lcd_com@a,w
  1791  0642  00F4               	movwf	??_lcd_com
  1792  0643  3003               	movlw	3
  1793  0644                     u335:
  1794  0644  1003               	clrc
  1795  0645  0DF4               	rlf	??_lcd_com,f
  1796  0646  3EFF               	addlw	-1
  1797  0647  1D03               	skipz
  1798  0648  2E44               	goto	u335
  1799  0649  1003               	clrc
  1800  064A  0D74               	rlf	??_lcd_com,w
  1801  064B  00F5               	movwf	??_lcd_com+1
  1802  064C  0875               	movf	??_lcd_com+1,w
  1803  064D  00F7               	movwf	lcd_com@temp
  1804  064E                     l1037:
  1805                           
  1806                           ;lcd.c: 54:     temp &= 0xf0;
  1807  064E  30F0               	movlw	240
  1808  064F  00F4               	movwf	??_lcd_com
  1809  0650  0874               	movf	??_lcd_com,w
  1810  0651  05F7               	andwf	lcd_com@temp,f
  1811  0652                     l1039:
  1812                           
  1813                           ;lcd.c: 55:     PORTD &= 0x0f;
  1814  0652  300F               	movlw	15
  1815  0653  00F4               	movwf	??_lcd_com
  1816  0654  0874               	movf	??_lcd_com,w
  1817  0655  0588               	andwf	8,f	;volatile
  1818  0656                     l1041:
  1819                           
  1820                           ;lcd.c: 56:     PORTD |= temp;
  1821  0656  0877               	movf	lcd_com@temp,w	;volatile
  1822  0657  00F4               	movwf	??_lcd_com
  1823  0658  0874               	movf	??_lcd_com,w
  1824  0659  0488               	iorwf	8,f	;volatile
  1825  065A                     l1043:
  1826                           
  1827                           ;lcd.c: 57:     PORTDbits.RD2 = 1;
  1828  065A  1508               	bsf	8,2	;volatile
  1829  065B                     l1045:
  1830                           
  1831                           ;lcd.c: 58:     delay(300);
  1832  065B  302C               	movlw	44
  1833  065C  00F0               	movwf	delay@j
  1834  065D  3001               	movlw	1
  1835  065E  00F1               	movwf	delay@j+1
  1836  065F  120A  118A  252E  120A  118A  	fcall	_delay
  1837  0664                     l1047:
  1838                           
  1839                           ;lcd.c: 59:     PORTDbits.RD2 = 0;
  1840  0664  1283               	bcf	3,5	;RP0=0, select bank0
  1841  0665  1303               	bcf	3,6	;RP1=0, select bank0
  1842  0666  1108               	bcf	8,2	;volatile
  1843  0667                     l54:
  1844  0667  0008               	return
  1845  0668                     __end_of_lcd_com:
  1846                           
  1847                           	psect	text9
  1848  052E                     __ptext9:	
  1849 ;; *************** function _delay *****************
  1850 ;; Defined at:
  1851 ;;		line 23 in file "lcd.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  j               2    0[COMMON] unsigned int 
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;  i               2    2[COMMON] unsigned int 
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		wreg, status,2
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1865 ;;      Params:         2       0       0       0       0
  1866 ;;      Locals:         2       0       0       0       0
  1867 ;;      Temps:          0       0       0       0       0
  1868 ;;      Totals:         4       0       0       0       0
  1869 ;;Total ram usage:        4 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; This function calls:
  1872 ;;		Nothing
  1873 ;; This function is called by:
  1874 ;;		_lcd_init_write
  1875 ;;		_lcd_com
  1876 ;;		_lcd_init
  1877 ;;		_LCD_ScrollMessage
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           
  1882                           ;psect for function _delay
  1883  052E                     _delay:
  1884  052E                     l1013:	
  1885                           ;incstack = 0
  1886                           ; Regs used in _delay: [wreg+status,2]
  1887                           
  1888                           
  1889                           ;lcd.c: 24:     unsigned int i = 0;
  1890  052E  01F2               	clrf	delay@i
  1891  052F  01F3               	clrf	delay@i+1
  1892                           
  1893                           ;lcd.c: 25:     for (i = 0; i < j; i++);
  1894  0530  01F2               	clrf	delay@i
  1895  0531  01F3               	clrf	delay@i+1
  1896  0532  2D39               	goto	l43
  1897  0533                     l1015:
  1898  0533  3001               	movlw	1
  1899  0534  07F2               	addwf	delay@i,f
  1900  0535  1803               	skipnc
  1901  0536  0AF3               	incf	delay@i+1,f
  1902  0537  3000               	movlw	0
  1903  0538  07F3               	addwf	delay@i+1,f
  1904  0539                     l43:
  1905  0539  0871               	movf	delay@j+1,w
  1906  053A  0273               	subwf	delay@i+1,w
  1907  053B  1D03               	skipz
  1908  053C  2D3F               	goto	u315
  1909  053D  0870               	movf	delay@j,w
  1910  053E  0272               	subwf	delay@i,w
  1911  053F                     u315:
  1912  053F  1C03               	skipc
  1913  0540  2D42               	goto	u311
  1914  0541  2D43               	goto	u310
  1915  0542                     u311:
  1916  0542  2D33               	goto	l1015
  1917  0543                     u310:
  1918  0543                     l46:
  1919  0543  0008               	return
  1920  0544                     __end_of_delay:
  1921  007E                     btemp	set	126	;btemp
  1922  007E                     wtemp0	set	126
  1923                           
  1924                           	psect	config
  1925                           
  1926                           ;Config register CONFIG1 @ 0x2007
  1927                           ;	Oscillator Selection bits
  1928                           ;	FOSC = EXTRC_CLKOUT, RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/
      +                          OSC1/CLKIN
  1929                           ;	Watchdog Timer Enable bit
  1930                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1931                           ;	Power-up Timer Enable bit
  1932                           ;	PWRTE = OFF, PWRT disabled
  1933                           ;	RE3/MCLR pin function select bit
  1934                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  1935                           ;	Code Protection bit
  1936                           ;	CP = OFF, Program memory code protection is disabled
  1937                           ;	Data Code Protection bit
  1938                           ;	CPD = OFF, Data memory code protection is disabled
  1939                           ;	Brown Out Reset Selection bits
  1940                           ;	BOREN = OFF, BOR disabled
  1941                           ;	Internal External Switchover bit
  1942                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1943                           ;	Fail-Safe Clock Monitor Enabled bit
  1944                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1945                           ;	Low Voltage Programming Enable bit
  1946                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1947                           ;	In-Circuit Debugger Mode bit
  1948                           ;	DEBUG = 0x1, unprogrammed default
  1949  2007                     	org	8199
  1950  2007  20F7               	dw	8439
  1951                           
  1952                           ;Config register CONFIG2 @ 0x2008
  1953                           ;	Brown-out Reset Selection bit
  1954                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1955                           ;	Flash Program Memory Self Write Enable bits
  1956                           ;	WRT = OFF, Write protection off
  1957  2008                     	org	8200
  1958  2008  3FFF               	dw	16383

Data Sizes:
    Strings     13
    Constant    10
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     16      54
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 13
		 -> STR_1(CODE[13]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> buffer(BANK0[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_puts@str	PTR unsigned char  size(1) Largest target is 16
		 -> buffer(BANK0[16]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_puts->_lcd_data
    _lcd_data->_lcd_com
    _lcd_init->_lcd_com
    _lcd_init_write->_delay
    _lcd_com->_delay

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    8296
                                             13 BANK0      3     3      0
                            _lcd_com
                           _lcd_init
                           _lcd_puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1515
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     463
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     466
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             4     4      0    1500
                                              9 COMMON     4     4      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             1     1      0    1377
                                              8 COMMON     1     1      0
                            _lcd_com
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    3903
                              _delay
                            _lcd_com
                     _lcd_init_write
 ---------------------------------------------------------------------------------
 (2) _lcd_init_write                                       1     1      0    1285
                                              4 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _lcd_com                                              4     4      0    1355
                                              4 COMMON     4     4      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                4     2      2    1263
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_com
     _delay
   _lcd_init
     _delay
     _lcd_com
       _delay
     _lcd_init_write
       _delay
   _lcd_puts
     _lcd_data
       _lcd_com
         _delay
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      44       3        0.0%
BITBANK0            50      0       1       4        1.2%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      36       5       67.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      44      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Apr 20 15:55:24 2021

                      _c 0034                        pc 0002              lcd_com@temp 0077  
                     l43 0539                       l52 0622                       l60 0707  
                     l53 0623                       l46 0543                       l54 0667  
                     l49 052D                       l57 0518                       l66 0564  
                     fsr 0004                      l207 07EF                      l483 0618  
                    l493 05D4                      u310 0543                      u311 0542  
                    u320 0620                      u400 0614                      u321 061F  
                    u401 0613                      u410 05A1                      u315 053F  
                    u411 05A0                      u340 05DD                      u500 0781  
                    u341 05DC                      u501 0780                      u430 05B3  
                    u510 0787                      u335 0644                      u431 05B2  
                    u511 0786                      u360 05EF                      u440 05BD  
                    u520 07D9                      u361 05EE                      u441 05BC  
                    u425 05A5                      u521 07D8                      u530 07EB  
                    u355 05E1                      u531 07EA                      u540 0564  
                    u380 0600                      u460 05D0                      u541 0563  
                    u381 05FF                      u461 05CF                      u445 05B9  
                    u470 0716                      u375 05F0                      u455 05C4  
                    u471 0715                      u480 0750                      u385 05FC  
                    u481 074F                      u490 0776                      u395 0608  
                    u491 0775                      u495 0772                      _num 0020  
                    fsr0 0004                      indf 0000                     l1013 052E  
                   l1021 0624                     l1101 05BD                     l1015 0533  
                   l1031 0635                     l1023 0628                     l1111 0668  
                   l1103 05C3                     l1041 0656                     l1033 063E  
                   l1025 062C                     l1017 061A                     l1105 05CA  
                   l1121 0722                     l1113 070B                     l1201 057D  
                   l1043 065A                     l1035 0641                     l1027 0630  
                   l1019 0620                     l1051 051E                     l1107 05D0  
                   l1131 074C                     l1115 0710                     l1203 058B  
                   l1045 065B                     l1037 064E                     l1029 0634  
                   l1053 0520                     l1061 0512                     l1133 0750  
                   l1125 0723                     l1117 0716                     l1205 0591  
                   l1047 0664                     l1039 0652                     l1055 0521  
                   l1071 05E7                     l1063 05D5                     l1151 0787  
                   l1143 075B                     l1135 0754                     l1127 0740  
                   l1119 071D                     l1057 052A                     l1049 051A  
                   l1081 0607                     l1073 05EB                     l1065 05D7  
                   l1161 07CC                     l1153 078E                     l1137 0759  
                   l1129 0748                     l1059 050E                     l1083 060E  
                   l1075 05EF                     l1067 05DD                     l1091 05A1  
                   l1163 07D0                     l1155 0792                     l1147 0777  
                   l1181 0559                     l1077 0600                     l1069 05E0  
                   l1085 0614                     l1093 05A4                     l1157 0797  
                   l1149 0781                     l1309 0735                     l1165 07D9  
                   l1175 0545                     l1079 0606                     l1095 05AB  
                   l1159 07C5                     l1167 07EB                     l1191 0571  
                   l1183 0565                     l1177 0548                     l1097 05AF  
                   l1089 059B                     l1193 0573                     l1185 0568  
                   l1179 0553                     l1099 05B3                     l1195 0574  
                   l1187 0569                     l1197 0575                     l1189 056E  
                   l1199 0577                     STR_1 0013                     _TMR1 000E  
                   _main 0565                     btemp 007E              lcd_puts@str 007C  
                   start 0000                    ?_main 0070          __end_of___lwdiv 0619  
        __end_of___lwmod 05D5                    _TMR1H 000F                    _TMR1L 000E  
                  _PORTD 0008                    _TRISD 0088          __end_of_lcd_com 0668  
                  _delay 052E          __end_of_dpowers 0013                    pclath 000A  
                  status 0003                    wtemp0 007E          __end_of_sprintf 07F0  
        __initialization 07F0             __end_of_main 059B                   ??_main 0052  
                 ?_delay 0070         __end_of_lcd_data 0519         __end_of_lcd_init 0708  
       __end_of_lcd_puts 0565                ??___lwdiv 0074                ??___lwmod 007C  
                 _buffer 0035                   delay@i 0072                   delay@j 0070  
                 _status 02A8                ??_lcd_com 0074                ??_sprintf 0048  
       ??_lcd_init_write 0074  __end_of__initialization 07FC           __pcstackCOMMON 0070  
          __end_of_delay 0544                  ??_delay 0072               __pbssBANK0 0020  
             __pmaintext 0565                ?_lcd_data 0070                ?_lcd_init 0070  
              ?_lcd_puts 0070               __stringtab 0003                  ___lwdiv 05D5  
                ___lwmod 059B                  __ptext1 0708                  __ptext2 059B  
                __ptext3 05D5                  __ptext4 0544                  __ptext5 050D  
                __ptext6 0668                  __ptext7 0519                  __ptext8 0619  
                __ptext9 052E                  _lcd_com 0619                _T1CONbits 0010  
                _dpowers 0009               ??_lcd_data 0078                  main@cnt 0053  
                _sprintf 0708                  clrloop0 0506               ??_lcd_init 0078  
             ??_lcd_puts 0079     end_of_initialization 07FC                _PORTDbits 0008  
              _TRISCbits 0087          lcd_init_write@a 0074            __pbitbssBANK0 02A8  
    start_initialization 07F0                ___latbits 0002            __pcstackBANK0 0045  
      __size_of_lcd_data 000C        __size_of_lcd_init 00A0              sprintf@flag 004C  
      __size_of_lcd_puts 0021              sprintf@prec 004D         ___lwdiv@dividend 0072  
__size_of_lcd_init_write 0015                 ?___lwdiv 0070                 ?___lwmod 0078  
              __pstrings 0003                 ?_lcd_com 0070         ___lwdiv@quotient 0075  
         __size_of_delay 0016                 ?_sprintf 0045                clear_ram0 0505  
              lcd_data@a 0078              __stringbase 0008                lcd_puts@i 007A  
       __size_of___lwdiv 0044         __size_of___lwmod 003A       __end_of__stringtab 0009  
       __size_of_lcd_com 004F               sprintf@val 004E          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0077                 _lcd_data 050D                 _lcd_init 0668  
               _lcd_puts 0544         __size_of_sprintf 00E8            __size_of_main 0036  
         _lcd_init_write 0519                 lcd_com@a 0076                sprintf@ap 004B  
              sprintf@sp 0050         ___lwmod@dividend 007A   __end_of_lcd_init_write 052E  
              stringcode 0003                 sprintf@c 0051                 sprintf@f 0045  
        ___lwmod@divisor 0078          ___lwmod@counter 007D                 stringdir 0003  
               stringtab 0003          ?_lcd_init_write 0070  
